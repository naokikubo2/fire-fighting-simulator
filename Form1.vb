Imports System.Threading
Imports System.IO
Imports NPOI.SS.UserModel
Imports System.Drawing
Imports System.Drawing.Drawing2D

'全体的な注意書き
'1500秒で強制終了される
'消火完了したと思ったら、左下

Public Class Form1

    Dim limit_time = 1200

    Dim wind_speed11() As Integer = {11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 11, 12, 10, 9, 13, 15, 11, 9, 9, 10, 12, 13, 8, 8, 11, 13, 11, 13, 13, 13, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 16, 8, 11, 11, 8, 9, 11, 11, 13, 10, 8, 8, 13, 14, 10, 11, 12, 11, 12, 13, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15, 8, 11, 10, 13, 13, 11, 11, 11, 9, 15}
    Dim wind_speed7() As Integer = {7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 7, 8, 6, 5, 9, 11, 7, 5, 5, 6, 8, 9, 4, 4, 7, 9, 7, 9, 9, 9, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 12, 4, 7, 7, 4, 5, 7, 7, 9, 6, 4, 4, 9, 10, 6, 7, 8, 7, 8, 9, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11, 4, 7, 6, 9, 9, 7, 7, 7, 5, 11}
    Dim wind_speed3() As Integer = {3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 3, 4, 2, 1, 5, 7, 3, 1, 1, 2, 4, 5, 0, 0, 3, 5, 3, 5, 5, 5, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 8, 0, 3, 3, 0, 1, 3, 3, 5, 2, 0, 0, 5, 6, 2, 3, 4, 3, 4, 5, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7, 0, 3, 2, 5, 5, 3, 3, 3, 1, 7}

    Dim wind_direction_right() As Short = {2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 5, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 4, 2, 2, 6, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2, 2}
    Dim wind_direction_down() As Short = {4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3, 4, 5, 4, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3}
    Dim wind_direction_left() As Short = {6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 7, 6, 6, 1, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 0, 6, 6, 2, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 3, 6, 5, 6, 6}
    Dim wind_direction_up() As Short = {1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 1, 0, 0, 0, 7, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0, 1, 0, 0, 7, 0, 0, 0, 1, 0, 0}


    Dim xx(1023) As Integer
    Dim yy(1023) As Integer
    Dim max_cell = 64
    Dim total_square = 16

    Dim max_wind As Integer = スタート.max_wind
    Dim time_sinario As Integer
    Dim time_sinario2 As Integer
    Dim start_zyuutai As Integer
    Dim start_okure As Integer

    Dim tate As Integer = 834
    Dim yoko As Integer = 1154
    Dim number_sikaku = 684

    '１マスの長さ
    Dim q As Integer = 7
    Dim end_count4 As Integer = 4
    Dim arraystate_a(1, tate - 1, yoko - 1)
    Dim maxID As Integer = 13184
    Dim Output_path As String


    Dim flag_sinario As Integer

    Dim 施設A_id As Integer
    Dim 施設B_id As Integer
    Dim 施設C_id As Integer
    Dim 施設D_id As Integer
    Dim 施設E_id As Integer
    Dim 施設F_id As Integer

    Dim flag_first As Boolean = 0

    Dim end_sinario As Integer



    'パラメータ---------------------------------------------------
    '火災の発生源
    Dim id0 As Integer





    Dim WindDirection(max_wind) As Integer
    Dim WindSpeed(max_wind) As Short
    Dim WindTime_game(max_wind) As Short



    'リソース 消防車、壁、壊す
    Dim resorce(48, 3) As Integer

    Dim TimeLug_syouka As Integer = 0
    Dim TimeLug_break() As Integer = {10, 15, 20}
    Dim TimeLug_wall As Integer = 5

    Dim TimeLug_break2() As Integer = {10, 15, 20}
    Dim TimeLug_wall2 As Integer = 5

    '衰退期までの時間
    Dim decline_mokuzou As Integer = 20
    Dim decline_bouka As Integer = 90
    Dim decline_taika As Integer = 110


    'パラメータ-------------------------------------------------

    'エピソード------------------------------------------------
    '①同時多発
    '同時多発で出火する建物のID
    Dim id_douzitahatu As Integer
    Dim id_douzitahatu2 As Integer
    '同時多発が起きる時間
    Dim time_douzitahatu As Integer
    Dim time_douzitahatu2 As Integer

    '②消防車（水が枯渇）
    '開始時間
    Dim start_kokatu As Integer = -999
    '終了時間
    Dim end_kokatu As Integer = -999

    '③壁＆壊す（作業員が不足）
    Dim start_kabekowasu As Integer = -999
    Dim end_kabekowasu As Integer = -999



    'エピソード------------------------------------------------


    'count宣言
    Dim count As Integer = 0
    Dim count4 As Integer = 0

    'count　１コマ＝何秒
    Dim interval As Integer = 100
    Dim interval2 As Integer = 1000



    '隣に燃え移る時間(風)無風⇒３コマ　強風⇒２コマ　
    Dim time_right() As Integer = {0, 0, 0}
    Dim time_left() As Integer = {0, 0, 0}
    Dim time_up() As Integer = {0, 0, 0}
    Dim time_down() As Integer = {0, 0, 0}

    Dim coefficient_right As Integer = 50
    Dim coefficient_left As Integer = 50
    Dim coefficient_up As Integer = 50
    Dim coefficient_down As Integer = 50





    Dim count_wind_now As Integer = 0
    Dim check_wind As Integer = 0

    Dim a As Integer = 1
    Dim d As Integer = 2
    Dim D1 As Integer
    Dim DD As Integer
    Dim DDD As Integer
    Dim v As Integer
    Dim kazakami0 As Integer
    Dim kazasimo0 As Integer
    Dim kazayoko0 As Integer
    Dim kazakami1 As Integer
    Dim kazasimo1 As Integer
    Dim kazayoko1 As Integer
    Dim kazakami2 As Integer
    Dim kazasimo2 As Integer
    Dim kazayoko2 As Integer


    Dim x As Integer
    Dim y As Integer
    Dim check_click As Integer = 0
    Dim i_fireengine As Integer
    Dim j_fireengine As Integer
    Dim wall(tate - 2, yoko - 2, 1) As Integer
    Dim coordinate_wall_tatebou(200000, 2) As Integer
    Dim coordinate_wall_yokobou(200000, 2) As Integer
    Dim i_wall As Integer
    Dim j_wall As Integer
    Dim i_wall_cal As Integer
    Dim j_wall_cal As Integer

    Dim record_wall(200, 9)
    Dim record_break(200, 5)
    Dim count_wall As Integer = 0
    Dim count_break As Integer = 0


    Dim FireSpreadTime_Right(max_wind, 2) As Integer
    Dim FireSpreadTime_Left(max_wind, 2) As Integer
    Dim FireSpreadTime_Up(max_wind, 2) As Integer
    Dim FireSpreadTime_Down(max_wind, 2) As Integer

    '現場のリソース
    Dim number_wall As Integer = 0
    Dim number_car As Integer = 0
    Dim number_break As Integer = 0

    '到着予定のリソース
    Dim number_wall_f As Integer
    Dim number_car_f As Integer
    Dim number_break_f As Integer

    'トータルのリソース
    Dim number_wall_t As Integer
    Dim number_car_t As Integer
    Dim number_break_t As Integer




    Dim count_resorce As Integer = 0

    Dim c_x = 230
    Dim c_y = 8
    Dim c_x_sq
    Dim c_y_sq

    Dim record_car(200, 7)
    Dim count_car As Integer = 0

    Dim time_putout As Integer = 3



    '図形の位置と大きさ
    Dim Array_position(number_sikaku * 16, 3) As Integer

    Dim Array_position_0() = {6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 6, 22, 22, 30, 2, 2, 6, 6, 12, 12, 30, 38, 38, 38, 46, 46, 64, 64, 56, 66, 74, 74, 74, 74, 84, 84, 84, 84, 90, 90, 90, 98, 104, 116, 116, 110, 110, 126, 132, 137, 122, 122, 132, 138, 154, 162, 172, 162, 172, 152, 158, 188, 204, 210, 204, 182, 192, 182, 192, 204, 210, 222, 228, 218, 228, 236, 246, 218, 226, 232, 232, 242, 254, 259, 264, 276, 282, 254, 260, 266, 276, 254, 2, 8, 2, 20, 28, 28, 33, 2, 2, 14, 38, 52, 52, 62, 38, 38, 46, 52, 62, 68, 62, 74, 80, 74, 94, 104, 104, 74, 80, 80, 88, 94, 110, 120, 120, 132, 140, 132, 140, 130, 136, 146, 152, 158, 146, 152, 158, 158, 162, 172, 146, 152, 160, 168, 182, 182, 192, 198, 208, 213, 182, 192, 182, 192, 198, 182, 194, 208, 218, 232, 232, 238, 224, 232, 232, 246, 246, 254, 260, 268, 268, 276, 282, 254, 260, 254, 260, 276, 282, 280, 2, 2, 2, 2, 12, 12, 12, 18, 24, 24, 18, 24, 38, 48, 54, 60, 60, 66, 38, 51, 58, 66, 38, 48, 64, 90, 80, 86, 92, 74, 86, 86, 92, 98, 98, 104, 110, 110, 115, 120, 126, 138, 138, 110, 110, 146, 152, 158, 166, 176, 146, 146, 154, 159, 164, 170, 182, 186, 202, 210, 210, 210, 182, 197, 210, 218, 238, 244, 218, 218, 230, 230, 236, 236, 244, 244, 258, 264, 254, 254, 264, 264, 272, 282, 272, 282, 2, 2, 12, 18, 12, 30, 12, 2, 12, 24, 38, 46, 54, 62, 38, 46, 54, 62, 70, 38, 46, 54, 62, 70, 74, 102, 74, 74, 88, 88, 102, 102, 116, 110, 110, 118, 124, 124, 132, 132, 132, 140, 140, 140, 146, 146, 146, 154, 152, 164, 164, 164, 178, 172, 174, 182, 182, 190, 198, 198, 206, 210, 210, 214, 218, 218, 218, 226, 226, 234, 226, 240, 240, 240, 248, 248, 248, 254, 260, 274, 272, 282, 282, 282, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 294, 310, 310, 318, 290, 290, 294, 294, 300, 300, 318, 326, 326, 326, 334, 334, 352, 352, 344, 354, 362, 362, 362, 362, 372, 372, 372, 372, 378, 378, 378, 386, 392, 404, 404, 398, 398, 414, 420, 425, 410, 410, 420, 426, 442, 450, 460, 450, 460, 440, 446, 476, 492, 498, 492, 470, 480, 470, 480, 492, 498, 510, 516, 506, 516, 524, 534, 506, 514, 520, 520, 530, 542, 547, 552, 564, 570, 542, 548, 554, 564, 542, 290, 296, 290, 308, 316, 316, 321, 290, 290, 302, 326, 340, 340, 350, 326, 326, 334, 340, 350, 356, 350, 362, 368, 362, 382, 392, 392, 362, 368, 368, 376, 382, 398, 408, 408, 420, 428, 420, 428, 418, 424, 434, 440, 446, 434, 440, 446, 446, 450, 460, 434, 440, 448, 456, 470, 470, 480, 486, 496, 501, 470, 480, 470, 480, 486, 470, 482, 496, 506, 520, 520, 526, 512, 520, 520, 534, 534, 542, 548, 556, 556, 564, 570, 542, 548, 542, 548, 564, 570, 568, 290, 290, 290, 290, 300, 300, 300, 306, 312, 312, 306, 312, 326, 336, 342, 348, 348, 354, 326, 339, 346, 354, 326, 336, 352, 378, 368, 374, 380, 362, 374, 374, 380, 386, 386, 392, 398, 398, 403, 408, 414, 426, 426, 398, 398, 434, 440, 446, 454, 464, 434, 434, 442, 447, 452, 458, 470, 474, 490, 498, 498, 498, 470, 485, 498, 506, 526, 532, 506, 506, 518, 518, 524, 524, 532, 532, 546, 552, 542, 542, 552, 552, 560, 570, 560, 570, 290, 290, 300, 306, 300, 318, 300, 290, 300, 312, 326, 334, 342, 350, 326, 334, 342, 350, 358, 326, 334, 342, 350, 358, 362, 390, 362, 362, 376, 376, 390, 390, 404, 398, 398, 406, 412, 412, 420, 420, 420, 428, 428, 428, 434, 434, 434, 442, 440, 452, 452, 452, 466, 460, 462, 470, 470, 478, 486, 486, 494, 498, 498, 502, 506, 506, 506, 514, 514, 522, 514, 528, 528, 528, 536, 536, 536, 542, 548, 562, 560, 570, 570, 570, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 582, 598, 598, 606, 578, 578, 582, 582, 588, 588, 606, 614, 614, 614, 622, 622, 640, 640, 632, 642, 650, 650, 650, 650, 660, 660, 660, 660, 666, 666, 666, 674, 680, 692, 692, 686, 686, 702, 708, 713, 698, 698, 708, 714, 730, 738, 748, 738, 748, 728, 734, 764, 780, 786, 780, 758, 768, 758, 768, 780, 786, 798, 804, 794, 804, 812, 822, 794, 802, 808, 808, 818, 830, 835, 840, 852, 858, 830, 836, 842, 852, 830, 578, 584, 578, 596, 604, 604, 609, 578, 578, 590, 614, 628, 628, 638, 614, 614, 622, 628, 638, 644, 638, 650, 656, 650, 670, 680, 680, 650, 656, 656, 664, 670, 686, 696, 696, 708, 716, 708, 716, 706, 712, 722, 728, 734, 722, 728, 734, 734, 738, 748, 722, 728, 736, 744, 758, 758, 768, 774, 784, 789, 758, 768, 758, 768, 774, 758, 770, 784, 794, 808, 808, 814, 800, 808, 808, 822, 822, 830, 836, 844, 844, 852, 858, 830, 836, 830, 836, 852, 858, 856, 578, 578, 578, 578, 588, 588, 588, 594, 600, 600, 594, 600, 614, 624, 630, 636, 636, 642, 614, 627, 634, 642, 614, 624, 640, 666, 656, 662, 668, 650, 662, 662, 668, 674, 674, 680, 686, 686, 691, 696, 702, 714, 714, 686, 686, 722, 728, 734, 742, 752, 722, 722, 730, 735, 740, 746, 758, 762, 778, 786, 786, 786, 758, 773, 786, 794, 814, 820, 794, 794, 806, 806, 812, 812, 820, 820, 834, 840, 830, 830, 840, 840, 848, 858, 848, 858, 578, 578, 588, 594, 588, 606, 588, 578, 588, 600, 614, 622, 630, 638, 614, 622, 630, 638, 646, 614, 622, 630, 638, 646, 650, 678, 650, 650, 664, 664, 678, 678, 692, 686, 686, 694, 700, 700, 708, 708, 708, 716, 716, 716, 722, 722, 722, 730, 728, 740, 740, 740, 754, 748, 750, 758, 758, 766, 774, 774, 782, 786, 786, 790, 794, 794, 794, 802, 802, 810, 802, 816, 816, 816, 824, 824, 824, 830, 836, 850, 848, 858, 858, 858, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 870, 886, 886, 894, 866, 866, 870, 870, 876, 876, 894, 902, 902, 902, 910, 910, 928, 928, 920, 930, 938, 938, 938, 938, 948, 948, 948, 948, 954, 954, 954, 962, 968, 980, 980, 974, 974, 990, 996, 1001, 986, 986, 996, 1002, 1018, 1026, 1036, 1026, 1036, 1016, 1022, 1052, 1068, 1074, 1068, 1046, 1056, 1046, 1056, 1068, 1074, 1086, 1092, 1082, 1092, 1100, 1110, 1082, 1090, 1096, 1096, 1106, 1118, 1123, 1128, 1140, 1146, 1118, 1124, 1130, 1140, 1118, 866, 872, 866, 884, 892, 892, 897, 866, 866, 878, 902, 916, 916, 926, 902, 902, 910, 916, 926, 932, 926, 938, 944, 938, 958, 968, 968, 938, 944, 944, 952, 958, 974, 984, 984, 996, 1004, 996, 1004, 994, 1000, 1010, 1016, 1022, 1010, 1016, 1022, 1022, 1026, 1036, 1010, 1016, 1024, 1032, 1046, 1046, 1056, 1062, 1072, 1077, 1046, 1056, 1046, 1056, 1062, 1046, 1058, 1072, 1082, 1096, 1096, 1102, 1088, 1096, 1096, 1110, 1110, 1118, 1124, 1132, 1132, 1140, 1146, 1118, 1124, 1118, 1124, 1140, 1146, 1144, 866, 866, 866, 866, 876, 876, 876, 882, 888, 888, 882, 888, 902, 912, 918, 924, 924, 930, 902, 915, 922, 930, 902, 912, 928, 954, 944, 950, 956, 938, 950, 950, 956, 962, 962, 968, 974, 974, 979, 984, 990, 1002, 1002, 974, 974, 1010, 1016, 1022, 1030, 1040, 1010, 1010, 1018, 1023, 1028, 1034, 1046, 1050, 1066, 1074, 1074, 1074, 1046, 1061, 1074, 1082, 1102, 1108, 1082, 1082, 1094, 1094, 1100, 1100, 1108, 1108, 1122, 1128, 1118, 1118, 1128, 1128, 1136, 1146, 1136, 1146, 866, 866, 876, 882, 876, 894, 876, 866, 876, 888, 902, 910, 918, 926, 902, 910, 918, 926, 934, 902, 910, 918, 926, 934, 938, 966, 938, 938, 952, 952, 966, 966, 980, 974, 974, 982, 988, 988, 996, 996, 996, 1004, 1004, 1004, 1010, 1010, 1010, 1018, 1016, 1028, 1028, 1028, 1042, 1036, 1038, 1046, 1046, 1054, 1062, 1062, 1070, 1074, 1074, 1078, 1082, 1082, 1082, 1090, 1090, 1098, 1090, 1104, 1104, 1104, 1112, 1112, 1112, 1118, 1124, 1138, 1136, 1146, 1146, 1146, 0}

    Dim Array_position_1() = {2, 2, 8, 2, 14, 20, 14, 20, 14, 20, 14, 6, 12, 18, 18, 23, 2, 8, 18, 18, 2, 10, 16, 22, 2, 8, 16, 22, 8, 16, 22, 2, 6, 2, 8, 12, 20, 2, 2, 2, 18, 23, 18, 18, 2, 2, 2, 10, 10, 16, 16, 2, 2, 2, 8, 18, 18, 23, 23, 14, 14, 2, 2, 12, 12, 12, 8, 18, 18, 18, 23, 18, 2, 2, 2, 2, 2, 16, 16, 16, 16, 24, 28, 28, 34, 28, 28, 34, 34, 42, 48, 48, 28, 28, 34, 28, 40, 48, 40, 38, 38, 38, 48, 28, 28, 40, 28, 28, 36, 46, 46, 50, 46, 46, 34, 34, 44, 28, 28, 34, 34, 44, 44, 28, 28, 28, 34, 34, 34, 38, 38, 43, 48, 48, 48, 48, 28, 32, 28, 28, 28, 28, 36, 36, 42, 42, 42, 48, 48, 48, 28, 28, 34, 34, 42, 42, 48, 28, 46, 28, 28, 28, 33, 28, 28, 38, 38, 44, 44, 38, 38, 48, 54, 60, 68, 74, 54, 68, 74, 54, 54, 60, 74, 74, 54, 54, 54, 54, 59, 59, 64, 64, 64, 64, 74, 74, 74, 54, 60, 60, 60, 74, 66, 72, 66, 66, 72, 72, 54, 60, 60, 54, 54, 54, 60, 66, 72, 54, 54, 54, 54, 54, 64, 70, 64, 70, 64, 64, 54, 60, 54, 54, 62, 68, 72, 72, 72, 58, 54, 54, 66, 74, 66, 74, 66, 74, 68, 74, 54, 54, 64, 70, 64, 70, 64, 58, 70, 70, 80, 86, 80, 80, 86, 80, 94, 102, 102, 102, 80, 80, 80, 80, 88, 88, 88, 88, 80, 96, 96, 96, 96, 96, 80, 80, 88, 96, 88, 96, 88, 98, 80, 92, 98, 98, 92, 98, 80, 88, 96, 80, 90, 98, 80, 88, 96, 80, 96, 86, 94, 100, 80, 90, 100, 80, 96, 96, 86, 96, 96, 80, 88, 96, 80, 88, 96, 80, 88, 80, 102, 80, 88, 96, 80, 88, 96, 90, 86, 80, 100, 80, 88, 97, 106, 106, 112, 106, 118, 124, 118, 124, 118, 124, 118, 110, 116, 122, 122, 127, 106, 112, 122, 122, 106, 114, 120, 126, 106, 112, 120, 126, 112, 120, 126, 106, 110, 106, 112, 116, 124, 106, 106, 106, 122, 127, 122, 122, 106, 106, 106, 114, 114, 120, 120, 106, 106, 106, 112, 122, 122, 127, 127, 118, 118, 106, 106, 116, 116, 116, 112, 122, 122, 122, 127, 122, 106, 106, 106, 106, 106, 120, 120, 120, 120, 128, 132, 132, 138, 132, 132, 138, 138, 146, 152, 152, 132, 132, 138, 132, 144, 152, 144, 142, 142, 142, 152, 132, 132, 144, 132, 132, 140, 150, 150, 154, 150, 150, 138, 138, 148, 132, 132, 138, 138, 148, 148, 132, 132, 132, 138, 138, 138, 142, 142, 147, 152, 152, 152, 152, 132, 136, 132, 132, 132, 132, 140, 140, 146, 146, 146, 152, 152, 152, 132, 132, 138, 138, 146, 146, 152, 132, 150, 132, 132, 132, 137, 132, 132, 142, 142, 148, 148, 142, 142, 152, 158, 164, 172, 178, 158, 172, 178, 158, 158, 164, 178, 178, 158, 158, 158, 158, 163, 163, 168, 168, 168, 168, 178, 178, 178, 158, 164, 164, 164, 178, 170, 176, 170, 170, 176, 176, 158, 164, 164, 158, 158, 158, 164, 170, 176, 158, 158, 158, 158, 158, 168, 174, 168, 174, 168, 168, 158, 164, 158, 158, 166, 172, 176, 176, 176, 162, 158, 158, 170, 178, 170, 178, 170, 178, 172, 178, 158, 158, 168, 174, 168, 174, 168, 162, 174, 174, 184, 190, 184, 184, 190, 184, 198, 206, 206, 206, 184, 184, 184, 184, 192, 192, 192, 192, 184, 200, 200, 200, 200, 200, 184, 184, 192, 200, 192, 200, 192, 202, 184, 196, 202, 202, 196, 202, 184, 192, 200, 184, 194, 202, 184, 192, 200, 184, 200, 190, 198, 204, 184, 194, 204, 184, 200, 200, 190, 200, 200, 184, 192, 200, 184, 192, 200, 184, 192, 184, 206, 184, 192, 200, 184, 192, 200, 194, 190, 184, 204, 184, 192, 201, 2, 2, 8, 2, 14, 20, 14, 20, 14, 20, 14, 6, 12, 18, 18, 23, 2, 8, 18, 18, 2, 10, 16, 22, 2, 8, 16, 22, 8, 16, 22, 2, 6, 2, 8, 12, 20, 2, 2, 2, 18, 23, 18, 18, 2, 2, 2, 10, 10, 16, 16, 2, 2, 2, 8, 18, 18, 23, 23, 14, 14, 2, 2, 12, 12, 12, 8, 18, 18, 18, 23, 18, 2, 2, 2, 2, 2, 16, 16, 16, 16, 24, 28, 28, 34, 28, 28, 34, 34, 42, 48, 48, 28, 28, 34, 28, 40, 48, 40, 38, 38, 38, 48, 28, 28, 40, 28, 28, 36, 46, 46, 50, 46, 46, 34, 34, 44, 28, 28, 34, 34, 44, 44, 28, 28, 28, 34, 34, 34, 38, 38, 43, 48, 48, 48, 48, 28, 32, 28, 28, 28, 28, 36, 36, 42, 42, 42, 48, 48, 48, 28, 28, 34, 34, 42, 42, 48, 28, 46, 28, 28, 28, 33, 28, 28, 38, 38, 44, 44, 38, 38, 48, 54, 60, 68, 74, 54, 68, 74, 54, 54, 60, 74, 74, 54, 54, 54, 54, 59, 59, 64, 64, 64, 64, 74, 74, 74, 54, 60, 60, 60, 74, 66, 72, 66, 66, 72, 72, 54, 60, 60, 54, 54, 54, 60, 66, 72, 54, 54, 54, 54, 54, 64, 70, 64, 70, 64, 64, 54, 60, 54, 54, 62, 68, 72, 72, 72, 58, 54, 54, 66, 74, 66, 74, 66, 74, 68, 74, 54, 54, 64, 70, 64, 70, 64, 58, 70, 70, 80, 86, 80, 80, 86, 80, 94, 102, 102, 102, 80, 80, 80, 80, 88, 88, 88, 88, 80, 96, 96, 96, 96, 96, 80, 80, 88, 96, 88, 96, 88, 98, 80, 92, 98, 98, 92, 98, 80, 88, 96, 80, 90, 98, 80, 88, 96, 80, 96, 86, 94, 100, 80, 90, 100, 80, 96, 96, 86, 96, 96, 80, 88, 96, 80, 88, 96, 80, 88, 80, 102, 80, 88, 96, 80, 88, 96, 90, 86, 80, 100, 80, 88, 97, 106, 106, 112, 106, 118, 124, 118, 124, 118, 124, 118, 110, 116, 122, 122, 127, 106, 112, 122, 122, 106, 114, 120, 126, 106, 112, 120, 126, 112, 120, 126, 106, 110, 106, 112, 116, 124, 106, 106, 106, 122, 127, 122, 122, 106, 106, 106, 114, 114, 120, 120, 106, 106, 106, 112, 122, 122, 127, 127, 118, 118, 106, 106, 116, 116, 116, 112, 122, 122, 122, 127, 122, 106, 106, 106, 106, 106, 120, 120, 120, 120, 128, 132, 132, 138, 132, 132, 138, 138, 146, 152, 152, 132, 132, 138, 132, 144, 152, 144, 142, 142, 142, 152, 132, 132, 144, 132, 132, 140, 150, 150, 154, 150, 150, 138, 138, 148, 132, 132, 138, 138, 148, 148, 132, 132, 132, 138, 138, 138, 142, 142, 147, 152, 152, 152, 152, 132, 136, 132, 132, 132, 132, 140, 140, 146, 146, 146, 152, 152, 152, 132, 132, 138, 138, 146, 146, 152, 132, 150, 132, 132, 132, 137, 132, 132, 142, 142, 148, 148, 142, 142, 152, 158, 164, 172, 178, 158, 172, 178, 158, 158, 164, 178, 178, 158, 158, 158, 158, 163, 163, 168, 168, 168, 168, 178, 178, 178, 158, 164, 164, 164, 178, 170, 176, 170, 170, 176, 176, 158, 164, 164, 158, 158, 158, 164, 170, 176, 158, 158, 158, 158, 158, 168, 174, 168, 174, 168, 168, 158, 164, 158, 158, 166, 172, 176, 176, 176, 162, 158, 158, 170, 178, 170, 178, 170, 178, 172, 178, 158, 158, 168, 174, 168, 174, 168, 162, 174, 174, 184, 190, 184, 184, 190, 184, 198, 206, 206, 206, 184, 184, 184, 184, 192, 192, 192, 192, 184, 200, 200, 200, 200, 200, 184, 184, 192, 200, 192, 200, 192, 202, 184, 196, 202, 202, 196, 202, 184, 192, 200, 184, 194, 202, 184, 192, 200, 184, 200, 190, 198, 204, 184, 194, 204, 184, 200, 200, 190, 200, 200, 184, 192, 200, 184, 192, 200, 184, 192, 184, 206, 184, 192, 200, 184, 192, 200, 194, 190, 184, 204, 184, 192, 201, 2, 2, 8, 2, 14, 20, 14, 20, 14, 20, 14, 6, 12, 18, 18, 23, 2, 8, 18, 18, 2, 10, 16, 22, 2, 8, 16, 22, 8, 16, 22, 2, 6, 2, 8, 12, 20, 2, 2, 2, 18, 23, 18, 18, 2, 2, 2, 10, 10, 16, 16, 2, 2, 2, 8, 18, 18, 23, 23, 14, 14, 2, 2, 12, 12, 12, 8, 18, 18, 18, 23, 18, 2, 2, 2, 2, 2, 16, 16, 16, 16, 24, 28, 28, 34, 28, 28, 34, 34, 42, 48, 48, 28, 28, 34, 28, 40, 48, 40, 38, 38, 38, 48, 28, 28, 40, 28, 28, 36, 46, 46, 50, 46, 46, 34, 34, 44, 28, 28, 34, 34, 44, 44, 28, 28, 28, 34, 34, 34, 38, 38, 43, 48, 48, 48, 48, 28, 32, 28, 28, 28, 28, 36, 36, 42, 42, 42, 48, 48, 48, 28, 28, 34, 34, 42, 42, 48, 28, 46, 28, 28, 28, 33, 28, 28, 38, 38, 44, 44, 38, 38, 48, 54, 60, 68, 74, 54, 68, 74, 54, 54, 60, 74, 74, 54, 54, 54, 54, 59, 59, 64, 64, 64, 64, 74, 74, 74, 54, 60, 60, 60, 74, 66, 72, 66, 66, 72, 72, 54, 60, 60, 54, 54, 54, 60, 66, 72, 54, 54, 54, 54, 54, 64, 70, 64, 70, 64, 64, 54, 60, 54, 54, 62, 68, 72, 72, 72, 58, 54, 54, 66, 74, 66, 74, 66, 74, 68, 74, 54, 54, 64, 70, 64, 70, 64, 58, 70, 70, 80, 86, 80, 80, 86, 80, 94, 102, 102, 102, 80, 80, 80, 80, 88, 88, 88, 88, 80, 96, 96, 96, 96, 96, 80, 80, 88, 96, 88, 96, 88, 98, 80, 92, 98, 98, 92, 98, 80, 88, 96, 80, 90, 98, 80, 88, 96, 80, 96, 86, 94, 100, 80, 90, 100, 80, 96, 96, 86, 96, 96, 80, 88, 96, 80, 88, 96, 80, 88, 80, 102, 80, 88, 96, 80, 88, 96, 90, 86, 80, 100, 80, 88, 97, 106, 106, 112, 106, 118, 124, 118, 124, 118, 124, 118, 110, 116, 122, 122, 127, 106, 112, 122, 122, 106, 114, 120, 126, 106, 112, 120, 126, 112, 120, 126, 106, 110, 106, 112, 116, 124, 106, 106, 106, 122, 127, 122, 122, 106, 106, 106, 114, 114, 120, 120, 106, 106, 106, 112, 122, 122, 127, 127, 118, 118, 106, 106, 116, 116, 116, 112, 122, 122, 122, 127, 122, 106, 106, 106, 106, 106, 120, 120, 120, 120, 128, 132, 132, 138, 132, 132, 138, 138, 146, 152, 152, 132, 132, 138, 132, 144, 152, 144, 142, 142, 142, 152, 132, 132, 144, 132, 132, 140, 150, 150, 154, 150, 150, 138, 138, 148, 132, 132, 138, 138, 148, 148, 132, 132, 132, 138, 138, 138, 142, 142, 147, 152, 152, 152, 152, 132, 136, 132, 132, 132, 132, 140, 140, 146, 146, 146, 152, 152, 152, 132, 132, 138, 138, 146, 146, 152, 132, 150, 132, 132, 132, 137, 132, 132, 142, 142, 148, 148, 142, 142, 152, 158, 164, 172, 178, 158, 172, 178, 158, 158, 164, 178, 178, 158, 158, 158, 158, 163, 163, 168, 168, 168, 168, 178, 178, 178, 158, 164, 164, 164, 178, 170, 176, 170, 170, 176, 176, 158, 164, 164, 158, 158, 158, 164, 170, 176, 158, 158, 158, 158, 158, 168, 174, 168, 174, 168, 168, 158, 164, 158, 158, 166, 172, 176, 176, 176, 162, 158, 158, 170, 178, 170, 178, 170, 178, 172, 178, 158, 158, 168, 174, 168, 174, 168, 162, 174, 174, 184, 190, 184, 184, 190, 184, 198, 206, 206, 206, 184, 184, 184, 184, 192, 192, 192, 192, 184, 200, 200, 200, 200, 200, 184, 184, 192, 200, 192, 200, 192, 202, 184, 196, 202, 202, 196, 202, 184, 192, 200, 184, 194, 202, 184, 192, 200, 184, 200, 190, 198, 204, 184, 194, 204, 184, 200, 200, 190, 200, 200, 184, 192, 200, 184, 192, 200, 184, 192, 184, 206, 184, 192, 200, 184, 192, 200, 194, 190, 184, 204, 184, 192, 201, 2, 2, 8, 2, 14, 20, 14, 20, 14, 20, 14, 6, 12, 18, 18, 23, 2, 8, 18, 18, 2, 10, 16, 22, 2, 8, 16, 22, 8, 16, 22, 2, 6, 2, 8, 12, 20, 2, 2, 2, 18, 23, 18, 18, 2, 2, 2, 10, 10, 16, 16, 2, 2, 2, 8, 18, 18, 23, 23, 14, 14, 2, 2, 12, 12, 12, 8, 18, 18, 18, 23, 18, 2, 2, 2, 2, 2, 16, 16, 16, 16, 24, 28, 28, 34, 28, 28, 34, 34, 42, 48, 48, 28, 28, 34, 28, 40, 48, 40, 38, 38, 38, 48, 28, 28, 40, 28, 28, 36, 46, 46, 50, 46, 46, 34, 34, 44, 28, 28, 34, 34, 44, 44, 28, 28, 28, 34, 34, 34, 38, 38, 43, 48, 48, 48, 48, 28, 32, 28, 28, 28, 28, 36, 36, 42, 42, 42, 48, 48, 48, 28, 28, 34, 34, 42, 42, 48, 28, 46, 28, 28, 28, 33, 28, 28, 38, 38, 44, 44, 38, 38, 48, 54, 60, 68, 74, 54, 68, 74, 54, 54, 60, 74, 74, 54, 54, 54, 54, 59, 59, 64, 64, 64, 64, 74, 74, 74, 54, 60, 60, 60, 74, 66, 72, 66, 66, 72, 72, 54, 60, 60, 54, 54, 54, 60, 66, 72, 54, 54, 54, 54, 54, 64, 70, 64, 70, 64, 64, 54, 60, 54, 54, 62, 68, 72, 72, 72, 58, 54, 54, 66, 74, 66, 74, 66, 74, 68, 74, 54, 54, 64, 70, 64, 70, 64, 58, 70, 70, 80, 86, 80, 80, 86, 80, 94, 102, 102, 102, 80, 80, 80, 80, 88, 88, 88, 88, 80, 96, 96, 96, 96, 96, 80, 80, 88, 96, 88, 96, 88, 98, 80, 92, 98, 98, 92, 98, 80, 88, 96, 80, 90, 98, 80, 88, 96, 80, 96, 86, 94, 100, 80, 90, 100, 80, 96, 96, 86, 96, 96, 80, 88, 96, 80, 88, 96, 80, 88, 80, 102, 80, 88, 96, 80, 88, 96, 90, 86, 80, 100, 80, 88, 97, 106, 106, 112, 106, 118, 124, 118, 124, 118, 124, 118, 110, 116, 122, 122, 127, 106, 112, 122, 122, 106, 114, 120, 126, 106, 112, 120, 126, 112, 120, 126, 106, 110, 106, 112, 116, 124, 106, 106, 106, 122, 127, 122, 122, 106, 106, 106, 114, 114, 120, 120, 106, 106, 106, 112, 122, 122, 127, 127, 118, 118, 106, 106, 116, 116, 116, 112, 122, 122, 122, 127, 122, 106, 106, 106, 106, 106, 120, 120, 120, 120, 128, 132, 132, 138, 132, 132, 138, 138, 146, 152, 152, 132, 132, 138, 132, 144, 152, 144, 142, 142, 142, 152, 132, 132, 144, 132, 132, 140, 150, 150, 154, 150, 150, 138, 138, 148, 132, 132, 138, 138, 148, 148, 132, 132, 132, 138, 138, 138, 142, 142, 147, 152, 152, 152, 152, 132, 136, 132, 132, 132, 132, 140, 140, 146, 146, 146, 152, 152, 152, 132, 132, 138, 138, 146, 146, 152, 132, 150, 132, 132, 132, 137, 132, 132, 142, 142, 148, 148, 142, 142, 152, 158, 164, 172, 178, 158, 172, 178, 158, 158, 164, 178, 178, 158, 158, 158, 158, 163, 163, 168, 168, 168, 168, 178, 178, 178, 158, 164, 164, 164, 178, 170, 176, 170, 170, 176, 176, 158, 164, 164, 158, 158, 158, 164, 170, 176, 158, 158, 158, 158, 158, 168, 174, 168, 174, 168, 168, 158, 164, 158, 158, 166, 172, 176, 176, 176, 162, 158, 158, 170, 178, 170, 178, 170, 178, 172, 178, 158, 158, 168, 174, 168, 174, 168, 162, 174, 174, 184, 190, 184, 184, 190, 184, 198, 206, 206, 206, 184, 184, 184, 184, 192, 192, 192, 192, 184, 200, 200, 200, 200, 200, 184, 184, 192, 200, 192, 200, 192, 202, 184, 196, 202, 202, 196, 202, 184, 192, 200, 184, 194, 202, 184, 192, 200, 184, 200, 190, 198, 204, 184, 194, 204, 184, 200, 200, 190, 200, 200, 184, 192, 200, 184, 192, 200, 184, 192, 184, 206, 184, 192, 200, 184, 192, 200, 194, 190, 184, 204, 184, 192, 201, 210, 210, 216, 210, 222, 228, 222, 228, 222, 228, 222, 214, 220, 226, 226, 231, 210, 216, 226, 226, 210, 218, 224, 230, 210, 216, 224, 230, 216, 224, 230, 210, 214, 210, 216, 220, 228, 210, 210, 210, 226, 231, 226, 226, 210, 210, 210, 218, 218, 224, 224, 210, 210, 210, 216, 226, 226, 231, 231, 222, 222, 210, 210, 220, 220, 220, 216, 226, 226, 226, 231, 226, 210, 210, 210, 210, 210, 224, 224, 224, 224, 232, 236, 236, 242, 236, 236, 242, 242, 250, 256, 256, 236, 236, 242, 236, 248, 256, 248, 246, 246, 246, 256, 236, 236, 248, 236, 236, 244, 254, 254, 258, 254, 254, 242, 242, 252, 236, 236, 242, 242, 252, 252, 236, 236, 236, 242, 242, 242, 246, 246, 251, 256, 256, 256, 256, 236, 240, 236, 236, 236, 236, 244, 244, 250, 250, 250, 256, 256, 256, 236, 236, 242, 242, 250, 250, 256, 236, 254, 236, 236, 236, 241, 236, 236, 246, 246, 252, 252, 246, 246, 256, 262, 268, 276, 282, 262, 276, 282, 262, 262, 268, 282, 282, 262, 262, 262, 262, 267, 267, 272, 272, 272, 272, 282, 282, 282, 262, 268, 268, 268, 282, 274, 280, 274, 274, 280, 280, 262, 268, 268, 262, 262, 262, 268, 274, 280, 262, 262, 262, 262, 262, 272, 278, 272, 278, 272, 272, 262, 268, 262, 262, 270, 276, 280, 280, 280, 266, 262, 262, 274, 282, 274, 282, 274, 282, 276, 282, 262, 262, 272, 278, 272, 278, 272, 266, 278, 278, 288, 294, 288, 288, 294, 288, 302, 310, 310, 310, 288, 288, 288, 288, 296, 296, 296, 296, 288, 304, 304, 304, 304, 304, 288, 288, 296, 304, 296, 304, 296, 306, 288, 300, 306, 306, 300, 306, 288, 296, 304, 288, 298, 306, 288, 296, 304, 288, 304, 294, 302, 308, 288, 298, 308, 288, 304, 304, 294, 304, 304, 288, 296, 304, 288, 296, 304, 288, 296, 288, 310, 288, 296, 304, 288, 296, 304, 298, 294, 288, 308, 288, 296, 305, 314, 314, 320, 314, 326, 332, 326, 332, 326, 332, 326, 318, 324, 330, 330, 335, 314, 320, 330, 330, 314, 322, 328, 334, 314, 320, 328, 334, 320, 328, 334, 314, 318, 314, 320, 324, 332, 314, 314, 314, 330, 335, 330, 330, 314, 314, 314, 322, 322, 328, 328, 314, 314, 314, 320, 330, 330, 335, 335, 326, 326, 314, 314, 324, 324, 324, 320, 330, 330, 330, 335, 330, 314, 314, 314, 314, 314, 328, 328, 328, 328, 336, 340, 340, 346, 340, 340, 346, 346, 354, 360, 360, 340, 340, 346, 340, 352, 360, 352, 350, 350, 350, 360, 340, 340, 352, 340, 340, 348, 358, 358, 362, 358, 358, 346, 346, 356, 340, 340, 346, 346, 356, 356, 340, 340, 340, 346, 346, 346, 350, 350, 355, 360, 360, 360, 360, 340, 344, 340, 340, 340, 340, 348, 348, 354, 354, 354, 360, 360, 360, 340, 340, 346, 346, 354, 354, 360, 340, 358, 340, 340, 340, 345, 340, 340, 350, 350, 356, 356, 350, 350, 360, 366, 372, 380, 386, 366, 380, 386, 366, 366, 372, 386, 386, 366, 366, 366, 366, 371, 371, 376, 376, 376, 376, 386, 386, 386, 366, 372, 372, 372, 386, 378, 384, 378, 378, 384, 384, 366, 372, 372, 366, 366, 366, 372, 378, 384, 366, 366, 366, 366, 366, 376, 382, 376, 382, 376, 376, 366, 372, 366, 366, 374, 380, 384, 384, 384, 370, 366, 366, 378, 386, 378, 386, 378, 386, 380, 386, 366, 366, 376, 382, 376, 382, 376, 370, 382, 382, 392, 398, 392, 392, 398, 392, 406, 414, 414, 414, 392, 392, 392, 392, 400, 400, 400, 400, 392, 408, 408, 408, 408, 408, 392, 392, 400, 408, 400, 408, 400, 410, 392, 404, 410, 410, 404, 410, 392, 400, 408, 392, 402, 410, 392, 400, 408, 392, 408, 398, 406, 412, 392, 402, 412, 392, 408, 408, 398, 408, 408, 392, 400, 408, 392, 400, 408, 392, 400, 392, 414, 392, 400, 408, 392, 400, 408, 402, 398, 392, 412, 392, 400, 409, 210, 210, 216, 210, 222, 228, 222, 228, 222, 228, 222, 214, 220, 226, 226, 231, 210, 216, 226, 226, 210, 218, 224, 230, 210, 216, 224, 230, 216, 224, 230, 210, 214, 210, 216, 220, 228, 210, 210, 210, 226, 231, 226, 226, 210, 210, 210, 218, 218, 224, 224, 210, 210, 210, 216, 226, 226, 231, 231, 222, 222, 210, 210, 220, 220, 220, 216, 226, 226, 226, 231, 226, 210, 210, 210, 210, 210, 224, 224, 224, 224, 232, 236, 236, 242, 236, 236, 242, 242, 250, 256, 256, 236, 236, 242, 236, 248, 256, 248, 246, 246, 246, 256, 236, 236, 248, 236, 236, 244, 254, 254, 258, 254, 254, 242, 242, 252, 236, 236, 242, 242, 252, 252, 236, 236, 236, 242, 242, 242, 246, 246, 251, 256, 256, 256, 256, 236, 240, 236, 236, 236, 236, 244, 244, 250, 250, 250, 256, 256, 256, 236, 236, 242, 242, 250, 250, 256, 236, 254, 236, 236, 236, 241, 236, 236, 246, 246, 252, 252, 246, 246, 256, 262, 268, 276, 282, 262, 276, 282, 262, 262, 268, 282, 282, 262, 262, 262, 262, 267, 267, 272, 272, 272, 272, 282, 282, 282, 262, 268, 268, 268, 282, 274, 280, 274, 274, 280, 280, 262, 268, 268, 262, 262, 262, 268, 274, 280, 262, 262, 262, 262, 262, 272, 278, 272, 278, 272, 272, 262, 268, 262, 262, 270, 276, 280, 280, 280, 266, 262, 262, 274, 282, 274, 282, 274, 282, 276, 282, 262, 262, 272, 278, 272, 278, 272, 266, 278, 278, 288, 294, 288, 288, 294, 288, 302, 310, 310, 310, 288, 288, 288, 288, 296, 296, 296, 296, 288, 304, 304, 304, 304, 304, 288, 288, 296, 304, 296, 304, 296, 306, 288, 300, 306, 306, 300, 306, 288, 296, 304, 288, 298, 306, 288, 296, 304, 288, 304, 294, 302, 308, 288, 298, 308, 288, 304, 304, 294, 304, 304, 288, 296, 304, 288, 296, 304, 288, 296, 288, 310, 288, 296, 304, 288, 296, 304, 298, 294, 288, 308, 288, 296, 305, 314, 314, 320, 314, 326, 332, 326, 332, 326, 332, 326, 318, 324, 330, 330, 335, 314, 320, 330, 330, 314, 322, 328, 334, 314, 320, 328, 334, 320, 328, 334, 314, 318, 314, 320, 324, 332, 314, 314, 314, 330, 335, 330, 330, 314, 314, 314, 322, 322, 328, 328, 314, 314, 314, 320, 330, 330, 335, 335, 326, 326, 314, 314, 324, 324, 324, 320, 330, 330, 330, 335, 330, 314, 314, 314, 314, 314, 328, 328, 328, 328, 336, 340, 340, 346, 340, 340, 346, 346, 354, 360, 360, 340, 340, 346, 340, 352, 360, 352, 350, 350, 350, 360, 340, 340, 352, 340, 340, 348, 358, 358, 362, 358, 358, 346, 346, 356, 340, 340, 346, 346, 356, 356, 340, 340, 340, 346, 346, 346, 350, 350, 355, 360, 360, 360, 360, 340, 344, 340, 340, 340, 340, 348, 348, 354, 354, 354, 360, 360, 360, 340, 340, 346, 346, 354, 354, 360, 340, 358, 340, 340, 340, 345, 340, 340, 350, 350, 356, 356, 350, 350, 360, 366, 372, 380, 386, 366, 380, 386, 366, 366, 372, 386, 386, 366, 366, 366, 366, 371, 371, 376, 376, 376, 376, 386, 386, 386, 366, 372, 372, 372, 386, 378, 384, 378, 378, 384, 384, 366, 372, 372, 366, 366, 366, 372, 378, 384, 366, 366, 366, 366, 366, 376, 382, 376, 382, 376, 376, 366, 372, 366, 366, 374, 380, 384, 384, 384, 370, 366, 366, 378, 386, 378, 386, 378, 386, 380, 386, 366, 366, 376, 382, 376, 382, 376, 370, 382, 382, 392, 398, 392, 392, 398, 392, 406, 414, 414, 414, 392, 392, 392, 392, 400, 400, 400, 400, 392, 408, 408, 408, 408, 408, 392, 392, 400, 408, 400, 408, 400, 410, 392, 404, 410, 410, 404, 410, 392, 400, 408, 392, 402, 410, 392, 400, 408, 392, 408, 398, 406, 412, 392, 402, 412, 392, 408, 408, 398, 408, 408, 392, 400, 408, 392, 400, 408, 392, 400, 392, 414, 392, 400, 408, 392, 400, 408, 402, 398, 392, 412, 392, 400, 409, 210, 210, 216, 210, 222, 228, 222, 228, 222, 228, 222, 214, 220, 226, 226, 231, 210, 216, 226, 226, 210, 218, 224, 230, 210, 216, 224, 230, 216, 224, 230, 210, 214, 210, 216, 220, 228, 210, 210, 210, 226, 231, 226, 226, 210, 210, 210, 218, 218, 224, 224, 210, 210, 210, 216, 226, 226, 231, 231, 222, 222, 210, 210, 220, 220, 220, 216, 226, 226, 226, 231, 226, 210, 210, 210, 210, 210, 224, 224, 224, 224, 232, 236, 236, 242, 236, 236, 242, 242, 250, 256, 256, 236, 236, 242, 236, 248, 256, 248, 246, 246, 246, 256, 236, 236, 248, 236, 236, 244, 254, 254, 258, 254, 254, 242, 242, 252, 236, 236, 242, 242, 252, 252, 236, 236, 236, 242, 242, 242, 246, 246, 251, 256, 256, 256, 256, 236, 240, 236, 236, 236, 236, 244, 244, 250, 250, 250, 256, 256, 256, 236, 236, 242, 242, 250, 250, 256, 236, 254, 236, 236, 236, 241, 236, 236, 246, 246, 252, 252, 246, 246, 256, 262, 268, 276, 282, 262, 276, 282, 262, 262, 268, 282, 282, 262, 262, 262, 262, 267, 267, 272, 272, 272, 272, 282, 282, 282, 262, 268, 268, 268, 282, 274, 280, 274, 274, 280, 280, 262, 268, 268, 262, 262, 262, 268, 274, 280, 262, 262, 262, 262, 262, 272, 278, 272, 278, 272, 272, 262, 268, 262, 262, 270, 276, 280, 280, 280, 266, 262, 262, 274, 282, 274, 282, 274, 282, 276, 282, 262, 262, 272, 278, 272, 278, 272, 266, 278, 278, 288, 294, 288, 288, 294, 288, 302, 310, 310, 310, 288, 288, 288, 288, 296, 296, 296, 296, 288, 304, 304, 304, 304, 304, 288, 288, 296, 304, 296, 304, 296, 306, 288, 300, 306, 306, 300, 306, 288, 296, 304, 288, 298, 306, 288, 296, 304, 288, 304, 294, 302, 308, 288, 298, 308, 288, 304, 304, 294, 304, 304, 288, 296, 304, 288, 296, 304, 288, 296, 288, 310, 288, 296, 304, 288, 296, 304, 298, 294, 288, 308, 288, 296, 305, 314, 314, 320, 314, 326, 332, 326, 332, 326, 332, 326, 318, 324, 330, 330, 335, 314, 320, 330, 330, 314, 322, 328, 334, 314, 320, 328, 334, 320, 328, 334, 314, 318, 314, 320, 324, 332, 314, 314, 314, 330, 335, 330, 330, 314, 314, 314, 322, 322, 328, 328, 314, 314, 314, 320, 330, 330, 335, 335, 326, 326, 314, 314, 324, 324, 324, 320, 330, 330, 330, 335, 330, 314, 314, 314, 314, 314, 328, 328, 328, 328, 336, 340, 340, 346, 340, 340, 346, 346, 354, 360, 360, 340, 340, 346, 340, 352, 360, 352, 350, 350, 350, 360, 340, 340, 352, 340, 340, 348, 358, 358, 362, 358, 358, 346, 346, 356, 340, 340, 346, 346, 356, 356, 340, 340, 340, 346, 346, 346, 350, 350, 355, 360, 360, 360, 360, 340, 344, 340, 340, 340, 340, 348, 348, 354, 354, 354, 360, 360, 360, 340, 340, 346, 346, 354, 354, 360, 340, 358, 340, 340, 340, 345, 340, 340, 350, 350, 356, 356, 350, 350, 360, 366, 372, 380, 386, 366, 380, 386, 366, 366, 372, 386, 386, 366, 366, 366, 366, 371, 371, 376, 376, 376, 376, 386, 386, 386, 366, 372, 372, 372, 386, 378, 384, 378, 378, 384, 384, 366, 372, 372, 366, 366, 366, 372, 378, 384, 366, 366, 366, 366, 366, 376, 382, 376, 382, 376, 376, 366, 372, 366, 366, 374, 380, 384, 384, 384, 370, 366, 366, 378, 386, 378, 386, 378, 386, 380, 386, 366, 366, 376, 382, 376, 382, 376, 370, 382, 382, 392, 398, 392, 392, 398, 392, 406, 414, 414, 414, 392, 392, 392, 392, 400, 400, 400, 400, 392, 408, 408, 408, 408, 408, 392, 392, 400, 408, 400, 408, 400, 410, 392, 404, 410, 410, 404, 410, 392, 400, 408, 392, 402, 410, 392, 400, 408, 392, 408, 398, 406, 412, 392, 402, 412, 392, 408, 408, 398, 408, 408, 392, 400, 408, 392, 400, 408, 392, 400, 392, 414, 392, 400, 408, 392, 400, 408, 402, 398, 392, 412, 392, 400, 409, 210, 210, 216, 210, 222, 228, 222, 228, 222, 228, 222, 214, 220, 226, 226, 231, 210, 216, 226, 226, 210, 218, 224, 230, 210, 216, 224, 230, 216, 224, 230, 210, 214, 210, 216, 220, 228, 210, 210, 210, 226, 231, 226, 226, 210, 210, 210, 218, 218, 224, 224, 210, 210, 210, 216, 226, 226, 231, 231, 222, 222, 210, 210, 220, 220, 220, 216, 226, 226, 226, 231, 226, 210, 210, 210, 210, 210, 224, 224, 224, 224, 232, 236, 236, 242, 236, 236, 242, 242, 250, 256, 256, 236, 236, 242, 236, 248, 256, 248, 246, 246, 246, 256, 236, 236, 248, 236, 236, 244, 254, 254, 258, 254, 254, 242, 242, 252, 236, 236, 242, 242, 252, 252, 236, 236, 236, 242, 242, 242, 246, 246, 251, 256, 256, 256, 256, 236, 240, 236, 236, 236, 236, 244, 244, 250, 250, 250, 256, 256, 256, 236, 236, 242, 242, 250, 250, 256, 236, 254, 236, 236, 236, 241, 236, 236, 246, 246, 252, 252, 246, 246, 256, 262, 268, 276, 282, 262, 276, 282, 262, 262, 268, 282, 282, 262, 262, 262, 262, 267, 267, 272, 272, 272, 272, 282, 282, 282, 262, 268, 268, 268, 282, 274, 280, 274, 274, 280, 280, 262, 268, 268, 262, 262, 262, 268, 274, 280, 262, 262, 262, 262, 262, 272, 278, 272, 278, 272, 272, 262, 268, 262, 262, 270, 276, 280, 280, 280, 266, 262, 262, 274, 282, 274, 282, 274, 282, 276, 282, 262, 262, 272, 278, 272, 278, 272, 266, 278, 278, 288, 294, 288, 288, 294, 288, 302, 310, 310, 310, 288, 288, 288, 288, 296, 296, 296, 296, 288, 304, 304, 304, 304, 304, 288, 288, 296, 304, 296, 304, 296, 306, 288, 300, 306, 306, 300, 306, 288, 296, 304, 288, 298, 306, 288, 296, 304, 288, 304, 294, 302, 308, 288, 298, 308, 288, 304, 304, 294, 304, 304, 288, 296, 304, 288, 296, 304, 288, 296, 288, 310, 288, 296, 304, 288, 296, 304, 298, 294, 288, 308, 288, 296, 305, 314, 314, 320, 314, 326, 332, 326, 332, 326, 332, 326, 318, 324, 330, 330, 335, 314, 320, 330, 330, 314, 322, 328, 334, 314, 320, 328, 334, 320, 328, 334, 314, 318, 314, 320, 324, 332, 314, 314, 314, 330, 335, 330, 330, 314, 314, 314, 322, 322, 328, 328, 314, 314, 314, 320, 330, 330, 335, 335, 326, 326, 314, 314, 324, 324, 324, 320, 330, 330, 330, 335, 330, 314, 314, 314, 314, 314, 328, 328, 328, 328, 336, 340, 340, 346, 340, 340, 346, 346, 354, 360, 360, 340, 340, 346, 340, 352, 360, 352, 350, 350, 350, 360, 340, 340, 352, 340, 340, 348, 358, 358, 362, 358, 358, 346, 346, 356, 340, 340, 346, 346, 356, 356, 340, 340, 340, 346, 346, 346, 350, 350, 355, 360, 360, 360, 360, 340, 344, 340, 340, 340, 340, 348, 348, 354, 354, 354, 360, 360, 360, 340, 340, 346, 346, 354, 354, 360, 340, 358, 340, 340, 340, 345, 340, 340, 350, 350, 356, 356, 350, 350, 360, 366, 372, 380, 386, 366, 380, 386, 366, 366, 372, 386, 386, 366, 366, 366, 366, 371, 371, 376, 376, 376, 376, 386, 386, 386, 366, 372, 372, 372, 386, 378, 384, 378, 378, 384, 384, 366, 372, 372, 366, 366, 366, 372, 378, 384, 366, 366, 366, 366, 366, 376, 382, 376, 382, 376, 376, 366, 372, 366, 366, 374, 380, 384, 384, 384, 370, 366, 366, 378, 386, 378, 386, 378, 386, 380, 386, 366, 366, 376, 382, 376, 382, 376, 370, 382, 382, 392, 398, 392, 392, 398, 392, 406, 414, 414, 414, 392, 392, 392, 392, 400, 400, 400, 400, 392, 408, 408, 408, 408, 408, 392, 392, 400, 408, 400, 408, 400, 410, 392, 404, 410, 410, 404, 410, 392, 400, 408, 392, 402, 410, 392, 400, 408, 392, 408, 398, 406, 412, 392, 402, 412, 392, 408, 408, 398, 408, 408, 392, 400, 408, 392, 400, 408, 392, 400, 392, 414, 392, 400, 408, 392, 400, 408, 402, 398, 392, 412, 392, 400, 409, 418, 418, 424, 418, 430, 436, 430, 436, 430, 436, 430, 422, 428, 434, 434, 439, 418, 424, 434, 434, 418, 426, 432, 438, 418, 424, 432, 438, 424, 432, 438, 418, 422, 418, 424, 428, 436, 418, 418, 418, 434, 439, 434, 434, 418, 418, 418, 426, 426, 432, 432, 418, 418, 418, 424, 434, 434, 439, 439, 430, 430, 418, 418, 428, 428, 428, 424, 434, 434, 434, 439, 434, 418, 418, 418, 418, 418, 432, 432, 432, 432, 440, 444, 444, 450, 444, 444, 450, 450, 458, 464, 464, 444, 444, 450, 444, 456, 464, 456, 454, 454, 454, 464, 444, 444, 456, 444, 444, 452, 462, 462, 466, 462, 462, 450, 450, 460, 444, 444, 450, 450, 460, 460, 444, 444, 444, 450, 450, 450, 454, 454, 459, 464, 464, 464, 464, 444, 448, 444, 444, 444, 444, 452, 452, 458, 458, 458, 464, 464, 464, 444, 444, 450, 450, 458, 458, 464, 444, 462, 444, 444, 444, 449, 444, 444, 454, 454, 460, 460, 454, 454, 464, 470, 476, 484, 490, 470, 484, 490, 470, 470, 476, 490, 490, 470, 470, 470, 470, 475, 475, 480, 480, 480, 480, 490, 490, 490, 470, 476, 476, 476, 490, 482, 488, 482, 482, 488, 488, 470, 476, 476, 470, 470, 470, 476, 482, 488, 470, 470, 470, 470, 470, 480, 486, 480, 486, 480, 480, 470, 476, 470, 470, 478, 484, 488, 488, 488, 474, 470, 470, 482, 490, 482, 490, 482, 490, 484, 490, 470, 470, 480, 486, 480, 486, 480, 474, 486, 486, 496, 502, 496, 496, 502, 496, 510, 518, 518, 518, 496, 496, 496, 496, 504, 504, 504, 504, 496, 512, 512, 512, 512, 512, 496, 496, 504, 512, 504, 512, 504, 514, 496, 508, 514, 514, 508, 514, 496, 504, 512, 496, 506, 514, 496, 504, 512, 496, 512, 502, 510, 516, 496, 506, 516, 496, 512, 512, 502, 512, 512, 496, 504, 512, 496, 504, 512, 496, 504, 496, 518, 496, 504, 512, 496, 504, 512, 506, 502, 496, 516, 496, 504, 513, 522, 522, 528, 522, 534, 540, 534, 540, 534, 540, 534, 526, 532, 538, 538, 543, 522, 528, 538, 538, 522, 530, 536, 542, 522, 528, 536, 542, 528, 536, 542, 522, 526, 522, 528, 532, 540, 522, 522, 522, 538, 543, 538, 538, 522, 522, 522, 530, 530, 536, 536, 522, 522, 522, 528, 538, 538, 543, 543, 534, 534, 522, 522, 532, 532, 532, 528, 538, 538, 538, 543, 538, 522, 522, 522, 522, 522, 536, 536, 536, 536, 544, 548, 548, 554, 548, 548, 554, 554, 562, 568, 568, 548, 548, 554, 548, 560, 568, 560, 558, 558, 558, 568, 548, 548, 560, 548, 548, 556, 566, 566, 570, 566, 566, 554, 554, 564, 548, 548, 554, 554, 564, 564, 548, 548, 548, 554, 554, 554, 558, 558, 563, 568, 568, 568, 568, 548, 552, 548, 548, 548, 548, 556, 556, 562, 562, 562, 568, 568, 568, 548, 548, 554, 554, 562, 562, 568, 548, 566, 548, 548, 548, 553, 548, 548, 558, 558, 564, 564, 558, 558, 568, 574, 580, 588, 594, 574, 588, 594, 574, 574, 580, 594, 594, 574, 574, 574, 574, 579, 579, 584, 584, 584, 584, 594, 594, 594, 574, 580, 580, 580, 594, 586, 592, 586, 586, 592, 592, 574, 580, 580, 574, 574, 574, 580, 586, 592, 574, 574, 574, 574, 574, 584, 590, 584, 590, 584, 584, 574, 580, 574, 574, 582, 588, 592, 592, 592, 578, 574, 574, 586, 594, 586, 594, 586, 594, 588, 594, 574, 574, 584, 590, 584, 590, 584, 578, 590, 590, 600, 606, 600, 600, 606, 600, 614, 622, 622, 622, 600, 600, 600, 600, 608, 608, 608, 608, 600, 616, 616, 616, 616, 616, 600, 600, 608, 616, 608, 616, 608, 618, 600, 612, 618, 618, 612, 618, 600, 608, 616, 600, 610, 618, 600, 608, 616, 600, 616, 606, 614, 620, 600, 610, 620, 600, 616, 616, 606, 616, 616, 600, 608, 616, 600, 608, 616, 600, 608, 600, 622, 600, 608, 616, 600, 608, 616, 610, 606, 600, 620, 600, 608, 617, 418, 418, 424, 418, 430, 436, 430, 436, 430, 436, 430, 422, 428, 434, 434, 439, 418, 424, 434, 434, 418, 426, 432, 438, 418, 424, 432, 438, 424, 432, 438, 418, 422, 418, 424, 428, 436, 418, 418, 418, 434, 439, 434, 434, 418, 418, 418, 426, 426, 432, 432, 418, 418, 418, 424, 434, 434, 439, 439, 430, 430, 418, 418, 428, 428, 428, 424, 434, 434, 434, 439, 434, 418, 418, 418, 418, 418, 432, 432, 432, 432, 440, 444, 444, 450, 444, 444, 450, 450, 458, 464, 464, 444, 444, 450, 444, 456, 464, 456, 454, 454, 454, 464, 444, 444, 456, 444, 444, 452, 462, 462, 466, 462, 462, 450, 450, 460, 444, 444, 450, 450, 460, 460, 444, 444, 444, 450, 450, 450, 454, 454, 459, 464, 464, 464, 464, 444, 448, 444, 444, 444, 444, 452, 452, 458, 458, 458, 464, 464, 464, 444, 444, 450, 450, 458, 458, 464, 444, 462, 444, 444, 444, 449, 444, 444, 454, 454, 460, 460, 454, 454, 464, 470, 476, 484, 490, 470, 484, 490, 470, 470, 476, 490, 490, 470, 470, 470, 470, 475, 475, 480, 480, 480, 480, 490, 490, 490, 470, 476, 476, 476, 490, 482, 488, 482, 482, 488, 488, 470, 476, 476, 470, 470, 470, 476, 482, 488, 470, 470, 470, 470, 470, 480, 486, 480, 486, 480, 480, 470, 476, 470, 470, 478, 484, 488, 488, 488, 474, 470, 470, 482, 490, 482, 490, 482, 490, 484, 490, 470, 470, 480, 486, 480, 486, 480, 474, 486, 486, 496, 502, 496, 496, 502, 496, 510, 518, 518, 518, 496, 496, 496, 496, 504, 504, 504, 504, 496, 512, 512, 512, 512, 512, 496, 496, 504, 512, 504, 512, 504, 514, 496, 508, 514, 514, 508, 514, 496, 504, 512, 496, 506, 514, 496, 504, 512, 496, 512, 502, 510, 516, 496, 506, 516, 496, 512, 512, 502, 512, 512, 496, 504, 512, 496, 504, 512, 496, 504, 496, 518, 496, 504, 512, 496, 504, 512, 506, 502, 496, 516, 496, 504, 513, 522, 522, 528, 522, 534, 540, 534, 540, 534, 540, 534, 526, 532, 538, 538, 543, 522, 528, 538, 538, 522, 530, 536, 542, 522, 528, 536, 542, 528, 536, 542, 522, 526, 522, 528, 532, 540, 522, 522, 522, 538, 543, 538, 538, 522, 522, 522, 530, 530, 536, 536, 522, 522, 522, 528, 538, 538, 543, 543, 534, 534, 522, 522, 532, 532, 532, 528, 538, 538, 538, 543, 538, 522, 522, 522, 522, 522, 536, 536, 536, 536, 544, 548, 548, 554, 548, 548, 554, 554, 562, 568, 568, 548, 548, 554, 548, 560, 568, 560, 558, 558, 558, 568, 548, 548, 560, 548, 548, 556, 566, 566, 570, 566, 566, 554, 554, 564, 548, 548, 554, 554, 564, 564, 548, 548, 548, 554, 554, 554, 558, 558, 563, 568, 568, 568, 568, 548, 552, 548, 548, 548, 548, 556, 556, 562, 562, 562, 568, 568, 568, 548, 548, 554, 554, 562, 562, 568, 548, 566, 548, 548, 548, 553, 548, 548, 558, 558, 564, 564, 558, 558, 568, 574, 580, 588, 594, 574, 588, 594, 574, 574, 580, 594, 594, 574, 574, 574, 574, 579, 579, 584, 584, 584, 584, 594, 594, 594, 574, 580, 580, 580, 594, 586, 592, 586, 586, 592, 592, 574, 580, 580, 574, 574, 574, 580, 586, 592, 574, 574, 574, 574, 574, 584, 590, 584, 590, 584, 584, 574, 580, 574, 574, 582, 588, 592, 592, 592, 578, 574, 574, 586, 594, 586, 594, 586, 594, 588, 594, 574, 574, 584, 590, 584, 590, 584, 578, 590, 590, 600, 606, 600, 600, 606, 600, 614, 622, 622, 622, 600, 600, 600, 600, 608, 608, 608, 608, 600, 616, 616, 616, 616, 616, 600, 600, 608, 616, 608, 616, 608, 618, 600, 612, 618, 618, 612, 618, 600, 608, 616, 600, 610, 618, 600, 608, 616, 600, 616, 606, 614, 620, 600, 610, 620, 600, 616, 616, 606, 616, 616, 600, 608, 616, 600, 608, 616, 600, 608, 600, 622, 600, 608, 616, 600, 608, 616, 610, 606, 600, 620, 600, 608, 617, 418, 418, 424, 418, 430, 436, 430, 436, 430, 436, 430, 422, 428, 434, 434, 439, 418, 424, 434, 434, 418, 426, 432, 438, 418, 424, 432, 438, 424, 432, 438, 418, 422, 418, 424, 428, 436, 418, 418, 418, 434, 439, 434, 434, 418, 418, 418, 426, 426, 432, 432, 418, 418, 418, 424, 434, 434, 439, 439, 430, 430, 418, 418, 428, 428, 428, 424, 434, 434, 434, 439, 434, 418, 418, 418, 418, 418, 432, 432, 432, 432, 440, 444, 444, 450, 444, 444, 450, 450, 458, 464, 464, 444, 444, 450, 444, 456, 464, 456, 454, 454, 454, 464, 444, 444, 456, 444, 444, 452, 462, 462, 466, 462, 462, 450, 450, 460, 444, 444, 450, 450, 460, 460, 444, 444, 444, 450, 450, 450, 454, 454, 459, 464, 464, 464, 464, 444, 448, 444, 444, 444, 444, 452, 452, 458, 458, 458, 464, 464, 464, 444, 444, 450, 450, 458, 458, 464, 444, 462, 444, 444, 444, 449, 444, 444, 454, 454, 460, 460, 454, 454, 464, 470, 476, 484, 490, 470, 484, 490, 470, 470, 476, 490, 490, 470, 470, 470, 470, 475, 475, 480, 480, 480, 480, 490, 490, 490, 470, 476, 476, 476, 490, 482, 488, 482, 482, 488, 488, 470, 476, 476, 470, 470, 470, 476, 482, 488, 470, 470, 470, 470, 470, 480, 486, 480, 486, 480, 480, 470, 476, 470, 470, 478, 484, 488, 488, 488, 474, 470, 470, 482, 490, 482, 490, 482, 490, 484, 490, 470, 470, 480, 486, 480, 486, 480, 474, 486, 486, 496, 502, 496, 496, 502, 496, 510, 518, 518, 518, 496, 496, 496, 496, 504, 504, 504, 504, 496, 512, 512, 512, 512, 512, 496, 496, 504, 512, 504, 512, 504, 514, 496, 508, 514, 514, 508, 514, 496, 504, 512, 496, 506, 514, 496, 504, 512, 496, 512, 502, 510, 516, 496, 506, 516, 496, 512, 512, 502, 512, 512, 496, 504, 512, 496, 504, 512, 496, 504, 496, 518, 496, 504, 512, 496, 504, 512, 506, 502, 496, 516, 496, 504, 513, 522, 522, 528, 522, 534, 540, 534, 540, 534, 540, 534, 526, 532, 538, 538, 543, 522, 528, 538, 538, 522, 530, 536, 542, 522, 528, 536, 542, 528, 536, 542, 522, 526, 522, 528, 532, 540, 522, 522, 522, 538, 543, 538, 538, 522, 522, 522, 530, 530, 536, 536, 522, 522, 522, 528, 538, 538, 543, 543, 534, 534, 522, 522, 532, 532, 532, 528, 538, 538, 538, 543, 538, 522, 522, 522, 522, 522, 536, 536, 536, 536, 544, 548, 548, 554, 548, 548, 554, 554, 562, 568, 568, 548, 548, 554, 548, 560, 568, 560, 558, 558, 558, 568, 548, 548, 560, 548, 548, 556, 566, 566, 570, 566, 566, 554, 554, 564, 548, 548, 554, 554, 564, 564, 548, 548, 548, 554, 554, 554, 558, 558, 563, 568, 568, 568, 568, 548, 552, 548, 548, 548, 548, 556, 556, 562, 562, 562, 568, 568, 568, 548, 548, 554, 554, 562, 562, 568, 548, 566, 548, 548, 548, 553, 548, 548, 558, 558, 564, 564, 558, 558, 568, 574, 580, 588, 594, 574, 588, 594, 574, 574, 580, 594, 594, 574, 574, 574, 574, 579, 579, 584, 584, 584, 584, 594, 594, 594, 574, 580, 580, 580, 594, 586, 592, 586, 586, 592, 592, 574, 580, 580, 574, 574, 574, 580, 586, 592, 574, 574, 574, 574, 574, 584, 590, 584, 590, 584, 584, 574, 580, 574, 574, 582, 588, 592, 592, 592, 578, 574, 574, 586, 594, 586, 594, 586, 594, 588, 594, 574, 574, 584, 590, 584, 590, 584, 578, 590, 590, 600, 606, 600, 600, 606, 600, 614, 622, 622, 622, 600, 600, 600, 600, 608, 608, 608, 608, 600, 616, 616, 616, 616, 616, 600, 600, 608, 616, 608, 616, 608, 618, 600, 612, 618, 618, 612, 618, 600, 608, 616, 600, 610, 618, 600, 608, 616, 600, 616, 606, 614, 620, 600, 610, 620, 600, 616, 616, 606, 616, 616, 600, 608, 616, 600, 608, 616, 600, 608, 600, 622, 600, 608, 616, 600, 608, 616, 610, 606, 600, 620, 600, 608, 617, 418, 418, 424, 418, 430, 436, 430, 436, 430, 436, 430, 422, 428, 434, 434, 439, 418, 424, 434, 434, 418, 426, 432, 438, 418, 424, 432, 438, 424, 432, 438, 418, 422, 418, 424, 428, 436, 418, 418, 418, 434, 439, 434, 434, 418, 418, 418, 426, 426, 432, 432, 418, 418, 418, 424, 434, 434, 439, 439, 430, 430, 418, 418, 428, 428, 428, 424, 434, 434, 434, 439, 434, 418, 418, 418, 418, 418, 432, 432, 432, 432, 440, 444, 444, 450, 444, 444, 450, 450, 458, 464, 464, 444, 444, 450, 444, 456, 464, 456, 454, 454, 454, 464, 444, 444, 456, 444, 444, 452, 462, 462, 466, 462, 462, 450, 450, 460, 444, 444, 450, 450, 460, 460, 444, 444, 444, 450, 450, 450, 454, 454, 459, 464, 464, 464, 464, 444, 448, 444, 444, 444, 444, 452, 452, 458, 458, 458, 464, 464, 464, 444, 444, 450, 450, 458, 458, 464, 444, 462, 444, 444, 444, 449, 444, 444, 454, 454, 460, 460, 454, 454, 464, 470, 476, 484, 490, 470, 484, 490, 470, 470, 476, 490, 490, 470, 470, 470, 470, 475, 475, 480, 480, 480, 480, 490, 490, 490, 470, 476, 476, 476, 490, 482, 488, 482, 482, 488, 488, 470, 476, 476, 470, 470, 470, 476, 482, 488, 470, 470, 470, 470, 470, 480, 486, 480, 486, 480, 480, 470, 476, 470, 470, 478, 484, 488, 488, 488, 474, 470, 470, 482, 490, 482, 490, 482, 490, 484, 490, 470, 470, 480, 486, 480, 486, 480, 474, 486, 486, 496, 502, 496, 496, 502, 496, 510, 518, 518, 518, 496, 496, 496, 496, 504, 504, 504, 504, 496, 512, 512, 512, 512, 512, 496, 496, 504, 512, 504, 512, 504, 514, 496, 508, 514, 514, 508, 514, 496, 504, 512, 496, 506, 514, 496, 504, 512, 496, 512, 502, 510, 516, 496, 506, 516, 496, 512, 512, 502, 512, 512, 496, 504, 512, 496, 504, 512, 496, 504, 496, 518, 496, 504, 512, 496, 504, 512, 506, 502, 496, 516, 496, 504, 513, 522, 522, 528, 522, 534, 540, 534, 540, 534, 540, 534, 526, 532, 538, 538, 543, 522, 528, 538, 538, 522, 530, 536, 542, 522, 528, 536, 542, 528, 536, 542, 522, 526, 522, 528, 532, 540, 522, 522, 522, 538, 543, 538, 538, 522, 522, 522, 530, 530, 536, 536, 522, 522, 522, 528, 538, 538, 543, 543, 534, 534, 522, 522, 532, 532, 532, 528, 538, 538, 538, 543, 538, 522, 522, 522, 522, 522, 536, 536, 536, 536, 544, 548, 548, 554, 548, 548, 554, 554, 562, 568, 568, 548, 548, 554, 548, 560, 568, 560, 558, 558, 558, 568, 548, 548, 560, 548, 548, 556, 566, 566, 570, 566, 566, 554, 554, 564, 548, 548, 554, 554, 564, 564, 548, 548, 548, 554, 554, 554, 558, 558, 563, 568, 568, 568, 568, 548, 552, 548, 548, 548, 548, 556, 556, 562, 562, 562, 568, 568, 568, 548, 548, 554, 554, 562, 562, 568, 548, 566, 548, 548, 548, 553, 548, 548, 558, 558, 564, 564, 558, 558, 568, 574, 580, 588, 594, 574, 588, 594, 574, 574, 580, 594, 594, 574, 574, 574, 574, 579, 579, 584, 584, 584, 584, 594, 594, 594, 574, 580, 580, 580, 594, 586, 592, 586, 586, 592, 592, 574, 580, 580, 574, 574, 574, 580, 586, 592, 574, 574, 574, 574, 574, 584, 590, 584, 590, 584, 584, 574, 580, 574, 574, 582, 588, 592, 592, 592, 578, 574, 574, 586, 594, 586, 594, 586, 594, 588, 594, 574, 574, 584, 590, 584, 590, 584, 578, 590, 590, 600, 606, 600, 600, 606, 600, 614, 622, 622, 622, 600, 600, 600, 600, 608, 608, 608, 608, 600, 616, 616, 616, 616, 616, 600, 600, 608, 616, 608, 616, 608, 618, 600, 612, 618, 618, 612, 618, 600, 608, 616, 600, 610, 618, 600, 608, 616, 600, 616, 606, 614, 620, 600, 610, 620, 600, 616, 616, 606, 616, 616, 600, 608, 616, 600, 608, 616, 600, 608, 600, 622, 600, 608, 616, 600, 608, 616, 610, 606, 600, 620, 600, 608, 617, 626, 626, 632, 626, 638, 644, 638, 644, 638, 644, 638, 630, 636, 642, 642, 647, 626, 632, 642, 642, 626, 634, 640, 646, 626, 632, 640, 646, 632, 640, 646, 626, 630, 626, 632, 636, 644, 626, 626, 626, 642, 647, 642, 642, 626, 626, 626, 634, 634, 640, 640, 626, 626, 626, 632, 642, 642, 647, 647, 638, 638, 626, 626, 636, 636, 636, 632, 642, 642, 642, 647, 642, 626, 626, 626, 626, 626, 640, 640, 640, 640, 648, 652, 652, 658, 652, 652, 658, 658, 666, 672, 672, 652, 652, 658, 652, 664, 672, 664, 662, 662, 662, 672, 652, 652, 664, 652, 652, 660, 670, 670, 674, 670, 670, 658, 658, 668, 652, 652, 658, 658, 668, 668, 652, 652, 652, 658, 658, 658, 662, 662, 667, 672, 672, 672, 672, 652, 656, 652, 652, 652, 652, 660, 660, 666, 666, 666, 672, 672, 672, 652, 652, 658, 658, 666, 666, 672, 652, 670, 652, 652, 652, 657, 652, 652, 662, 662, 668, 668, 662, 662, 672, 678, 684, 692, 698, 678, 692, 698, 678, 678, 684, 698, 698, 678, 678, 678, 678, 683, 683, 688, 688, 688, 688, 698, 698, 698, 678, 684, 684, 684, 698, 690, 696, 690, 690, 696, 696, 678, 684, 684, 678, 678, 678, 684, 690, 696, 678, 678, 678, 678, 678, 688, 694, 688, 694, 688, 688, 678, 684, 678, 678, 686, 692, 696, 696, 696, 682, 678, 678, 690, 698, 690, 698, 690, 698, 692, 698, 678, 678, 688, 694, 688, 694, 688, 682, 694, 694, 704, 710, 704, 704, 710, 704, 718, 726, 726, 726, 704, 704, 704, 704, 712, 712, 712, 712, 704, 720, 720, 720, 720, 720, 704, 704, 712, 720, 712, 720, 712, 722, 704, 716, 722, 722, 716, 722, 704, 712, 720, 704, 714, 722, 704, 712, 720, 704, 720, 710, 718, 724, 704, 714, 724, 704, 720, 720, 710, 720, 720, 704, 712, 720, 704, 712, 720, 704, 712, 704, 726, 704, 712, 720, 704, 712, 720, 714, 710, 704, 724, 704, 712, 721, 730, 730, 736, 730, 742, 748, 742, 748, 742, 748, 742, 734, 740, 746, 746, 751, 730, 736, 746, 746, 730, 738, 744, 750, 730, 736, 744, 750, 736, 744, 750, 730, 734, 730, 736, 740, 748, 730, 730, 730, 746, 751, 746, 746, 730, 730, 730, 738, 738, 744, 744, 730, 730, 730, 736, 746, 746, 751, 751, 742, 742, 730, 730, 740, 740, 740, 736, 746, 746, 746, 751, 746, 730, 730, 730, 730, 730, 744, 744, 744, 744, 752, 756, 756, 762, 756, 756, 762, 762, 770, 776, 776, 756, 756, 762, 756, 768, 776, 768, 766, 766, 766, 776, 756, 756, 768, 756, 756, 764, 774, 774, 778, 774, 774, 762, 762, 772, 756, 756, 762, 762, 772, 772, 756, 756, 756, 762, 762, 762, 766, 766, 771, 776, 776, 776, 776, 756, 760, 756, 756, 756, 756, 764, 764, 770, 770, 770, 776, 776, 776, 756, 756, 762, 762, 770, 770, 776, 756, 774, 756, 756, 756, 761, 756, 756, 766, 766, 772, 772, 766, 766, 776, 782, 788, 796, 802, 782, 796, 802, 782, 782, 788, 802, 802, 782, 782, 782, 782, 787, 787, 792, 792, 792, 792, 802, 802, 802, 782, 788, 788, 788, 802, 794, 800, 794, 794, 800, 800, 782, 788, 788, 782, 782, 782, 788, 794, 800, 782, 782, 782, 782, 782, 792, 798, 792, 798, 792, 792, 782, 788, 782, 782, 790, 796, 800, 800, 800, 786, 782, 782, 794, 802, 794, 802, 794, 802, 796, 802, 782, 782, 792, 798, 792, 798, 792, 786, 798, 798, 808, 814, 808, 808, 814, 808, 822, 830, 830, 830, 808, 808, 808, 808, 816, 816, 816, 816, 808, 824, 824, 824, 824, 824, 808, 808, 816, 824, 816, 824, 816, 826, 808, 820, 826, 826, 820, 826, 808, 816, 824, 808, 818, 826, 808, 816, 824, 808, 824, 814, 822, 828, 808, 818, 828, 808, 824, 824, 814, 824, 824, 808, 816, 824, 808, 816, 824, 808, 816, 808, 830, 808, 816, 824, 808, 816, 824, 818, 814, 808, 828, 808, 816, 825, 626, 626, 632, 626, 638, 644, 638, 644, 638, 644, 638, 630, 636, 642, 642, 647, 626, 632, 642, 642, 626, 634, 640, 646, 626, 632, 640, 646, 632, 640, 646, 626, 630, 626, 632, 636, 644, 626, 626, 626, 642, 647, 642, 642, 626, 626, 626, 634, 634, 640, 640, 626, 626, 626, 632, 642, 642, 647, 647, 638, 638, 626, 626, 636, 636, 636, 632, 642, 642, 642, 647, 642, 626, 626, 626, 626, 626, 640, 640, 640, 640, 648, 652, 652, 658, 652, 652, 658, 658, 666, 672, 672, 652, 652, 658, 652, 664, 672, 664, 662, 662, 662, 672, 652, 652, 664, 652, 652, 660, 670, 670, 674, 670, 670, 658, 658, 668, 652, 652, 658, 658, 668, 668, 652, 652, 652, 658, 658, 658, 662, 662, 667, 672, 672, 672, 672, 652, 656, 652, 652, 652, 652, 660, 660, 666, 666, 666, 672, 672, 672, 652, 652, 658, 658, 666, 666, 672, 652, 670, 652, 652, 652, 657, 652, 652, 662, 662, 668, 668, 662, 662, 672, 678, 684, 692, 698, 678, 692, 698, 678, 678, 684, 698, 698, 678, 678, 678, 678, 683, 683, 688, 688, 688, 688, 698, 698, 698, 678, 684, 684, 684, 698, 690, 696, 690, 690, 696, 696, 678, 684, 684, 678, 678, 678, 684, 690, 696, 678, 678, 678, 678, 678, 688, 694, 688, 694, 688, 688, 678, 684, 678, 678, 686, 692, 696, 696, 696, 682, 678, 678, 690, 698, 690, 698, 690, 698, 692, 698, 678, 678, 688, 694, 688, 694, 688, 682, 694, 694, 704, 710, 704, 704, 710, 704, 718, 726, 726, 726, 704, 704, 704, 704, 712, 712, 712, 712, 704, 720, 720, 720, 720, 720, 704, 704, 712, 720, 712, 720, 712, 722, 704, 716, 722, 722, 716, 722, 704, 712, 720, 704, 714, 722, 704, 712, 720, 704, 720, 710, 718, 724, 704, 714, 724, 704, 720, 720, 710, 720, 720, 704, 712, 720, 704, 712, 720, 704, 712, 704, 726, 704, 712, 720, 704, 712, 720, 714, 710, 704, 724, 704, 712, 721, 730, 730, 736, 730, 742, 748, 742, 748, 742, 748, 742, 734, 740, 746, 746, 751, 730, 736, 746, 746, 730, 738, 744, 750, 730, 736, 744, 750, 736, 744, 750, 730, 734, 730, 736, 740, 748, 730, 730, 730, 746, 751, 746, 746, 730, 730, 730, 738, 738, 744, 744, 730, 730, 730, 736, 746, 746, 751, 751, 742, 742, 730, 730, 740, 740, 740, 736, 746, 746, 746, 751, 746, 730, 730, 730, 730, 730, 744, 744, 744, 744, 752, 756, 756, 762, 756, 756, 762, 762, 770, 776, 776, 756, 756, 762, 756, 768, 776, 768, 766, 766, 766, 776, 756, 756, 768, 756, 756, 764, 774, 774, 778, 774, 774, 762, 762, 772, 756, 756, 762, 762, 772, 772, 756, 756, 756, 762, 762, 762, 766, 766, 771, 776, 776, 776, 776, 756, 760, 756, 756, 756, 756, 764, 764, 770, 770, 770, 776, 776, 776, 756, 756, 762, 762, 770, 770, 776, 756, 774, 756, 756, 756, 761, 756, 756, 766, 766, 772, 772, 766, 766, 776, 782, 788, 796, 802, 782, 796, 802, 782, 782, 788, 802, 802, 782, 782, 782, 782, 787, 787, 792, 792, 792, 792, 802, 802, 802, 782, 788, 788, 788, 802, 794, 800, 794, 794, 800, 800, 782, 788, 788, 782, 782, 782, 788, 794, 800, 782, 782, 782, 782, 782, 792, 798, 792, 798, 792, 792, 782, 788, 782, 782, 790, 796, 800, 800, 800, 786, 782, 782, 794, 802, 794, 802, 794, 802, 796, 802, 782, 782, 792, 798, 792, 798, 792, 786, 798, 798, 808, 814, 808, 808, 814, 808, 822, 830, 830, 830, 808, 808, 808, 808, 816, 816, 816, 816, 808, 824, 824, 824, 824, 824, 808, 808, 816, 824, 816, 824, 816, 826, 808, 820, 826, 826, 820, 826, 808, 816, 824, 808, 818, 826, 808, 816, 824, 808, 824, 814, 822, 828, 808, 818, 828, 808, 824, 824, 814, 824, 824, 808, 816, 824, 808, 816, 824, 808, 816, 808, 830, 808, 816, 824, 808, 816, 824, 818, 814, 808, 828, 808, 816, 825, 626, 626, 632, 626, 638, 644, 638, 644, 638, 644, 638, 630, 636, 642, 642, 647, 626, 632, 642, 642, 626, 634, 640, 646, 626, 632, 640, 646, 632, 640, 646, 626, 630, 626, 632, 636, 644, 626, 626, 626, 642, 647, 642, 642, 626, 626, 626, 634, 634, 640, 640, 626, 626, 626, 632, 642, 642, 647, 647, 638, 638, 626, 626, 636, 636, 636, 632, 642, 642, 642, 647, 642, 626, 626, 626, 626, 626, 640, 640, 640, 640, 648, 652, 652, 658, 652, 652, 658, 658, 666, 672, 672, 652, 652, 658, 652, 664, 672, 664, 662, 662, 662, 672, 652, 652, 664, 652, 652, 660, 670, 670, 674, 670, 670, 658, 658, 668, 652, 652, 658, 658, 668, 668, 652, 652, 652, 658, 658, 658, 662, 662, 667, 672, 672, 672, 672, 652, 656, 652, 652, 652, 652, 660, 660, 666, 666, 666, 672, 672, 672, 652, 652, 658, 658, 666, 666, 672, 652, 670, 652, 652, 652, 657, 652, 652, 662, 662, 668, 668, 662, 662, 672, 678, 684, 692, 698, 678, 692, 698, 678, 678, 684, 698, 698, 678, 678, 678, 678, 683, 683, 688, 688, 688, 688, 698, 698, 698, 678, 684, 684, 684, 698, 690, 696, 690, 690, 696, 696, 678, 684, 684, 678, 678, 678, 684, 690, 696, 678, 678, 678, 678, 678, 688, 694, 688, 694, 688, 688, 678, 684, 678, 678, 686, 692, 696, 696, 696, 682, 678, 678, 690, 698, 690, 698, 690, 698, 692, 698, 678, 678, 688, 694, 688, 694, 688, 682, 694, 694, 704, 710, 704, 704, 710, 704, 718, 726, 726, 726, 704, 704, 704, 704, 712, 712, 712, 712, 704, 720, 720, 720, 720, 720, 704, 704, 712, 720, 712, 720, 712, 722, 704, 716, 722, 722, 716, 722, 704, 712, 720, 704, 714, 722, 704, 712, 720, 704, 720, 710, 718, 724, 704, 714, 724, 704, 720, 720, 710, 720, 720, 704, 712, 720, 704, 712, 720, 704, 712, 704, 726, 704, 712, 720, 704, 712, 720, 714, 710, 704, 724, 704, 712, 721, 730, 730, 736, 730, 742, 748, 742, 748, 742, 748, 742, 734, 740, 746, 746, 751, 730, 736, 746, 746, 730, 738, 744, 750, 730, 736, 744, 750, 736, 744, 750, 730, 734, 730, 736, 740, 748, 730, 730, 730, 746, 751, 746, 746, 730, 730, 730, 738, 738, 744, 744, 730, 730, 730, 736, 746, 746, 751, 751, 742, 742, 730, 730, 740, 740, 740, 736, 746, 746, 746, 751, 746, 730, 730, 730, 730, 730, 744, 744, 744, 744, 752, 756, 756, 762, 756, 756, 762, 762, 770, 776, 776, 756, 756, 762, 756, 768, 776, 768, 766, 766, 766, 776, 756, 756, 768, 756, 756, 764, 774, 774, 778, 774, 774, 762, 762, 772, 756, 756, 762, 762, 772, 772, 756, 756, 756, 762, 762, 762, 766, 766, 771, 776, 776, 776, 776, 756, 760, 756, 756, 756, 756, 764, 764, 770, 770, 770, 776, 776, 776, 756, 756, 762, 762, 770, 770, 776, 756, 774, 756, 756, 756, 761, 756, 756, 766, 766, 772, 772, 766, 766, 776, 782, 788, 796, 802, 782, 796, 802, 782, 782, 788, 802, 802, 782, 782, 782, 782, 787, 787, 792, 792, 792, 792, 802, 802, 802, 782, 788, 788, 788, 802, 794, 800, 794, 794, 800, 800, 782, 788, 788, 782, 782, 782, 788, 794, 800, 782, 782, 782, 782, 782, 792, 798, 792, 798, 792, 792, 782, 788, 782, 782, 790, 796, 800, 800, 800, 786, 782, 782, 794, 802, 794, 802, 794, 802, 796, 802, 782, 782, 792, 798, 792, 798, 792, 786, 798, 798, 808, 814, 808, 808, 814, 808, 822, 830, 830, 830, 808, 808, 808, 808, 816, 816, 816, 816, 808, 824, 824, 824, 824, 824, 808, 808, 816, 824, 816, 824, 816, 826, 808, 820, 826, 826, 820, 826, 808, 816, 824, 808, 818, 826, 808, 816, 824, 808, 824, 814, 822, 828, 808, 818, 828, 808, 824, 824, 814, 824, 824, 808, 816, 824, 808, 816, 824, 808, 816, 808, 830, 808, 816, 824, 808, 816, 824, 818, 814, 808, 828, 808, 816, 825, 626, 626, 632, 626, 638, 644, 638, 644, 638, 644, 638, 630, 636, 642, 642, 647, 626, 632, 642, 642, 626, 634, 640, 646, 626, 632, 640, 646, 632, 640, 646, 626, 630, 626, 632, 636, 644, 626, 626, 626, 642, 647, 642, 642, 626, 626, 626, 634, 634, 640, 640, 626, 626, 626, 632, 642, 642, 647, 647, 638, 638, 626, 626, 636, 636, 636, 632, 642, 642, 642, 647, 642, 626, 626, 626, 626, 626, 640, 640, 640, 640, 648, 652, 652, 658, 652, 652, 658, 658, 666, 672, 672, 652, 652, 658, 652, 664, 672, 664, 662, 662, 662, 672, 652, 652, 664, 652, 652, 660, 670, 670, 674, 670, 670, 658, 658, 668, 652, 652, 658, 658, 668, 668, 652, 652, 652, 658, 658, 658, 662, 662, 667, 672, 672, 672, 672, 652, 656, 652, 652, 652, 652, 660, 660, 666, 666, 666, 672, 672, 672, 652, 652, 658, 658, 666, 666, 672, 652, 670, 652, 652, 652, 657, 652, 652, 662, 662, 668, 668, 662, 662, 672, 678, 684, 692, 698, 678, 692, 698, 678, 678, 684, 698, 698, 678, 678, 678, 678, 683, 683, 688, 688, 688, 688, 698, 698, 698, 678, 684, 684, 684, 698, 690, 696, 690, 690, 696, 696, 678, 684, 684, 678, 678, 678, 684, 690, 696, 678, 678, 678, 678, 678, 688, 694, 688, 694, 688, 688, 678, 684, 678, 678, 686, 692, 696, 696, 696, 682, 678, 678, 690, 698, 690, 698, 690, 698, 692, 698, 678, 678, 688, 694, 688, 694, 688, 682, 694, 694, 704, 710, 704, 704, 710, 704, 718, 726, 726, 726, 704, 704, 704, 704, 712, 712, 712, 712, 704, 720, 720, 720, 720, 720, 704, 704, 712, 720, 712, 720, 712, 722, 704, 716, 722, 722, 716, 722, 704, 712, 720, 704, 714, 722, 704, 712, 720, 704, 720, 710, 718, 724, 704, 714, 724, 704, 720, 720, 710, 720, 720, 704, 712, 720, 704, 712, 720, 704, 712, 704, 726, 704, 712, 720, 704, 712, 720, 714, 710, 704, 724, 704, 712, 721, 730, 730, 736, 730, 742, 748, 742, 748, 742, 748, 742, 734, 740, 746, 746, 751, 730, 736, 746, 746, 730, 738, 744, 750, 730, 736, 744, 750, 736, 744, 750, 730, 734, 730, 736, 740, 748, 730, 730, 730, 746, 751, 746, 746, 730, 730, 730, 738, 738, 744, 744, 730, 730, 730, 736, 746, 746, 751, 751, 742, 742, 730, 730, 740, 740, 740, 736, 746, 746, 746, 751, 746, 730, 730, 730, 730, 730, 744, 744, 744, 744, 752, 756, 756, 762, 756, 756, 762, 762, 770, 776, 776, 756, 756, 762, 756, 768, 776, 768, 766, 766, 766, 776, 756, 756, 768, 756, 756, 764, 774, 774, 778, 774, 774, 762, 762, 772, 756, 756, 762, 762, 772, 772, 756, 756, 756, 762, 762, 762, 766, 766, 771, 776, 776, 776, 776, 756, 760, 756, 756, 756, 756, 764, 764, 770, 770, 770, 776, 776, 776, 756, 756, 762, 762, 770, 770, 776, 756, 774, 756, 756, 756, 761, 756, 756, 766, 766, 772, 772, 766, 766, 776, 782, 788, 796, 802, 782, 796, 802, 782, 782, 788, 802, 802, 782, 782, 782, 782, 787, 787, 792, 792, 792, 792, 802, 802, 802, 782, 788, 788, 788, 802, 794, 800, 794, 794, 800, 800, 782, 788, 788, 782, 782, 782, 788, 794, 800, 782, 782, 782, 782, 782, 792, 798, 792, 798, 792, 792, 782, 788, 782, 782, 790, 796, 800, 800, 800, 786, 782, 782, 794, 802, 794, 802, 794, 802, 796, 802, 782, 782, 792, 798, 792, 798, 792, 786, 798, 798, 808, 814, 808, 808, 814, 808, 822, 830, 830, 830, 808, 808, 808, 808, 816, 816, 816, 816, 808, 824, 824, 824, 824, 824, 808, 808, 816, 824, 816, 824, 816, 826, 808, 820, 826, 826, 820, 826, 808, 816, 824, 808, 818, 826, 808, 816, 824, 808, 824, 814, 822, 828, 808, 818, 828, 808, 824, 824, 814, 824, 824, 808, 816, 824, 808, 816, 824, 808, 816, 808, 830, 808, 816, 824, 808, 816, 824, 818, 814, 808, 828, 808, 816, 825, 0}
    Dim Array_position_2() = {4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 4, 6, 6, 6, 2, 2, 4, 4, 8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 12, 4, 4, 4, 6, 4, 4, 10, 4, 4, 4, 10, 10, 4, 3, 7, 8, 8, 4, 6, 6, 8, 8, 8, 8, 4, 12, 8, 4, 6, 12, 8, 6, 8, 6, 4, 6, 4, 8, 8, 6, 8, 6, 6, 4, 8, 8, 10, 3, 3, 10, 4, 6, 4, 4, 8, 4, 20, 4, 4, 4, 6, 8, 3, 3, 10, 10, 5, 12, 8, 8, 10, 6, 6, 4, 8, 4, 4, 10, 4, 6, 12, 8, 4, 4, 4, 6, 6, 4, 14, 8, 4, 8, 6, 4, 6, 4, 4, 8, 4, 4, 6, 4, 4, 6, 2, 2, 8, 4, 6, 6, 12, 8, 8, 4, 8, 3, 3, 8, 14, 8, 4, 8, 10, 12, 8, 8, 12, 4, 6, 6, 12, 12, 6, 6, 4, 6, 6, 6, 4, 6, 4, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 4, 4, 4, 12, 12, 4, 6, 8, 4, 4, 12, 4, 6, 6, 5, 6, 6, 8, 14, 8, 12, 4, 4, 6, 10, 4, 4, 4, 10, 4, 4, 8, 3, 3, 4, 6, 6, 6, 8, 5, 4, 4, 6, 8, 4, 6, 6, 8, 3, 4, 4, 18, 4, 6, 6, 6, 6, 13, 11, 6, 10, 4, 8, 10, 10, 4, 4, 6, 6, 4, 8, 4, 8, 8, 8, 6, 6, 8, 6, 3, 6, 8, 2, 4, 4, 4, 6, 10, 8, 10, 12, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 2, 14, 6, 6, 4, 6, 12, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 4, 4, 6, 6, 4, 4, 4, 6, 6, 8, 2, 8, 6, 6, 6, 6, 4, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 4, 12, 6, 6, 6, 4, 4, 4, 4, 6, 6, 8, 6, 6, 6, 0}

    Dim Array_position_3() = {6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 6, 4, 4, 10, 4, 6, 4, 6, 4, 6, 4, 4, 4, 8, 3, 3, 4, 4, 8, 8, 6, 4, 4, 4, 4, 6, 4, 4, 6, 4, 4, 2, 4, 4, 2, 6, 6, 6, 6, 6, 3, 3, 8, 8, 6, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 3, 3, 3, 3, 12, 12, 4, 8, 4, 4, 4, 8, 8, 8, 3, 3, 8, 12, 3, 6, 6, 6, 6, 6, 6, 6, 2, 4, 4, 6, 8, 4, 6, 6, 4, 4, 4, 10, 4, 2, 8, 6, 4, 6, 4, 8, 8, 4, 10, 4, 4, 6, 6, 8, 6, 2, 2, 6, 6, 8, 8, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 6, 6, 2, 2, 2, 3, 4, 4, 4, 4, 2, 2, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 6, 6, 4, 4, 4, 16, 6, 8, 8, 3, 3, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 8, 8, 8, 3, 3, 3, 8, 3, 8, 8, 4, 4, 4, 4, 12, 4, 4, 4, 4, 6, 12, 4, 6, 6, 4, 4, 4, 10, 4, 4, 4, 4, 6, 8, 8, 8, 8, 8, 4, 8, 4, 3, 14, 4, 4, 6, 16, 6, 4, 2, 6, 6, 6, 6, 6, 8, 6, 4, 6, 4, 6, 4, 4, 4, 4, 8, 4, 8, 4, 8, 4, 10, 3, 8, 4, 8, 4, 4, 6, 6, 6, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 8, 8, 8, 6, 6, 6, 8, 6, 8, 8, 6, 4, 4, 6, 6, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 14, 8, 6, 4, 4, 8, 8, 4, 6, 8, 8, 8, 8, 8, 6, 6, 8, 6, 6, 8, 6, 6, 6, 2, 6, 6, 8, 6, 6, 8, 14, 6, 6, 4, 6, 7, 7, 0}

    Dim Array_position_polygon8(,) As Integer


    '建物の構造　０⇒木造　１⇒防火　２⇒耐火　
    Dim Buildingstructure(maxID) As Integer



    '建物の盛期火災過程開始時刻
    Dim HighFireProcessTime(maxID) As Integer


    Dim DiclineTime(maxID) As Integer

    Dim max_firetime As Integer
    Dim max_syoukatime As Integer
    Dim gameovertime As Integer = 999
    Dim gameovertime2 As Integer = -100



    '火災情報
    '０　　　建物id　　　 道路⇒０
    Dim ArrayID(tate - 1, yoko - 1) As Integer


    '２　　　　燃焼時
    Dim ArrayTime_fire(tate - 1, yoko - 1) As Integer
    '消火開始時間
    Dim ArrayTime_syoukastart(tate - 1, yoko - 1) As Integer
    Dim arraytime_break2(maxID) As Integer

    '１　　　　　計算前⇒０　フラッシュオーバーまで計算済み⇒１　盛期火災過程まで計算済⇒２　消火中⇒３　消火後⇒４　 破壊⇒5
    Dim ArrayState(tate - 1, yoko - 1) As Integer

    Dim arraystate2(tate - 1, yoko - 1) As Integer
    Dim arraystate3(tate - 1, yoko - 1) As Integer

    Dim ArrayStateRight(tate - 1, yoko - 1) As Boolean
    Dim ArrayStateLeft(tate - 1, yoko - 1) As Boolean
    Dim ArrayStateUp(tate - 1, yoko - 1) As Boolean
    Dim ArrayStateDown(tate - 1, yoko - 1) As Boolean
    '１　　　　　計算前⇒０　フラッシュオーバーまで計算済み⇒１　盛期火災過程まで計算済⇒２ 
    Dim ArrayStateNow(tate - 1, yoko - 1) As Integer
    Dim ArrayStatesyouka(tate - 1, yoko - 1) As Integer

    '現在の家の状況　0⇒通常　１⇒初期火災過程・フラッシュオーバー過程　２⇒盛期火災過程　３⇒消火済み　４⇒壊された　５⇒家がない
    Dim Result(maxID) As Integer
    Dim record_result(1000, maxID) As Integer

    'Dim MaxCell(maxID) As Integer
    Dim MaxCell() As Integer = {0, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36, 24, 24, 24, 60, 8, 12, 16, 24, 32, 48, 24, 24, 24, 48, 24, 24, 32, 32, 64, 48, 48, 32, 32, 32, 48, 24, 16, 16, 36, 16, 16, 20, 16, 16, 8, 60, 60, 24, 18, 42, 24, 24, 32, 48, 36, 48, 48, 32, 32, 16, 120, 32, 16, 24, 48, 24, 18, 24, 18, 48, 72, 16, 64, 32, 24, 32, 48, 48, 32, 24, 24, 80, 36, 9, 60, 24, 36, 24, 24, 48, 24, 40, 16, 16, 24, 48, 32, 18, 18, 40, 40, 20, 120, 32, 16, 80, 36, 24, 24, 32, 32, 32, 40, 40, 24, 48, 48, 24, 32, 24, 12, 12, 24, 84, 64, 32, 32, 24, 16, 48, 32, 32, 64, 16, 16, 24, 24, 24, 12, 4, 4, 24, 16, 24, 24, 48, 16, 16, 24, 48, 18, 18, 32, 56, 32, 16, 32, 40, 48, 32, 64, 48, 24, 36, 24, 48, 48, 96, 36, 32, 48, 18, 18, 32, 48, 16, 16, 32, 32, 32, 48, 32, 32, 48, 32, 32, 16, 16, 16, 16, 48, 72, 16, 24, 64, 32, 32, 36, 12, 18, 48, 15, 48, 48, 32, 56, 32, 48, 48, 16, 24, 40, 16, 24, 48, 40, 24, 24, 32, 12, 12, 40, 24, 24, 24, 32, 30, 32, 32, 48, 64, 32, 24, 48, 32, 9, 56, 16, 72, 24, 96, 36, 24, 12, 78, 66, 36, 60, 24, 64, 60, 40, 24, 16, 36, 24, 16, 32, 16, 64, 32, 64, 24, 48, 32, 60, 9, 48, 32, 16, 16, 16, 24, 36, 60, 16, 20, 24, 32, 66, 120, 60, 72, 68, 44, 104, 28, 64, 64, 104, 64, 72, 128, 60, 28, 80, 125, 72, 84, 72, 108, 88, 72, 88, 120, 84, 152, 96, 68, 48, 72, 128, 52, 96, 45, 112, 56, 66, 52, 96, 80, 39, 104, 32, 68, 44, 32, 28, 28, 64, 39, 72, 84, 108, 36, 36, 36, 36, 36, 36, 36, 28, 48, 48, 48, 48, 16, 84, 92, 36, 36, 32, 80, 36, 96, 48, 36, 48, 16, 24, 36, 48, 24, 56, 24, 36, 36, 36, 48, 32, 24, 24, 36, 36, 32, 56, 32, 64, 64, 36, 24, 32, 16, 64, 24, 36, 132, 48, 48, 80, 32, 48, 48, 36, 36, 16, 36, 36, 48, 36, 36, 24, 80, 24, 36, 36, 48, 24, 24, 32, 56, 56, 36, 92, 56, 36, 68, 32, 36, 42, 42, 36}
    Dim count2 As Integer
    Dim maxTime As Integer

    '風の調整
    Dim vv As Integer = 1


    Dim input_path As String

    Dim IP_parent As String
    Dim IP_child1 As String
    Dim ip_child2 As String

    Dim localEP2 As String
    Dim otherEP1 As String
    Dim otherEP2 As String


    '-----------------------------------------------------------------------カーソルの受信-----------------------------------------------------------------------------

    Private Sub recieve_cursol_1()
        If udpClient16 IsNot Nothing Then
            Return
        End If

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2009))
        udpClient16 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient16.BeginReceive(AddressOf ReceiveCallback10, udpClient16)
    End Sub
    Public Sub ReceiveCallback10(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)


        Dim hairetu() As String
        hairetu = rcvMsg.Split(",")

        x1_cl = Integer.Parse(hairetu(0))
        y1_cl = Integer.Parse(hairetu(1))
        x1_cl_sq = Integer.Parse(hairetu(2))
        y1_cl_sq = Integer.Parse(hairetu(3))
        Invoke(New SetLabelTextDelegate24(AddressOf SetLabelText24))

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback10, udp)
    End Sub


    Private Sub recieve_cursol_2()
        If udpClient17 IsNot Nothing Then
            Return
        End If

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2019))
        udpClient17 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient17.BeginReceive(AddressOf ReceiveCallback11, udpClient17)
    End Sub
    Public Sub ReceiveCallback11(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)


        Dim hairetu() As String
        hairetu = rcvMsg.Split(",")

        x1_c2 = Integer.Parse(hairetu(0))
        y1_c2 = Integer.Parse(hairetu(1))
        x1_c2_sq = Integer.Parse(hairetu(2))
        y1_c2_sq = Integer.Parse(hairetu(3))
        Invoke(New SetLabelTextDelegate24(AddressOf SetLabelText26))

        Console.WriteLine("あああ")

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback11, udp)
    End Sub







    Dim x1_cl As Integer
    Dim y1_cl As Integer
    Dim x1_c2 As Integer
    Dim y1_c2 As Integer
    Dim x1_cl_sq As Integer
    Dim y1_cl_sq As Integer
    Dim x1_c2_sq As Integer
    Dim y1_c2_sq As Integer
    Dim canvas3 As New Bitmap(210, 230)
    Dim g9 As Graphics = Graphics.FromImage(canvas3)


    '------------------------------------------------------------------------終了の合図の受信------------------------------------------------------------------------
    Private Sub recieve_finish()
        If udpClient15 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2042))
        udpClient15 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient15.BeginReceive(AddressOf ReceiveCallback9, udpClient15)
    End Sub
    Public Sub ReceiveCallback9(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)

        Invoke(New SetLabelTextDelegate23(AddressOf SetLabelText23))

        Console.WriteLine("いいい")
        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback9, udp)
    End Sub





    '------------------------------------------------------------------------”操作リクエスト”を受信する(親PCだけ)------------------------------------------------------------------------

    Private Sub request_operation_recieve_wall()
        If udpClient12 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2024))
        udpClient12 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient12.BeginReceive(AddressOf ReceiveCallback6, udpClient12)
    End Sub

    Public Sub ReceiveCallback6(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)


        'count = Integer.Parse(rcvMsg)
        Console.WriteLine("＜バリア＞request, recieve")

        If number_wall > 0 Then
            number_wall -= 1
            '子PCに許可(と実行命令)を下す
            Send_permit_wall(rcvMsg)


            '親PCのレコードに代入
            Dim hairetu() As String
            hairetu = rcvMsg.Split(",")
            'request_wall(count, i_wall2, j_wall2, TimeLug_wall2, tatekabe, zurasi, nagasa, localEP2)

            record_wall(count_wall, 0) = Integer.Parse(hairetu(0))
            '壁の位置
            record_wall(count_wall, 1) = Integer.Parse(hairetu(1))
            record_wall(count_wall, 2) = Integer.Parse(hairetu(2))

            record_wall(count_wall, 3) = Integer.Parse(hairetu(3))

            '縦棒ならば
            If Boolean.Parse(hairetu(4)) = True Then
                record_wall(count_wall, 4) = 1

                '横壁ならば
            Else
                record_wall(count_wall, 4) = 2
            End If

            '左に建物ならば(上に建物)
            If Integer.Parse(hairetu(5)) > 0 Then
                record_wall(count_wall, 5) = 1
                '右に建物ならば(下に建物)
            Else
                record_wall(count_wall, 5) = 2
            End If

            record_wall(count_wall, 6) = Integer.Parse(hairetu(6))


            record_wall(count_wall, 9) = hairetu(7)
            count_wall += 1
        Else
            Console.WriteLine("拒否")
        End If

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback6, udp)
    End Sub





    Private Sub request_operation_recieve_car()
        If udpClient7 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2014))
        udpClient7 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient7.BeginReceive(AddressOf ReceiveCallback5, udpClient7)
    End Sub

    Public Sub ReceiveCallback5(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
           DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)


        'count = Integer.Parse(rcvMsg)
        Console.WriteLine("＜放水＞request, recieve")

        If number_car > 0 Then
            number_car -= 1
            '子PCに許可(と実行命令)を下す
            Send_permit_car(rcvMsg)


            '親PCのレコードに代入
            Dim hairetu() As String
            hairetu = rcvMsg.Split(",")

            '
            i_car_recieve = Integer.Parse(hairetu(1))
            j_car_recieve = Integer.Parse(hairetu(2))

            If Integer.Parse(hairetu(3)) = 1 Then
                g11.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g11.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2 + q, i_car_recieve + q \ 2, 2, q)
            ElseIf Integer.Parse(hairetu(3)) = 2 Then
                g11.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g11.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2 - 2, i_car_recieve + q \ 2, 2, q)
            ElseIf Integer.Parse(hairetu(3)) = 3 Then
                g11.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g11.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2, i_car_recieve + q \ 2 + q, q, 2)
            ElseIf Integer.Parse(hairetu(3)) = 4 Then
                g11.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g11.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2, i_car_recieve + q \ 2 - 2, q, 2)
            End If

            '右側の建物のID
            record_car(count_car, 0) = Integer.Parse(hairetu(0))
            record_car(count_car, 1) = Integer.Parse(hairetu(1))
            record_car(count_car, 2) = Integer.Parse(hairetu(2))
            '消防車の右に建物がある
            record_car(count_car, 3) = Integer.Parse(hairetu(3))

            record_car(count_car, 4) = Integer.Parse(hairetu(4))
            record_car(count_car, 5) = Integer.Parse(hairetu(5))


            '消火開始時間
            record_car(count_car, 6) = Integer.Parse(hairetu(6))

            record_car(count_car, 7) = hairetu(7)


            count_car += 1
        Else
            Console.WriteLine("拒否")
        End If

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback5, udp)
    End Sub


    Dim i_car_recieve
    Dim j_car_recieve



    Private Sub request_operation_recieve_break()
        If udpClient3 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2004))
        udpClient3 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient3.BeginReceive(AddressOf ReceiveCallback2, udpClient3)
    End Sub

    Public Sub ReceiveCallback2(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
            DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)


        'count = Integer.Parse(rcvMsg)
        Console.WriteLine("＜破壊＞request, recieve")

        If number_break > 0 Then
            '子PCに許可(と実行命令)を下す
            Send_permit_break(rcvMsg)

            number_break -= 1
            '親PCのレコードに代入
            Dim hairetu() As String
            hairetu = rcvMsg.Split(",")



            record_break(count_break, 0) = Integer.Parse(hairetu(0))
            record_break(count_break, 1) = Integer.Parse(hairetu(1))

            '破壊までのタイムラグを決める
            If MaxCell(Integer.Parse(hairetu(1))) > 0 Then
                If MaxCell(Integer.Parse(hairetu(1))) < 50 Then
                    record_break(count_break, 2) = TimeLug_break2(0)
                ElseIf MaxCell(Integer.Parse(hairetu(1))) < 100 Then
                    record_break(count_break, 2) = TimeLug_break2(1)
                Else
                    record_break(count_break, 2) = TimeLug_break2(2)
                End If
            End If
            Console.WriteLine("破壊のタイムラグ；" & record_break(count_break, 2))
            record_break(count_break, 5) = hairetu(2)
            count_break += 1

            'calculation()



            '延焼の状態の色
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If ArrayID(i, j) = Integer.Parse(hairetu(1)) Then

                        g10.FillRectangle(Brushes.PaleGoldenrod, j * q, i * q, q, q)

                    End If
                Next
            Next
        Else
            Console.WriteLine("拒否")
        End If


        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback2, udp)
    End Sub

    '------------------------------------------------------------------------操作リクエストの”許可”を受信する(全てのPC)------------------------------------------------------------------------
    Private Sub permit_recieve_wall()
        If udpClient13 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2025))
        udpClient13 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient13.BeginReceive(AddressOf ReceiveCallback7, udpClient13)
    End Sub

    Public Sub ReceiveCallback7(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
            DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)

        Console.WriteLine("＜バリア＞permit, recieve")

        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)
        Dim hairetu() As String
        hairetu = rcvMsg.Split(",")

        If hairetu(0) = "ok" Then

            record_wall(count_wall, 0) = Integer.Parse(hairetu(1))
            '壁の位置
            record_wall(count_wall, 1) = Integer.Parse(hairetu(2))
            record_wall(count_wall, 2) = Integer.Parse(hairetu(3))

            record_wall(count_wall, 3) = Integer.Parse(hairetu(4))

            '縦棒ならば
            If Boolean.Parse(hairetu(5)) = True Then
                record_wall(count_wall, 4) = 1

                '横壁ならば
            Else
                record_wall(count_wall, 4) = 2
            End If

            '左に建物ならば(上に建物)
            If Integer.Parse(hairetu(6)) > 0 Then
                record_wall(count_wall, 5) = 1
                '右に建物ならば(下に建物)
            Else
                record_wall(count_wall, 5) = 2
            End If

            record_wall(count_wall, 6) = Integer.Parse(hairetu(7))


            record_wall(count_wall, 9) = hairetu(8)


            count_wall += 1
            number_wall -= 1

        End If


        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback7, udp)
    End Sub









    Private Sub permit_recieve_car()
        If udpClient8 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2015))
        udpClient8 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient8.BeginReceive(AddressOf ReceiveCallback4, udpClient8)
    End Sub

    Public Sub ReceiveCallback4(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
            DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)

        Console.WriteLine("＜放水＞permit, recieve")

        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)
        Dim hairetu() As String
        hairetu = rcvMsg.Split(",")

        If hairetu(0) = "ok" Then




            i_car_recieve = Integer.Parse(hairetu(2))
            j_car_recieve = Integer.Parse(hairetu(3))


            If Integer.Parse(hairetu(4)) = 1 Then
                g12.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g12.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2 + q, i_car_recieve + q \ 2, 2, q)
            ElseIf Integer.Parse(hairetu(4)) = 2 Then
                g12.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g12.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2 - 2, i_car_recieve + q \ 2, 2, q)
            ElseIf Integer.Parse(hairetu(4)) = 3 Then
                g12.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g12.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2, i_car_recieve + q \ 2 + q, q, 2)
            ElseIf Integer.Parse(hairetu(4)) = 4 Then
                g12.FillRectangle(Brushes.Orange, j_car_recieve + q \ 2, i_car_recieve + q \ 2, q, q)
                g12.FillRectangle(Brushes.Blue, j_car_recieve + q \ 2, i_car_recieve + q \ 2 - 2, q, 2)
            End If

            '右側の建物のID
            record_car(count_car, 0) = Integer.Parse(hairetu(1))
            record_car(count_car, 1) = Integer.Parse(hairetu(2))
            record_car(count_car, 2) = Integer.Parse(hairetu(3))
            '消防車の右に建物がある
            record_car(count_car, 3) = Integer.Parse(hairetu(4))

            record_car(count_car, 4) = Integer.Parse(hairetu(5))
            record_car(count_car, 5) = Integer.Parse(hairetu(6))


            '消火開始時間
            record_car(count_car, 6) = Integer.Parse(hairetu(7))

            record_car(count_car, 7) = hairetu(8)



            number_car -= 1
            count_car += 1


        End If


        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback4, udp)
    End Sub


    Private Sub permit_recieve_break()
        If udpClient5 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2005))
        udpClient5 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient5.BeginReceive(AddressOf ReceiveCallback3, udpClient5)
    End Sub

    Public Sub ReceiveCallback3(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
            DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)
        Console.WriteLine("＜破壊＞permit, recieve")
        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)
        Dim hairetu() As String
        hairetu = rcvMsg.Split(",")

        If hairetu(0) = "ok" Then

            record_break(count_break, 0) = Integer.Parse(hairetu(1))
            record_break(count_break, 1) = Integer.Parse(hairetu(2))

            If MaxCell(Integer.Parse(hairetu(2))) > 0 Then
                If MaxCell(Integer.Parse(hairetu(2))) < 50 Then
                    record_break(count_break, 2) = TimeLug_break2(0)
                ElseIf MaxCell(Integer.Parse(hairetu(2))) < 100 Then
                    record_break(count_break, 2) = TimeLug_break2(1)
                Else
                    record_break(count_break, 2) = TimeLug_break2(2)
                End If
            End If
            Console.WriteLine("破壊のタイムラグ；" & record_break(count_break, 2))
            record_break(count_break, 5) = hairetu(3)
            count_break += 1
            number_break -= 1

            '延焼の状態の色
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If ArrayID(i, j) = Integer.Parse(hairetu(2)) Then

                        g10.FillRectangle(Brushes.PaleGoldenrod, j * q, i * q, q, q)

                    End If
                Next
            Next

        End If

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback3, udp)
    End Sub







    Private Sub Recieve_count()

        If udpClient2 IsNot Nothing Then
            Return
        End If
        'DirectCast(sender).Enabled = False

        'UdpClientを作成し、指定したポート番号にバインドする
        Dim localEP As New System.Net.IPEndPoint(
                System.Net.IPAddress.Any, Integer.Parse(2003))
        udpClient2 = New System.Net.Sockets.UdpClient(localEP)
        '非同期的なデータ受信を開始する
        udpClient2.BeginReceive(AddressOf ReceiveCallback, udpClient2)

    End Sub



    'データを受信した時
    Public Sub ReceiveCallback(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
            DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期受信を終了する
        Dim remoteEP As System.Net.IPEndPoint = Nothing
        Dim rcvBytes As Byte()
        Try
            rcvBytes = udp.EndReceive(ar, remoteEP)

        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("受信エラー({0}/{1})", ex.Message, ex.ErrorCode)
            Return
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
            Return
        End Try

        'データを文字列に変換する
        Dim rcvMsg As String = System.Text.Encoding.UTF8.GetString(rcvBytes)

        '受信したデータと送信者の情報をRichTextBoxに表示する
        Dim displayMsg As String = String.Format("[{0} ({1})] > {2}",
            remoteEP.Address, remoteEP.Port, rcvMsg)

        Console.WriteLine(rcvMsg)

        count_renew()

        '再びデータ受信を開始する
        udp.BeginReceive(AddressOf ReceiveCallback, udp)
    End Sub
    Dim 親 As Boolean = False
    Dim 子1 As Boolean = False
    Dim 子2 As Boolean = False



    Private Sub Form1＿Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        Label47.Text = "●" & スタート.TextBox5.Text
        Label50.Text = "●" & スタート.TextBox4.Text

        Label1.Text = "●" & スタート.TextBox5.Text
        Label16.Text = "●" & スタート.TextBox4.Text

        g9.DrawRectangle(Pens.Black, 10, 10, 150, 60)
        g9.DrawRectangle(Pens.Black, 10, 80, 150, 60)
        g9.DrawRectangle(Pens.Black, 10, 150, 150, 60)
        g9.DrawRectangle(Pens.Black, 170, 10, 30, 200)
        PictureBox7.Image = canvas3


        Label2.Parent = PictureBox7
        Label19.Parent = PictureBox7
        Label12.Parent = PictureBox7
        Label20.Parent = PictureBox7
        Label4.Parent = PictureBox7
        Label21.Parent = PictureBox7

        Label2.Top = 25
        Label19.Top = 25

        Label12.Top = 95
        Label20.Top = 95


        Label4.Top = 165
        Label21.Top = 165


        IP_parent = スタート.TextBox1.Text
        IP_child1 = スタート.TextBox2.Text
        ip_child2 = スタート.TextBox3.Text

        'IPアドレス入力
        If スタート.親PC.Checked = True Then
            localEP2 = IP_parent
            otherEP1 = IP_child1
            otherEP2 = ip_child2
            親 = True

        ElseIf スタート.子PC1.Checked = True Then
            localEP2 = IP_child1
            otherEP2 = IP_parent
            otherEP1 = ip_child2
            子1 = True
        ElseIf スタート.子PC2.Checked = True Then
            localEP2 = ip_child2
            otherEP1 = IP_parent
            otherEP2 = IP_child1
            子2 = True
        End If

        Console.WriteLine("親PC: " & IP_parent)
        Console.WriteLine("子PC1: " & IP_child1)
        Console.WriteLine("子PC2: " & ip_child2)

        Console.WriteLine("localEP: " & localEP2)


        'If スタート.親PC.Checked = True Then
        '    実験開始.Visible = True
        'Else
        '    実験開始.Visible = False
        'End If


        'ファイルのパスを入力
        'Output_path = スタート.FolderBrowserDialog1.SelectedPath
        'input_path = スタート.FolderBrowserDialog2.SelectedPath


        Output_path = スタート.output_path
        input_path = スタート.input_path

        '建物の構造を入力
        For i = 0 To UBound(Buildingstructure)
            If i Mod 3 = 0 Then
                '木造
                Buildingstructure(i) = 0
            ElseIf i Mod 3 = 1 Then
                '防火
                Buildingstructure(i) = 1
            ElseIf i Mod 3 = 2 Then
                '耐火
                Buildingstructure(i) = 2
            End If

        Next


        施設A.Visible = False
        施設B.Visible = False

        施設C.Visible = False
        施設D.Visible = False

        施設E.Visible = False
        施設F.Visible = False
        PictureBox2.Visible = False

        Format()

        '何秒後に壊れるか
        TimeLug_wall = 5
        TimeLug_wall2 = 5
        TimeLug_break(0) = 10
        TimeLug_break(1) = 15
        TimeLug_break(2) = 20
        TimeLug_break2(0) = 10
        TimeLug_break2(1) = 15
        TimeLug_break2(2) = 20
        flag_sinario = 0

        'time_douzitahatu = -999
        start_kokatu = -999
        end_kokatu = -999
        start_kabekowasu = -999
        end_kabekowasu = -999


        '街情報をinput
        Dim workbook1 As IWorkbook = WorkbookFactory.Create(スタート.input_path & "\街.xlsx")





        'ArrayIDの代入
        Dim worksheet1 As ISheet = workbook1.GetSheetAt(0)
        Dim lastRow1 As Integer = worksheet1.LastRowNum
        Dim row1 As IRow
        Dim cell1 As ICell
        For i = 0 To lastRow1
            row1 = worksheet1.GetRow(i)
            For j = 0 To row1.LastCellNum - 1
                cell1 = row1.GetCell(j)
                ArrayID(i, j) = Integer.Parse(cell1.ToString)
            Next
        Next


        'コマ座標の代入
        Dim worksheet2 As ISheet = workbook1.GetSheetAt(1)
        Dim lastRow2 As Integer = worksheet2.LastRowNum
        Dim row2 As IRow
        Dim cell2 As ICell
        Console.WriteLine("xx")
        For i = 0 To 1023
            row2 = worksheet2.GetRow(i)
            cell2 = row2.GetCell(0)
            xx(i) = Integer.Parse(cell2.ToString)
            Console.WriteLine(xx(i))
        Next

        Dim worksheet3 As ISheet = workbook1.GetSheetAt(2)
        Dim lastRow3 As Integer = worksheet3.LastRowNum
        Dim row3 As IRow
        Dim cell3 As ICell
        For i = 0 To 1023
            row3 = worksheet3.GetRow(i)
            cell3 = row3.GetCell(0)
            yy(i) = Integer.Parse(cell3.ToString)
        Next

        '初めに出火する建物の代入
        Dim worksheet4 As ISheet = workbook1.GetSheetAt(3)
        Dim lastRow4 As Integer = worksheet4.LastRowNum

        id0 = Integer.Parse(worksheet4.GetRow(0).GetCell(0).ToString)
        id_douzitahatu = Integer.Parse(worksheet4.GetRow(1).GetCell(0).ToString)
        id_douzitahatu2 = Integer.Parse(worksheet4.GetRow(1).GetCell(1).ToString)

        施設A_id = Integer.Parse(worksheet4.GetRow(2).GetCell(0).ToString)
        施設A.Location = New Point(Integer.Parse(worksheet4.GetRow(2).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(2).GetCell(2).ToString))

        施設B_id = Integer.Parse(worksheet4.GetRow(3).GetCell(0).ToString)
        施設B.Location = New Point(Integer.Parse(worksheet4.GetRow(3).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(3).GetCell(2).ToString))

        施設C_id = Integer.Parse(worksheet4.GetRow(4).GetCell(0).ToString)
        施設C.Location = New Point(Integer.Parse(worksheet4.GetRow(4).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(4).GetCell(2).ToString))

        施設D_id = Integer.Parse(worksheet4.GetRow(5).GetCell(0).ToString)
        施設D.Location = New Point(Integer.Parse(worksheet4.GetRow(5).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(5).GetCell(2).ToString))

        施設E_id = Integer.Parse(worksheet4.GetRow(6).GetCell(0).ToString)
        施設E.Location = New Point(Integer.Parse(worksheet4.GetRow(6).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(6).GetCell(2).ToString))

        施設F_id = Integer.Parse(worksheet4.GetRow(7).GetCell(0).ToString)
        施設F.Location = New Point(Integer.Parse(worksheet4.GetRow(7).GetCell(1).ToString), Integer.Parse(worksheet4.GetRow(7).GetCell(2).ToString))

        If worksheet4.GetRow(8).GetCell(0).ToString <> "" Then
            time_douzitahatu = Integer.Parse(worksheet4.GetRow(8).GetCell(0).ToString)
        Else
            time_douzitahatu = -999
        End If
        If worksheet4.GetRow(8).GetCell(1).ToString <> "" Then
            time_douzitahatu2 = Integer.Parse(worksheet4.GetRow(8).GetCell(1).ToString)
        Else
            time_douzitahatu2 = -999
        End If


        time_sinario = Integer.Parse(worksheet4.GetRow(9).GetCell(0).ToString)
        end_sinario = Integer.Parse(worksheet4.GetRow(9).GetCell(1).ToString)

        time_sinario2 = Integer.Parse(worksheet4.GetRow(10).GetCell(0).ToString)

        workbook1.Close()

        'Label1の親コントロールをPictureBox1とす
        PictureBox1.Controls.Add(施設B)
        'Label1の位置をPictureBox1内の位置に変更する
        施設B.Top = 施設B.Top - PictureBox1.Top
        施設B.Left = 施設B.Left - PictureBox1.Left

        'Label1の親コントロールをPictureBox1とする
        PictureBox1.Controls.Add(施設A)
        'Label1の位置をPictureBox1内の位置に変更する
        施設A.Top = 施設A.Top - PictureBox1.Top
        施設A.Left = 施設A.Left - PictureBox1.Left

        'Label1の親コントロールをPictureBox1とする
        PictureBox1.Controls.Add(施設C)
        'Label1の位置をPictureBox1内の位置に変更する
        施設C.Top = 施設C.Top - PictureBox1.Top
        施設C.Left = 施設C.Left - PictureBox1.Left

        'Label1の親コントロールをPictureBox1とする
        PictureBox1.Controls.Add(施設D)
        'Label1の位置をPictureBox1内の位置に変更する
        施設D.Top = 施設D.Top - PictureBox1.Top
        施設D.Left = 施設D.Left - PictureBox1.Left

        'Label1の親コントロールをPictureBox1とする
        PictureBox1.Controls.Add(施設E)
        'Label1の位置をPictureBox1内の位置に変更する
        施設E.Top = 施設E.Top - PictureBox1.Top
        施設E.Left = 施設E.Left - PictureBox1.Left

        'Label1の親コントロールをPictureBox1とする
        PictureBox1.Controls.Add(施設F)
        'Label1の位置をPictureBox1内の位置に変更する
        施設F.Top = 施設F.Top - PictureBox1.Top
        施設F.Left = 施設F.Left - PictureBox1.Left

        'パラメータ---------------------------------------------------------------------------------
        For t = 0 To max_wind
            WindTime_game(t) = (t + 1) * 5
        Next




        '30秒に1回リソース
        '30秒×50くらいで、だいたい1500秒
        'リソース数入力
        For n = 0 To 48
            resorce(n, 0) = 30 * (n + 2)
            If n Mod 3 = 0 Then
                resorce(n, 1) = 3
                resorce(n, 2) = 3
                resorce(n, 3) = 4
            End If
            If n Mod 3 = 1 Then
                resorce(n, 1) = 3
                resorce(n, 2) = 4
                resorce(n, 3) = 3
            End If
            If n Mod 3 = 2 Then
                resorce(n, 1) = 4
                resorce(n, 2) = 3
                resorce(n, 3) = 3
            End If
        Next



        For k = 0 To max_wind
            WindSpeed(k) = wind_speed3(k) + スタート.windspeed_average - 3
        Next



        If time_sinario2 > 0 Then

            '右⇒左
            If スタート.winddirection_average = "右左" Then
                For i = 0 To (time_sinario2 \ 5) - 1
                    WindDirection(i) = wind_direction_right(i)
                Next
                For i = time_sinario2 \ 5 To max_wind
                    WindDirection(i) = wind_direction_left(i)
                Next
            End If

            '左⇒右
            If スタート.winddirection_average = "左右" Then
                For i = 0 To (time_sinario2 \ 5) - 1
                    WindDirection(i) = wind_direction_left(i)
                Next
                For i = time_sinario2 \ 5 To max_wind
                    WindDirection(i) = wind_direction_right(i)
                Next
            End If

        Else

            '右
            If スタート.winddirection_average = "右" Then
                For i = 0 To max_wind
                    WindDirection(i) = wind_direction_right(i)
                Next
            End If

            '左
            If スタート.winddirection_average = "左" Then
                For i = 0 To max_wind
                    WindDirection(i) = wind_direction_left(i)
                Next
            End If

        End If



        '渋滞
        Dim rrr = 0
        If スタート.event_name = "消防車の遅れ" Then
            For n = (time_sinario \ 30) - 1 To time_sinario \ 30 + end_sinario \ 30 - 1
                'If rrr = 0 Then
                '    resorce(n, 1) = 0
                '    rrr = 1
                'Else
                resorce(n, 1) = 1
                '    rrr = 0
                'End If
            Next
            start_zyuutai = time_sinario
        End If

        ''リソースの遅れ
        'Dim rr = 0
        'If スタート.event_name = "材料の遅れ" Then
        '    For n = (time_sinario \ 30) To time_sinario \ 30 + end_sinario \ 30 - 1
        '        If rr = 0 Then
        '            resorce(n, 2) = 0
        '            resorce(n, 3) = 0
        '            rr = 1
        '        Else
        '            resorce(n, 2) = 1
        '            resorce(n, 3) = 1
        '            rr = 0
        '        End If
        '    Next
        '    start_okure = time_douzitahatu
        'End If




        'パラメータ---------------------------------------------------------------------------------
        'Console.WriteLine("これ→" & UBound(sikaku_total2))

        Dim asdf = 0
        For i = 0 To UBound(sikaku_total)



            sikaku_total(i) = sikaku_total2(i Mod number_sikaku) + asdf
            'Console.WriteLine(sikaku_total(i))

            If (i + 1) Mod number_sikaku = 0 Then
                asdf += maxID / 16
            End If
        Next

        sw2.Stop()
        Console.WriteLine("①" & sw2.ElapsedMilliseconds)

        sw2.Reset()
        sw2.Start()


        For s = 0 To UBound(Array_position)
            Array_position(s, 0) = Array_position_0(s)
            Array_position(s, 1) = Array_position_1(s)
            Array_position(s, 2) = Array_position_2(s)
            Array_position(s, 3) = Array_position_3(s)
        Next



        sw2.Stop()
        Console.WriteLine("壁の位置→" & sw2.ElapsedMilliseconds)
        sw2.Reset()
        sw2.Start()

        '延焼時間を代入
        For n = 0 To max_wind
            v = WindSpeed(n)
            WindDicision(n)
        Next



        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                ArrayTime_fire(i, j) = 9999
                ArrayTime_syoukastart(i, j) = 9999
                ArrayState(i, j) = 0
                arraystate2(i, j) = 0
                ArrayStateRight(i, j) = 0
                ArrayStateLeft(i, j) = 0
                ArrayStateUp(i, j) = 0
                ArrayStateDown(i, j) = 0
                ArrayStatesyouka(i, j) = 0
            Next
        Next


        For id2 = 0 To maxID
            Result(id2) = 0
            HighFireProcessTime(id2) = 9999
            DiclineTime(id2) = -10
            count_seikiID(id2) = 0
            arraytime_break2(id2) = 9999
        Next

        sw2.Stop()
        Console.WriteLine("残り分→" & sw2.ElapsedMilliseconds)
        sw2.Reset()
        sw2.Start()



        '壁情報を代入
        Dim sroppai As New StreamReader(input_path & "\info_wall_tate.csv", System.Text.Encoding.GetEncoding("shift_jis"))
        toriaezu = sroppai.ReadToEnd()
        Dim toriaezu2() As String = toriaezu.split(","c)

        Dim count_kokoko = 0
        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                For a = 0 To 3
                    info_wall2(i, j, a) = Integer.Parse(toriaezu2(count_kokoko))
                    count_kokoko += 1
                Next
            Next
        Next


        Dim sroppaida As New StreamReader(input_path & "\info_wall_yoko.csv", System.Text.Encoding.GetEncoding("shift_jis"))
        toriaezu = sroppaida.ReadToEnd()
        Dim toriaezuda2() As String = toriaezu.split(","c)

        Dim count_kokoko2 = 0
        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                For a = 0 To 3
                    info_wall_yoko2(i, j, a) = Integer.Parse(toriaezuda2(count_kokoko2))
                    count_kokoko2 += 1
                Next
            Next
        Next


        Dim srmannko As New StreamReader(input_path & "\info_car.csv", System.Text.Encoding.GetEncoding("shift_jis"))
        toriaezu = srmannko.ReadToEnd()
        Dim toriaezuda3() As String = toriaezu.split(","c)

        Dim count_kokoko3 = 0
        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                For a = 0 To 6
                    info_car(i, j, a) = Integer.Parse(toriaezuda3(count_kokoko3))
                    count_kokoko3 += 1
                Next
            Next
        Next




        Byousya_takakkei()
        Byousya_takakkei_af()
        Byousya_sikaku()
        Byousya_sikaku2()
        Byousya_sikaku3()
        Byousya_sikaku4()
        Byousya_sikaku5()
        Byousya_sikaku6()

        PictureBox2.Visible = True


        施設A.Visible = True
        施設B.Visible = True
        施設C.Visible = True
        施設D.Visible = True
        施設E.Visible = True
        施設F.Visible = True


        Calculation_start()
        'Timer1.Interval = interval

        'Send()
        'Timer_2()
        Me.Opacity = 0
        Dim f As New Form5(Me)
        f.ShowDialog()
        'If スタート.親PC.Checked = False Then
        '    Recieve_douki()
        '    Timer_2()
        'End If


    End Sub










    Dim min_a
    Dim min_car_cal
    Dim min_i_car
    Dim min_j_car
    Dim count_car_imadakedayo = 0
    Dim info_car(tate - 1, yoko - 1, 6)
    Dim toriaezu
    Dim min_i_wall
    Dim min_j_wall
    Dim min_distance
    Dim min_i_wall2
    Dim min_j_wall2
    Dim min_distance2
    Dim info_wall(tate - 1, yoko - 1, 2)
    Dim info_wall2(tate - 1, yoko - 1, 3)

    Dim info_wall_yoko(tate - 1, yoko - 1, 2)
    Dim info_wall_yoko2(tate - 1, yoko - 1, 3)

    Private udpClient As System.Net.Sockets.UdpClient = Nothing
    Private udpClient2 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient3 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient4 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient5 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient6 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient7 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient8 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient9 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient10 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient11 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient12 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient13 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient14 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient15 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient16 As System.Net.Sockets.UdpClient = Nothing
    Private udpClient17 As System.Net.Sockets.UdpClient = Nothing

    'データを送信した時
    Private Sub SendCallback(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub

    Private Sub SendCallback2(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub



    Private Sub SendCallback3(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub

    Private Sub SendCallback4(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub


    Private Sub SendCallback5(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub


    Private Sub SendCallback6(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub


    Private Sub SendCallback7(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub

    Private Sub SendCallback8(ar As IAsyncResult)
        Dim udp As System.Net.Sockets.UdpClient =
        DirectCast(ar.AsyncState, System.Net.Sockets.UdpClient)

        '非同期送信を終了する
        Try
            udp.EndSend(ar)
        Catch ex As System.Net.Sockets.SocketException
            Console.WriteLine("送信エラー({0}/{1})", ex.Message, ex.ErrorCode)
        Catch ex As ObjectDisposedException
            'すでに閉じている時は終了
            Console.WriteLine("Socketは閉じられています。")
        End Try
    End Sub



    'フォームのFormClosedイベントハンドラ
    Private Sub Form1_FormClosed(sender As Object, e As FormClosedEventArgs) _
        Handles MyBase.FormClosed
        'UdpClientを閉じる
        If udpClient IsNot Nothing Then
            udpClient.Close()
        End If
    End Sub












    '--------------------------------------------------タスク開始の合図の送信-----------------------------------------------------------------
    Private Sub Send_cl()
        'データを送信する

        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(Cpos2.X.ToString & "," & Cpos2.Y.ToString & "," & scrol_x.ToString & "," & scrol_y.ToString)


        'UdpClientを作成する
        If udpClient Is Nothing Then
            udpClient = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient.BeginSend(sendBytes, sendBytes.Length, otherEP1,
        Integer.Parse(2009), AddressOf SendCallback, udpClient)
        udpClient.BeginSend(sendBytes, sendBytes.Length, otherEP2,
        Integer.Parse(2019), AddressOf SendCallback, udpClient)
        Console.WriteLine("<カーソル1>send")
    End Sub

    '--------------------------------------------------タスク終了の合図の送信-----------------------------------------------------------------


    Private Sub Send_finish()
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes("終了")


        'UdpClientを作成する
        If udpClient14 Is Nothing Then
            udpClient14 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient14.BeginSend(sendBytes, sendBytes.Length, IP_child1,
        Integer.Parse(2042), AddressOf SendCallback8, udpClient14)
        udpClient14.BeginSend(sendBytes, sendBytes.Length, ip_child2,
        Integer.Parse(2042), AddressOf SendCallback8, udpClient14)
        Console.WriteLine("<終了>send")
    End Sub









    '--------------------------------------------------時間更新の送信-----------------------------------------------------------------
    Private Sub Send_time(count)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(count)


        'UdpClientを作成する
        If udpClient Is Nothing Then
            udpClient = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient.BeginSend(sendBytes, sendBytes.Length, IP_child1,
        Integer.Parse(2003), AddressOf SendCallback, udpClient)
        udpClient.BeginSend(sendBytes, sendBytes.Length, ip_child2,
        Integer.Parse(2003), AddressOf SendCallback, udpClient)
        Console.WriteLine("<count>send")
    End Sub



    '----------------------------------------------操作リクエストを送る------------------------------------------------------------
    '破壊
    Private Sub request_break(count_break, id_break, IPaddress)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(count_break & "," & id_break & "," & IPaddress)


        'UdpClientを作成する
        If udpClient3 Is Nothing Then
            udpClient3 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient3.BeginSend(sendBytes, sendBytes.Length, IP_parent,
        Integer.Parse(2004), AddressOf SendCallback2, udpClient3)
        Console.WriteLine("<破壊>request, send")
    End Sub

    '放水
    Private Sub request_car(id, i_zahyou, j_zahyou, direction, i_car, j_car, count_start_syouka, IPaddress)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(id & "," & i_zahyou & "," & j_zahyou & "," & direction & "," & i_car & "," & j_car & "," & count_start_syouka & "," & IPaddress)


        'UdpClientを作成する
        If udpClient6 Is Nothing Then
            udpClient6 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient6.BeginSend(sendBytes, sendBytes.Length, IP_parent,
        Integer.Parse(2014), AddressOf SendCallback3, udpClient6)
        Console.WriteLine("<放水>request, send")
    End Sub


    'バリア
    Private Sub request_wall(count, i_wall2, j_wall2, TimeLug_wall2, tatekabe, zurasi, nagasa, IPaddress)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(count & "," & i_wall2 & "," & j_wall2 & "," & TimeLug_wall2 & "," & tatekabe & "," & zurasi & "," & nagasa & "," & IPaddress)


        'UdpClientを作成する
        If udpClient10 Is Nothing Then
            udpClient10 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient10.BeginSend(sendBytes, sendBytes.Length, IP_parent,
        Integer.Parse(2024), AddressOf SendCallback6, udpClient10)
        Console.WriteLine("<バリア>request, send")
    End Sub














    '-------------------------------------------操作リクエストに対する許可を送る(親PC)-----------------------------------------------------
    '破壊
    Private Sub Send_permit_break(a)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes("ok," & a)


        'UdpClientを作成する
        If udpClient4 Is Nothing Then
            udpClient4 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient4.BeginSend(sendBytes, sendBytes.Length, IP_child1,
        Integer.Parse(2005), AddressOf SendCallback4, udpClient4)
        udpClient4.BeginSend(sendBytes, sendBytes.Length, ip_child2,
        Integer.Parse(2005), AddressOf SendCallback4, udpClient4)
        Console.WriteLine("<破壊>permit, send")
    End Sub


    Private Sub Send_permit_car(a)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes("ok," & a)


        'UdpClientを作成する
        If udpClient9 Is Nothing Then
            udpClient9 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient9.BeginSend(sendBytes, sendBytes.Length, IP_child1,
        Integer.Parse(2015), AddressOf SendCallback5, udpClient9)
        udpClient9.BeginSend(sendBytes, sendBytes.Length, ip_child2,
        Integer.Parse(2015), AddressOf SendCallback5, udpClient9)
        Console.WriteLine("<放水>permit, send")
    End Sub

    Private Sub Send_permit_wall(a)
        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes("ok," & a)


        'UdpClientを作成する
        If udpClient11 Is Nothing Then
            udpClient11 = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient11.BeginSend(sendBytes, sendBytes.Length, IP_child1,
        Integer.Parse(2025), AddressOf SendCallback7, udpClient11)
        udpClient11.BeginSend(sendBytes, sendBytes.Length, ip_child2,
        Integer.Parse(2025), AddressOf SendCallback7, udpClient11)
        Console.WriteLine("<バリア>permit, send")
    End Sub











    'Private Sub Timer4_Tick(sender As Object, e As EventArgs) Handles Timer4.Tick
    '    Send_cursol()
    'End Sub
    Private Sub Send_cursol()
        'Console.WriteLine("カーソル")
        'データを送信する
        'データを送信する
        'X座標を取得する
        Dim x As Integer = Cursor.Position.X
        'Y座標を取得する
        Dim y As Integer = Cursor.Position.Y

        '送信するデータを作成する
        Dim sendBytes As Byte()
        sendBytes = System.Text.Encoding.UTF8.GetBytes(1 & "," & x & "," & y)

        'UdpClientを作成する
        If udpClient Is Nothing Then
            udpClient = New System.Net.Sockets.UdpClient()
        End If

        '非同期的にデータを送信する
        udpClient.BeginSend(sendBytes, sendBytes.Length, "192.168.10.18",
        Integer.Parse(2002), AddressOf SendCallback, udpClient)
        'Console.WriteLine("送信しました")
    End Sub






    '延焼時間を決定する
    Public Sub WindDicision(ByVal count_wind)
        D1 = 5 + v * vv / 2
        DD = 5 + v * vv / 5

        DDD = 5 + v * vv / 4
        kazasimo0 = ((3 + 3 * a / 8 + 8 * d / D1) / (1 + 0.1 * v * vv)) \ 2
        kazakami0 = ((3 + 3 * a / 8 + 8 * d / DD) / (1 + 0.002 * (v * vv) ^ 2))
        kazayoko0 = ((3 + 3 * a / 8 + 8 * d / DDD) / (1 + 0.005 * (v * vv) ^ 2))
        'kazayoko0 = ((3 + 3 * a / 8 + 8 * d / DDD) / (1 + 0.03 * (v * vv) ^ 2))
        kazasimo1 = ((5 + 5 * a / 8 + 8 * d / (D1 / 2)) / (1 + 0.1 * v * vv)) \ 2
        kazakami1 = ((5 + 5 * a / 8 + 8 * d / (DD / 2)) / (1 + 0.002 * (v * vv) ^ 2))
        kazayoko1 = ((5 + 5 * a / 8 + 8 * d / (DDD / 2)) / (1 + 0.005 * (v * vv) ^ 2))
        'kazayoko1 = ((5 + 5 * a / 8 + 8 * d / (DDD / 2)) / (1 + 0.03 * (v * vv) ^ 2))
        kazasimo2 = ((10 + 10 * a / 8 + 8 * d / (D1 / 4)) / (1 + 0.1 * v * vv)) \ 2
        kazakami2 = ((10 + 10 * a / 8 + 8 * d / (DD / 4)) / (1 + 0.002 * (v * vv) ^ 2))
        kazayoko2 = ((10 + 10 * a / 8 + 8 * d / (DDD / 4)) / (1 + 0.005 * (v * vv) ^ 2))
        'kazayoko2 = ((10 + 10 * a / 8 + 8 * d / (DDD / 4)) / (1 + 0.03 * (v * vv) ^ 2))

        If kazasimo0 <= 0 Then
            kazasimo0 = 1
        End If



        If WindDirection(count_wind) = 0 Then
            FireSpreadTime_Up(count_wind, 0) = kazasimo0
            FireSpreadTime_Right(count_wind, 0) = kazayoko0
            FireSpreadTime_Down(count_wind, 0) = kazakami0
            FireSpreadTime_Left(count_wind, 0) = kazayoko0
            FireSpreadTime_Up(count_wind, 1) = kazasimo1
            FireSpreadTime_Right(count_wind, 1) = kazayoko1
            FireSpreadTime_Down(count_wind, 1) = kazakami1
            FireSpreadTime_Left(count_wind, 1) = kazayoko1
            FireSpreadTime_Up(count_wind, 2) = kazasimo2
            FireSpreadTime_Right(count_wind, 2) = kazayoko2
            FireSpreadTime_Down(count_wind, 2) = kazakami2
            FireSpreadTime_Left(count_wind, 2) = kazayoko2
        ElseIf WindDirection(count_wind) = 1 Then
            FireSpreadTime_Up(count_wind, 0) = kazasimo0
            FireSpreadTime_Right(count_wind, 0) = kazasimo0
            FireSpreadTime_Down(count_wind, 0) = kazakami0
            FireSpreadTime_Left(count_wind, 0) = kazakami0
            FireSpreadTime_Up(count_wind, 1) = kazasimo1
            FireSpreadTime_Right(count_wind, 1) = kazasimo1
            FireSpreadTime_Down(count_wind, 1) = kazakami1
            FireSpreadTime_Left(count_wind, 1) = kazakami1
            FireSpreadTime_Up(count_wind, 2) = kazasimo2
            FireSpreadTime_Right(count_wind, 2) = kazasimo2
            FireSpreadTime_Down(count_wind, 2) = kazakami2
            FireSpreadTime_Left(count_wind, 2) = kazakami2
        ElseIf WindDirection(count_wind) = 2 Then
            FireSpreadTime_Up(count_wind, 0) = kazayoko0
            FireSpreadTime_Right(count_wind, 0) = kazasimo0
            FireSpreadTime_Down(count_wind, 0) = kazayoko0
            FireSpreadTime_Left(count_wind, 0) = kazakami0
            FireSpreadTime_Up(count_wind, 1) = kazayoko1
            FireSpreadTime_Right(count_wind, 1) = kazasimo1
            FireSpreadTime_Down(count_wind, 1) = kazayoko1
            FireSpreadTime_Left(count_wind, 1) = kazakami1
            FireSpreadTime_Up(count_wind, 2) = kazayoko2
            FireSpreadTime_Right(count_wind, 2) = kazasimo2
            FireSpreadTime_Down(count_wind, 2) = kazayoko2
            FireSpreadTime_Left(count_wind, 2) = kazakami2
        ElseIf WindDirection(count_wind) = 3 Then
            FireSpreadTime_Up(count_wind, 0) = kazakami0
            FireSpreadTime_Right(count_wind, 0) = kazasimo0
            FireSpreadTime_Down(count_wind, 0) = kazasimo0
            FireSpreadTime_Left(count_wind, 0) = kazakami0
            FireSpreadTime_Up(count_wind, 1) = kazakami1
            FireSpreadTime_Right(count_wind, 1) = kazasimo1
            FireSpreadTime_Down(count_wind, 1) = kazasimo1
            FireSpreadTime_Left(count_wind, 1) = kazakami1
            FireSpreadTime_Up(count_wind, 2) = kazakami2
            FireSpreadTime_Right(count_wind, 2) = kazasimo2
            FireSpreadTime_Down(count_wind, 2) = kazasimo2
            FireSpreadTime_Left(count_wind, 2) = kazakami2
        ElseIf WindDirection(count_wind) = 4 Then
            FireSpreadTime_Up(count_wind, 0) = kazakami0
            FireSpreadTime_Right(count_wind, 0) = kazayoko0
            FireSpreadTime_Down(count_wind, 0) = kazasimo0
            FireSpreadTime_Left(count_wind, 0) = kazayoko0
            FireSpreadTime_Up(count_wind, 1) = kazakami1
            FireSpreadTime_Right(count_wind, 1) = kazayoko1
            FireSpreadTime_Down(count_wind, 1) = kazasimo1
            FireSpreadTime_Left(count_wind, 1) = kazayoko1
            FireSpreadTime_Up(count_wind, 2) = kazakami2
            FireSpreadTime_Right(count_wind, 2) = kazayoko2
            FireSpreadTime_Down(count_wind, 2) = kazasimo2
            FireSpreadTime_Left(count_wind, 2) = kazayoko2
        ElseIf WindDirection(count_wind) = 5 Then
            FireSpreadTime_Up(count_wind, 0) = kazakami0
            FireSpreadTime_Right(count_wind, 0) = kazakami0
            FireSpreadTime_Down(count_wind, 0) = kazasimo0
            FireSpreadTime_Left(count_wind, 0) = kazasimo0
            FireSpreadTime_Up(count_wind, 1) = kazakami1
            FireSpreadTime_Right(count_wind, 1) = kazakami1
            FireSpreadTime_Down(count_wind, 1) = kazasimo1
            FireSpreadTime_Left(count_wind, 1) = kazasimo1
            FireSpreadTime_Up(count_wind, 2) = kazakami2
            FireSpreadTime_Right(count_wind, 2) = kazakami2
            FireSpreadTime_Down(count_wind, 2) = kazasimo2
            FireSpreadTime_Left(count_wind, 2) = kazasimo2
        ElseIf WindDirection(count_wind) = 6 Then
            FireSpreadTime_Up(count_wind, 0) = kazayoko0
            FireSpreadTime_Right(count_wind, 0) = kazakami0
            FireSpreadTime_Down(count_wind, 0) = kazayoko0
            FireSpreadTime_Left(count_wind, 0) = kazasimo0
            FireSpreadTime_Up(count_wind, 1) = kazayoko1
            FireSpreadTime_Right(count_wind, 1) = kazakami1
            FireSpreadTime_Down(count_wind, 1) = kazayoko1
            FireSpreadTime_Left(count_wind, 1) = kazasimo1
            FireSpreadTime_Up(count_wind, 2) = kazayoko2
            FireSpreadTime_Right(count_wind, 2) = kazakami2
            FireSpreadTime_Down(count_wind, 2) = kazayoko2
            FireSpreadTime_Left(count_wind, 2) = kazasimo2
        ElseIf WindDirection(count_wind) = 7 Then
            FireSpreadTime_Up(count_wind, 0) = kazasimo0
            FireSpreadTime_Right(count_wind, 0) = kazayoko0
            FireSpreadTime_Down(count_wind, 0) = kazayoko0
            FireSpreadTime_Left(count_wind, 0) = kazasimo0
            FireSpreadTime_Up(count_wind, 1) = kazasimo1
            FireSpreadTime_Right(count_wind, 1) = kazayoko1
            FireSpreadTime_Down(count_wind, 1) = kazayoko1
            FireSpreadTime_Left(count_wind, 1) = kazasimo1
            FireSpreadTime_Up(count_wind, 2) = kazasimo2
            FireSpreadTime_Right(count_wind, 2) = kazayoko2
            FireSpreadTime_Down(count_wind, 2) = kazayoko2
            FireSpreadTime_Left(count_wind, 2) = kazasimo2
        End If
    End Sub

    Dim count_initial As Integer = 0


    Dim id_syouka As Integer
    Dim i_car As Integer
    Dim j_car As Integer
    Dim i_car2 As Integer
    Dim j_car2 As Integer
    Dim count_syouka As Integer
    Dim i_syouka As Integer
    Dim j_syouka As Integer
    Dim min_syouka As Integer

    Dim k1 As Integer
    Dim id As Integer
    Dim pp As Integer
    Dim idd As Integer

    Dim time_right_inside As Integer
    Dim r1 As Integer


    Dim Count_Wind As Integer = 0

    Dim id2 As Integer
    Dim pp2 As Integer
    Dim idd2 As Integer


    Dim id3 As Integer
    Dim pp3 As Integer
    Dim idd3 As Integer


    Dim id4 As Integer
    Dim pp4 As Integer
    Dim idd4 As Integer

    Dim r4 As Integer

    Dim time_left_inside As Integer
    Dim r2 As Integer
    Dim k3 As Integer
    Dim time_up_inside As Integer
    Dim r3 As Integer
    Dim k4 As Integer

    Dim time_down_inside As Integer

    Dim id_car As Integer
    Dim time_syoukastart As Integer

    Dim k2 As Integer

    Dim kkk As Integer

    Dim id_break_check As Integer
    Dim count_break_check As Integer

    Dim flag_result3(maxID) As Boolean
    Dim flag_result1(maxID) As Boolean

    'Stopwatchオブジェクトを作成する 
    Dim sw As New System.Diagnostics.Stopwatch()

    'Stopwatchオブジェクトを作成する 
    Dim sw2 As New System.Diagnostics.Stopwatch()

    Dim count_syoukatyuu As Integer = 0

    Dim time = 0
    Dim time_kari = 0

    'Dim limit_time = 60
    Dim time_temporary_kiroku_use
    Dim time_temporary_kiroku_save
    '通常用の非同期-------------------------------------------------------------------------
    Private Sub calculation_normal()


        ' 非同期処理をキャンセルする.
        If _cancelToken2 IsNot Nothing Then
            _cancelToken2.Cancel()
            'Format()
        End If
        Calculation3()
    End Sub

    Private _cancelToken2 As CancellationTokenSource
    Private Async Sub Calculation3()

        'バックグラウンドタスクキャンセル用
        _cancelToken2 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           Calculation_inner2(_cancelToken2.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub

    '--------------------------------------------------------------------------------------------

    'クリック用の非同期-------------------------------------------------------------------------
    'Private Sub calculation()
    '    _cancelToken2.Cancel()


    '    ' 非同期処理をキャンセルする.
    '    If _cancelToken IsNot Nothing Then
    '        _cancelToken.Cancel()
    '        'Format()
    '    End If
    '    Calculation2()
    'End Sub

    'Private _cancelToken As CancellationTokenSource
    'Private Async Sub Calculation2()

    '    'バックグラウンドタスクキャンセル用
    '    _cancelToken = New CancellationTokenSource()

    '    Await Task.Run(Sub()
    '                       Calculation_inner(_cancelToken.Token) ' --◀ 時間のかかる処理
    '                   End Sub)
    'End Sub

    '--------------------------------------------------------------------------------------------
    'レコード用の非同期

    Private Sub Record()

        ' 非同期処理をキャンセルする.
        If _cancelToken3 IsNot Nothing Then
            _cancelToken3.Cancel()
            'Format()
        End If
        Record2()
    End Sub

    Private _cancelToken3 As CancellationTokenSource
    Private Async Sub Record2()

        'バックグラウンドタスクキャンセル用
        _cancelToken3 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           Record_inner(_cancelToken3.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    '--------------------------------------------------------------------------------------------
    '描写用の非同期

    Private Sub Byousya_takakkei()

        ' 非同期処理をキャンセルする.
        If _cancelToken4 IsNot Nothing Then
            _cancelToken4.Cancel()
            'Format()
        End If
        Byousya_takakkei2()
    End Sub

    Private _cancelToken4 As CancellationTokenSource
    Private Async Sub Byousya_takakkei2()

        'バックグラウンドタスクキャンセル用
        _cancelToken4 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_takakkei_inner(_cancelToken4.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub



    Private Sub Byousya_takakkei_af()

        ' 非同期処理をキャンセルする.
        If _cancelToken4 IsNot Nothing Then
            _cancelToken4.Cancel()
            'Format()
        End If
        Byousya_takakkei_af2()
    End Sub

    Private Async Sub Byousya_takakkei_af2()

        'バックグラウンドタスクキャンセル用
        _cancelToken4 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_takakkei_af_inner(_cancelToken4.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub








    Private Sub Byousya_sikaku()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikakua()
    End Sub

    Private _cancelToken5 As CancellationTokenSource
    Private Async Sub Byousya_sikakua()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub Byousya_sikaku2()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikaku2a()
    End Sub


    Private Async Sub Byousya_sikaku2a()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku2_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub Byousya_sikaku3()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikaku3a()
    End Sub


    Private Async Sub Byousya_sikaku3a()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku3_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub



    Private Sub Byousya_sikaku4()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikaku4a()
    End Sub


    Private Async Sub Byousya_sikaku4a()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku4_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub



    Private Sub Byousya_sikaku5()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikaku5a()
    End Sub


    Private Async Sub Byousya_sikaku5a()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku5_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub




    Private Sub Byousya_sikaku6()

        ' 非同期処理をキャンセルする.
        If _cancelToken5 IsNot Nothing Then
            _cancelToken5.Cancel()
            'Format()
        End If
        Byousya_sikaku6a()
    End Sub


    Private Async Sub Byousya_sikaku6a()

        'バックグラウンドタスクキャンセル用
        _cancelToken5 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_sikaku6_inner(_cancelToken5.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub




















    Private Sub Byousya_fire()

        ' 非同期処理をキャンセルする.
        If _cancelToken6 IsNot Nothing Then
            _cancelToken6.Cancel()
            'Format()
        End If
        Byousya_fire2()
    End Sub

    Private _cancelToken6 As CancellationTokenSource
    Private Async Sub Byousya_fire2()

        'バックグラウンドタスクキャンセル用
        _cancelToken6 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           byousya_fire_inner(_cancelToken6.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub number_resource()

        ' 非同期処理をキャンセルする.
        If _cancelToken7 IsNot Nothing Then
            _cancelToken7.Cancel()
            'Format()
        End If
        number_resource2()
    End Sub

    Private _cancelToken7 As CancellationTokenSource
    Private Async Sub number_resource2()

        'バックグラウンドタスクキャンセル用
        _cancelToken7 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           number_resource_inner(_cancelToken7.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub operation_break()

        ' 非同期処理をキャンセルする.
        If _cancelToken8 IsNot Nothing Then
            _cancelToken8.Cancel()
            'Format()
        End If
        operation_break2()
    End Sub

    Private _cancelToken8 As CancellationTokenSource
    Private Async Sub operation_break2()

        'バックグラウンドタスクキャンセル用
        _cancelToken8 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           operation_break_inner(_cancelToken8.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub operation_komado()

        ' 非同期処理をキャンセルする.
        If _cancelToken9 IsNot Nothing Then
            _cancelToken9.Cancel()
            'Format()
        End If
        operation_komado2()
    End Sub

    Private _cancelToken9 As CancellationTokenSource
    Private Async Sub operation_komado2()

        'バックグラウンドタスクキャンセル用
        _cancelToken9 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           operation_komado_inner(_cancelToken9.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub operation_syouka()

        ' 非同期処理をキャンセルする.
        If _cancelToken10 IsNot Nothing Then
            _cancelToken10.Cancel()
            'Format()
        End If
        operation_syouka2()
    End Sub

    Private _cancelToken10 As CancellationTokenSource
    Private Async Sub operation_syouka2()

        'バックグラウンドタスクキャンセル用
        _cancelToken10 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           operation_syouka_inner(_cancelToken10.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Private Sub operation_wall()

        ' 非同期処理をキャンセルする.
        If _cancelToken11 IsNot Nothing Then
            _cancelToken11.Cancel()
            'Format()
        End If
        operation_wall2()
    End Sub

    Private _cancelToken11 As CancellationTokenSource
    Private Async Sub operation_wall2()

        'バックグラウンドタスクキャンセル用
        _cancelToken11 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           operation_wall_inner(_cancelToken11.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub



    Private Sub show_button()

        ' 非同期処理をキャンセルする.
        If _cancelToken17 IsNot Nothing Then
            _cancelToken17.Cancel()
            'Format()
        End If
        show_button2()
    End Sub

    Private _cancelToken17 As CancellationTokenSource
    Private Async Sub show_button2()

        'バックグラウンドタスクキャンセル用
        _cancelToken17 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           show_button_inner(_cancelToken17.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub
    Dim location_sousa_x = 8
    Dim location_sousa_y = 299
    Dim select_car As Boolean
    Dim select_wall As Boolean
    Dim select_break As Boolean


    Public Sub show_button_inner(cancellationToken17 As CancellationToken)
        SyncLock Me
            '消防車
            If Cpos2.X - location_sousa_x > 10 And Cpos2.Y - location_sousa_y > 10 And Cpos2.X - location_sousa_x < 160 And Cpos2.Y - location_sousa_y < 70 Then

                g9.DrawRectangle(Pens.Red, 10, 10, 150, 60)
                If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then
                    select_car = True
                    select_break = False
                    select_wall = False
                End If
            Else
                g9.DrawRectangle(Pens.Black, 10, 10, 150, 60)
            End If
            If select_car = True Then
                g9.FillRectangle(Brushes.Yellow, 11, 11, 148, 58)
            Else
                g9.FillRectangle(Brushes.White, 11, 11, 148, 58)
            End If

            '破壊
            If Cpos2.X - location_sousa_x > 10 And Cpos2.Y - location_sousa_y > 80 And Cpos2.X - location_sousa_x < 160 And Cpos2.Y - location_sousa_y < 140 Then

                g9.DrawRectangle(Pens.Red, 10, 80, 150, 60)
                If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then
                    select_car = False
                    select_break = True
                    select_wall = False
                End If
            Else
                g9.DrawRectangle(Pens.Black, 10, 80, 150, 60)
            End If
            If select_break = True Then
                g9.FillRectangle(Brushes.Yellow, 11, 81, 148, 58)
            Else
                g9.FillRectangle(Brushes.White, 11, 81, 148, 58)
            End If

            'バリア
            If Cpos2.X - location_sousa_x > 10 And Cpos2.Y - location_sousa_y > 150 And Cpos2.X - location_sousa_x < 160 And Cpos2.Y - location_sousa_y < 210 Then

                g9.DrawRectangle(Pens.Red, 10, 150, 150, 60)
                If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then
                    select_car = False
                    select_break = False
                    select_wall = True
                End If
            Else
                g9.DrawRectangle(Pens.Black, 10, 150, 150, 60)
            End If
            If select_wall = True Then
                g9.FillRectangle(Brushes.Yellow, 11, 151, 148, 58)
            Else
                g9.FillRectangle(Brushes.White, 11, 151, 148, 58)
            End If

            '戻る
            If Cpos2.X - location_sousa_x > 170 And Cpos2.Y - location_sousa_y > 10 And Cpos2.X - location_sousa_x < 200 And Cpos2.Y - location_sousa_y < 210 Then

                g9.DrawRectangle(Pens.Red, 170, 10, 30, 200)
                If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then
                    select_car = False
                    select_break = False
                    select_wall = False
                End If
            Else
                g9.DrawRectangle(Pens.Black, 170, 10, 30, 200)
            End If


            g9.DrawRectangle(Pens.Black, 170, 10, 30, 200)
            Invoke(New SetLabelTextDelegate24(AddressOf SetLabelText25))
        End SyncLock
    End Sub



    Private _cancelToken14 As CancellationTokenSource
    Private Sub log_record_wall()

        ' 非同期処理をキャンセルする.
        If _cancelToken14 IsNot Nothing Then
            _cancelToken14.Cancel()
            'Format()
        End If
        log_record_array2()
    End Sub

    Private _cancelToken15 As CancellationTokenSource
    Private Async Sub log_record_array2()

        'バックグラウンドタスクキャンセル用
        _cancelToken15 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           log_record_array_inner(_cancelToken15.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Public Sub log_record_array_inner(cancellationToken15 As CancellationToken)

        'ログ保存
        '書き込むファイルを開く
        Dim srwall As New System.IO.StreamWriter(Output_path & "\record_wall" & count.ToString & ".csv", False, enc)
        srwall.Write("count")
        srwall.Write(",")
        srwall.Write("i")
        srwall.Write(",")
        srwall.Write("j")
        srwall.Write(",")
        srwall.Write("lug")
        srwall.Write(",")
        srwall.Write("縦or横")
        srwall.Write(",")
        srwall.Write("建物の位置")
        srwall.Write(",")
        srwall.Write("長さ")
        srwall.Write(",")
        srwall.Write("結果")
        srwall.Write(",")
        srwall.Write("フラグ")
        srwall.Write(",")
        srwall.Write("IP")
        srwall.Write(",")
        srwall.WriteLine()

        For kk = 0 To count_wall - 1
            For tt = 0 To 9
                srwall.Write(record_wall(kk, tt))
                srwall.Write(",")
            Next
            srwall.WriteLine()
        Next

        srwall.Close()
        srwall.Dispose()


    End Sub


    Private Sub log_record_break()

        ' 非同期処理をキャンセルする.
        If _cancelToken16 IsNot Nothing Then
            _cancelToken16.Cancel()
            'Format()
        End If
        log_record_result2()
    End Sub

    Private _cancelToken16 As CancellationTokenSource
    Private Async Sub log_record_result2()

        'バックグラウンドタスクキャンセル用
        _cancelToken16 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           log_record_result_inner(_cancelToken16.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub


    Public Sub log_record_result_inner(cancellationToken16 As CancellationToken)


        Dim srbreak As New System.IO.StreamWriter(Output_path & "\record_break" & count.ToString & ".csv", False, enc)

        srbreak.Write("count")
        srbreak.Write(",")
        srbreak.Write("建物ID")
        srbreak.Write(",")
        srbreak.Write("Lug")
        srbreak.Write(",")
        srbreak.Write("フラグ")
        srbreak.Write(",")
        srbreak.Write("結果")
        srbreak.Write(",")
        srbreak.Write("IP")
        srbreak.Write(",")
        srbreak.WriteLine()

        For kk = 0 To count_break - 1
            For tt = 0 To 5
                srbreak.Write(record_break(kk, tt))
                srbreak.Write(",")
            Next
            srbreak.WriteLine()
        Next

        srbreak.Close()
        srbreak.Dispose()


    End Sub

    Private Sub log_record_car()

        ' 非同期処理をキャンセルする.
        If _cancelToken18 IsNot Nothing Then
            _cancelToken18.Cancel()
            'Format()
        End If
        log_record_car2()
    End Sub


    Private _cancelToken18 As CancellationTokenSource
    Private Async Sub log_record_car2()

        'バックグラウンドタスクキャンセル用
        _cancelToken18 = New CancellationTokenSource()

        Await Task.Run(Sub()
                           log_record_car_inner(_cancelToken18.Token) ' --◀ 時間のかかる処理
                       End Sub)
    End Sub
    Public Sub log_record_car_inner(cancellationToken18 As CancellationToken)

        Dim srcar As New System.IO.StreamWriter(Output_path & "\record_car" & count.ToString & ".csv", False, enc)

        srcar.Write("建物ID")
        srcar.Write(",")
        srcar.Write("i座標")
        srcar.Write(",")
        srcar.Write("j座標")
        srcar.Write(",")
        srcar.Write("放水の方向")
        srcar.Write(",")
        srcar.Write("i")
        srcar.Write(",")
        srcar.Write("j")
        srcar.Write(",")
        srcar.Write("count")
        srcar.Write(",")
        srcar.Write("IP")
        srcar.Write(",")
        srcar.WriteLine()

        For kk = 0 To count_car - 1
            For tt = 0 To 7
                srcar.Write(record_car(kk, tt))
                srcar.Write(",")
            Next
            srcar.WriteLine()
        Next

        srcar.Close()
        srcar.Dispose()


    End Sub




    Dim kkkend

    'calculation<開始時>

    Public Sub Calculation_start()

        Console.WriteLine("calculation<開始時>")
        '開始時のみ
        Count_Wind = 0
        DiclineTime(id0) = maxTime + decline_mokuzou
        For n = 0 To 1

            '盛期火災の判定
            For id = 0 To maxID
                count_seikiID(id) = 0
            Next

            For i_seiki = 0 To tate - 1
                For j_seiki = 0 To yoko - 1

                    If ArrayState(i_seiki, j_seiki) = 1 And ArrayTime_fire1(i_seiki, j_seiki) <= n Then
                        id_seiki = ArrayID(i_seiki, j_seiki)
                        kkk = count_seikiID(id_seiki)
                        count_seikiID(id_seiki) = kkk + 1
                        hennkou_id(id_seiki) = 1
                    End If
                Next
            Next

            For id = 1 To maxID
                maxTime = 0
                If count_seikiID(id) = MaxCell(id) Then
                    For i_seiki = 0 To tate - 1
                        For j_seiki = 0 To yoko - 1
                            If ArrayID(i_seiki, j_seiki) = id Then
                                ArrayState(i_seiki, j_seiki) = 2
                                If maxTime < ArrayTime_fire1(i_seiki, j_seiki) Then
                                    maxTime = ArrayTime_fire1(i_seiki, j_seiki)
                                End If
                            End If
                        Next
                    Next
                End If
                If maxTime > 0 Then
                    HighFireProcessTime(id) = maxTime
                    DiclineTime(id) = maxTime + decline_mokuzou
                    hennkou_id(id) = 1
                End If
            Next


            'エピソード処理----------------------------------------------------------------------------

            '初期火災
            If n = 0 Then
                HighFireProcessTime(id0) = 0
                For i = 0 To tate - 1
                    For j = 0 To yoko - 1
                        If ArrayID(i, j) = id0 Then
                            ArrayState(i, j) = 2
                            ArrayTime_fire1(i, j) = n
                        End If
                    Next
                Next
            End If
            'エピソード処理----------------------------------------------------------------------------

            For i = 0 To 2
                time_right(i) = FireSpreadTime_Right(n \ 5, i)
                time_left(i) = FireSpreadTime_Left(n \ 5, i)
                time_up(i) = FireSpreadTime_Up(n \ 5, i)
                time_down(i) = FireSpreadTime_Down(n \ 5, i)
            Next


            For i = 2 To tate - 3
                For j = 2 To yoko - 3
                    If ArrayID(i, j) > 0 Then
                        If ArrayTime_syoukastart(i, j) = n Then

                            '消火中
                            If Result(ArrayID(i, j)) = 0 Or Result(ArrayID(i, j)) = 1 Or Result(ArrayID(i, j)) = 2 Then
                                Result(ArrayID(i, j)) = 8
                                hennkou_id(ArrayID(i, j)) = 1
                            End If

                            If arraystate2(i, j) = 0 Then
                                ArrayState(i, j) = 3
                                arraystate2(i, j) = 3
                            Else
                                ArrayState(i, j) = 4
                                arraystate2(i, j) = 4
                            End If
                            hennkou_ij(i, j) = 1
                            ArrayStateRight(i, j) = 3
                            ArrayStateLeft(i, j) = 3
                            ArrayStateUp(i, j) = 3
                            ArrayStateDown(i, j) = 3

                            id_syouka = ArrayID(i, j)
                            '右
                            If ArrayTime_syoukastart(i, j + 1) > n And ArrayID(i, j + 1) = id_syouka Then
                                ArrayTime_syoukastart(i, j + 1) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i, j + 1) = 1
                                hennkou_ij(i, j + 1) = 1
                            End If
                            '左
                            If ArrayTime_syoukastart(i, j - 1) > n And ArrayID(i, j - 1) = id_syouka Then
                                ArrayTime_syoukastart(i, j - 1) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i, j - 1) = 1
                                hennkou_ij(i, j - 1) = 1
                            End If
                            '上
                            If ArrayTime_syoukastart(i - 1, j) > n And ArrayID(i - 1, j) = id_syouka Then
                                ArrayTime_syoukastart(i - 1, j) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i - 1, j) = 1
                                hennkou_ij(i - 1, j) = 1
                            End If
                            '下
                            If ArrayTime_syoukastart(i + 1, j) > n And ArrayID(i + 1, j) = id_syouka Then
                                ArrayTime_syoukastart(i + 1, j) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i + 1, j) = 1
                                hennkou_ij(i + 1, j) = 1
                            End If
                        End If


                        'フラシュオーバーまたは盛期火災ならば
                        If ArrayState(i, j) = 1 Or ArrayState(i, j) = 2 Then


                            '右側
                            k1 = 1
                            Do While ArrayID(i, j + k1) = 0 AndAlso j + k1 < yoko - 1 AndAlso k1 < 4
                                k1 += 1
                            Loop
                            If ArrayID(i, j + k1) > 0 Then

                                'もし右隣が「計算前」なら
                                If ArrayStateRight(i, j + k1) = 0 Then

                                    id = ArrayID(i, j)
                                    pp = ArrayID(i, j + k1)
                                    idd = Buildingstructure(pp)

                                    'idが隣と一致するなら延焼する
                                    If ArrayID(i, j) = ArrayID(i, j + k1) Then

                                        '建物内の延焼 
                                        'もし「探索した建物の状態がフラッシュオーバー」かつ「その時間」ならば
                                        If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i, j + k1) <> 2 Then

                                            time_right_inside = time_right(idd)
                                            r1 = ArrayTime_fire1(i, j) + time_right_inside
                                            If r1 < ArrayTime_fire1(i, j + k1) Then
                                                '燃焼時間を計算
                                                ArrayTime_fire1(i, j + k1) = ArrayTime_fire1(i, j) + time_right_inside
                                                '計算済みに更新
                                                ArrayState(i, j + k1) = 1
                                                ArrayStateRight(i, j + k1) = 1
                                                hennkou_ij(i, j + k1) = 1
                                            End If
                                        End If
                                    End If
                                    '建物間の延焼
                                    'もし「探索した建物の状態が盛期火災」
                                    If ArrayState(i, j) = 2 Then
                                        'もし盛期火災となる時間ならば
                                        If HighFireProcessTime(id) = n Then

                                            r1 = HighFireProcessTime(id) + time_right(idd)
                                            If r1 < ArrayTime_fire1(i, j + k1) Then
                                                '燃焼時間を計算
                                                ArrayTime_fire1(i, j + k1) = HighFireProcessTime(id) + time_right(idd)
                                                '計算済みに更新
                                                ArrayState(i, j + k1) = 1
                                                ArrayStateRight(i, j + k1) = 1
                                                hennkou_ij(i, j + k1) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If



                            '左側

                            k2 = 1
                            Do While ArrayID(i, j - k2) = 0 AndAlso j - k2 > 0 AndAlso k2 < 4
                                k2 += 1
                            Loop

                            If ArrayID(i, j - k2) > 0 Then
                                'もし左の建物の状態が通常ならば
                                If ArrayStateLeft(i, j - k2) = 0 Then
                                    id2 = ArrayID(i, j)
                                    pp2 = ArrayID(i, j - k2)
                                    idd2 = Buildingstructure(pp2)
                                    '建物内
                                    'もし「探索した建物の状態がフラッシュオーバー」かつ「その時間」ならば
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i, j - k2) <> 2 Then
                                        'idが隣と一致するなら延焼するならば
                                        If ArrayID(i, j) = ArrayID(i, j - k2) Then

                                            time_left_inside = time_left(idd2)
                                            r2 = ArrayTime_fire1(i, j) + time_left_inside
                                            If r2 < ArrayTime_fire1(i, j - k2) Then

                                                ArrayTime_fire1(i, j - k2) = ArrayTime_fire1(i, j) + time_left_inside
                                                ArrayState(i, j - k2) = 1
                                                ArrayStateLeft(i, j - k2) = 1
                                                hennkou_ij(i, j - k2) = 1
                                            End If
                                        End If
                                    End If

                                    '建物間
                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id2) = n Then

                                            r2 = HighFireProcessTime(id2) + time_left(idd2)
                                            If r2 < ArrayTime_fire1(i, j - k2) Then
                                                ArrayTime_fire1(i, j - k2) = HighFireProcessTime(id2) + time_left(idd2)
                                                ArrayState(i, j - k2) = 1
                                                ArrayStateLeft(i, j - k2) = 1
                                                hennkou_ij(i, j - k2) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If


                            '上側

                            k3 = 1
                            Do While ArrayID(i - k3, j) = 0 AndAlso i - k3 > 0 AndAlso k3 < 4
                                k3 += 1
                            Loop
                            If ArrayID(i - k3, j) > 0 Then

                                If ArrayStateUp(i - k3, j) = 0 Then

                                    id3 = ArrayID(i, j)
                                    pp3 = ArrayID(i - k3, j)
                                    idd3 = Buildingstructure(pp3)
                                    '建物内
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i - k3, j) <> 2 Then
                                        'idが隣と一致するなら延焼する
                                        If ArrayID(i, j) = ArrayID(i - k3, j) Then
                                            time_up_inside = time_up(idd3)
                                            r3 = ArrayTime_fire1(i, j) + time_up_inside
                                            If r3 < ArrayTime_fire1(i - k3, j) Then
                                                ArrayTime_fire1(i - k3, j) = ArrayTime_fire1(i, j) + time_up_inside
                                                ArrayState(i - k3, j) = 1
                                                ArrayStateUp(i - k3, j) = 1
                                                hennkou_ij(i - k3, j) = 1
                                            End If
                                        End If
                                    End If


                                    '建物間
                                    '建物が盛期火災過程ならば延焼する
                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id3) = n Then

                                            r3 = HighFireProcessTime(id3) + time_up(idd3)
                                            If r3 < ArrayTime_fire1(i - k3, j) Then

                                                ArrayTime_fire1(i - k3, j) = HighFireProcessTime(id3) + time_up(idd3)
                                                ArrayState(i - k3, j) = 1
                                                ArrayStateUp(i - k3, j) = 1
                                                hennkou_ij(i - k3, j) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If




                            '下側

                            k4 = 1
                            Do While ArrayID(i + k4, j) = 0 AndAlso i + k4 < tate - 1 AndAlso k4 < 4
                                k4 += 1
                            Loop

                            If ArrayID(i + k4, j) > 0 Then

                                If ArrayStateDown(i + k4, j) = 0 Then
                                    id4 = ArrayID(i, j)
                                    pp4 = ArrayID(i + k4, j)
                                    idd4 = Buildingstructure(pp4)

                                    '建物内
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i + k4, j) <> 2 Then

                                        'idが隣と一致するなら延焼する
                                        If ArrayID(i, j) = ArrayID(i + k4, j) Then


                                            time_down_inside = time_down(idd4)
                                            r4 = ArrayTime_fire1(i, j) + time_down_inside
                                            If r4 < ArrayTime_fire1(i + k4, j) Then
                                                ArrayTime_fire1(i + k4, j) = ArrayTime_fire1(i, j) + time_down_inside
                                                ArrayState(i + k4, j) = 1
                                                ArrayStateDown(i + k4, j) = 1
                                                hennkou_ij(i + k4, j) = 1
                                            End If


                                        End If
                                    End If

                                    '建物間
                                    '建物が盛期火災過程ならば延焼する

                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id4) = n Then

                                            r4 = HighFireProcessTime(id4) + time_down(idd4)
                                            If r4 < ArrayTime_fire1(i + k4, j) Then
                                                ArrayTime_fire1(i + k4, j) = HighFireProcessTime(id4) + time_down(idd4)
                                                ArrayState(i + k4, j) = 1
                                                ArrayStateDown(i + k4, j) = 1
                                                hennkou_ij(i + k4, j) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If

                    'End Sub)
                Next j
            Next i

            '部分火災判定
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If ArrayTime_fire1(i, j) = n And arraystate2(i, j) = 0 Then
                        arraystate2(i, j) = 1
                        hennkou_ij(i, j) = 1
                        If Result(ArrayID(i, j)) = 0 Then
                            Result(ArrayID(i, j)) = 1
                            hennkou_id(ArrayID(i, j)) = 1
                        End If
                    End If
                Next
            Next

            '盛期火災過程
            For id = 1 To maxID
                If HighFireProcessTime(id) = n And Result(id) = 1 Then
                    Result(id) = 2
                    hennkou_id(id) = 1
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id Then
                                arraystate2(i, j) = 2
                                hennkou_ij(i, j) = 1
                            End If
                        Next
                    Next

                End If
            Next

            '衰退期
            For id = 1 To maxID
                If DiclineTime(id) = n And Result(id) = 2 Then
                    Result(id) = 6
                    hennkou_id(id) = 1
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id Then
                                arraystate2(i, j) = 6
                                hennkou_ij(i, j) = 1
                            End If
                        Next
                    Next

                End If
            Next

            For id = 1 To maxID
                count_syoukatyuu = 0
                If Result(id) = 8 Then
                    For i3 = 0 To tate - 1
                        For j3 = 0 To yoko - 1
                            If ArrayID(i3, j3) = id And (arraystate2(i3, j3) = 3 Or arraystate2(i3, j3) = 4) Then
                                count_syoukatyuu += 1
                            End If
                        Next j3
                    Next i3
                    If count_syoukatyuu = MaxCell(id) Then
                        '消火完了
                        Result(id) = 9
                        hennkou_id(id) = 1
                    End If
                End If
            Next

            '破壊中⇒破壊できなかった
            For id = 1 To maxID
                If Result(id) = 7 Then
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id And ArrayTime_fire1(i, j) = n - 1 Then
                                Result(id) = 0
                                hennkou_id(id) = 1
                            End If
                        Next
                    Next
                    If Result(id) = 0 Then
                        For i = 0 To tate - 1
                            For j = 0 To yoko - 1
                                If ArrayID(i, j) = id Then
                                    arraystate2(i, j) = 0
                                    hennkou_ij(i, j) = 1
                                End If
                                If ArrayID(i, j) = id And ArrayTime_fire1(i, j) <= n Then
                                    arraystate2(i, j) = 1
                                    hennkou_ij(i, j) = 1
                                End If
                            Next
                        Next
                    End If
                End If

            Next

            '状況を記録
            For i2 = 0 To tate - 1
                For j2 = 0 To yoko - 1
                    arraystate_a(n Mod 2, i2, j2) = arraystate2(i2, j2)
                Next
            Next
            For id = 1 To maxID
                result_a(n Mod 2, id) = Result(id)
            Next

            'summaryに保存
            For aaa = 0 To maxID

                Count_seikiID_summary(aaa) = count_seikiID(aaa)
                Dicline_Time_summary(aaa) = DiclineTime(aaa)
                HighFireProcessTime_summary(aaa) = HighFireProcessTime(aaa)
                arraytime_break2_summary(aaa) = arraytime_break2(aaa)
                Result_summary(aaa) = Result(aaa)

            Next

            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    ArrayTime_fire1_summary(i, j) = ArrayTime_fire1(i, j)
                    Arraystate_summary(i, j) = ArrayState(i, j)
                    arraystate2_summary(i, j) = arraystate2(i, j)
                    ArrayStateRight_summary(i, j) = ArrayStateRight(i, j)
                    ArrayStateLeft_summary(i, j) = ArrayStateLeft(i, j)
                    ArrayStateUp_summary(i, j) = ArrayStateUp(i, j)
                    ArrayStateDown_summary(i, j) = ArrayStateDown(i, j)
                Next
            Next

            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If ArrayState(i, j) <> 0 Then
                        ennsyou += 1
                    End If
                Next
            Next
            record_ennsyou(n) = ennsyou

            'Record()
            'ログ保存
            '書き込むファイルを開く
            'Dim sr92 As New System.IO.StreamWriter(Output_path & "\log_arraystate" & count.ToString & ".csv", False, enc)
            'For i = 0 To tate - 1
            '    For j = 0 To yoko - 1
            '        sr92.Write(arraystate_a((count + 1) Mod 2, i, j))
            '        sr92.Write(",")
            '    Next
            '    sr92.Write(vbCrLf)
            'Next
            'sr92.Write(vbCrLf)
            'sr92.Close()
            'sr92.Dispose()

            ''書き込むファイルを開く
            'Dim sr4545 As New System.IO.StreamWriter(Output_path & "\log_result" & count.ToString & ".csv", False, enc)
            'For j = 0 To maxID
            '    sr4545.Write(result_a((count + 1) Mod 2, j))
            '    sr4545.Write(",")
            'Next
            'sr4545.Close()
            'sr4545.Dispose()
        Next n

                sw2.Stop()
        Console.WriteLine("計算時間：" & sw2.ElapsedMilliseconds)

    End Sub

    Dim flag_wall_judgement As Boolean = False

    Dim record_wall_c(200, 9)
    Dim record_break_c(200, 5)

    'calculation<通常時>
    Public Sub Calculation_inner2(cancellationToken2 As CancellationToken)
        'SyncLock Me

        'Try
        'Public Sub Calculation_normal()
        Console.WriteLine("calculation<通常時>")
        sw2.Reset()
        sw2.Start()



        For n = count + 1 To count + 1

            Console.WriteLine("n:" & n)

            '盛期火災の判定
            For id2 = 0 To maxID
                count_seikiID(id2) = 0
            Next

            For i_seiki = 0 To tate - 1
                For j_seiki = 0 To yoko - 1

                    If ArrayState(i_seiki, j_seiki) = 1 And ArrayTime_fire1(i_seiki, j_seiki) <= n Then
                        id_seiki = ArrayID(i_seiki, j_seiki)
                        kkk = count_seikiID(id_seiki)
                        count_seikiID(id_seiki) = kkk + 1
                        hennkou_id(id_seiki) = 1
                    End If
                Next
            Next

            For id3 = 1 To maxID
                maxTime = 0
                If count_seikiID(id3) = MaxCell(id3) Then
                    For i_seiki = 0 To tate - 1
                        For j_seiki = 0 To yoko - 1
                            If ArrayID(i_seiki, j_seiki) = id3 Then
                                ArrayState(i_seiki, j_seiki) = 2
                                If maxTime < ArrayTime_fire1(i_seiki, j_seiki) Then
                                    maxTime = ArrayTime_fire1(i_seiki, j_seiki)
                                End If
                            End If
                        Next
                    Next
                End If
                'If maxTime > 0 Then
                If maxTime = n Then
                    HighFireProcessTime(id3) = maxTime
                    DiclineTime(id3) = maxTime + decline_mokuzou
                    hennkou_id(id3) = 1
                End If
            Next


            'エピソード処理----------------------------------------------------------------------------
            '①同時多発
            If n = time_douzitahatu Then
                HighFireProcessTime(id_douzitahatu) = time_douzitahatu
                hennkou_id(id_douzitahatu) = 1
                For i = 0 To tate - 1
                    For j = 0 To yoko - 1
                        If ArrayID(i, j) = id_douzitahatu Then
                            ArrayTime_fire1(i, j) = n
                            ArrayState(i, j) = 2
                            hennkou_ij(i, j) = 1
                        End If

                    Next
                Next
                DiclineTime(id_douzitahatu) = maxTime + decline_mokuzou
            End If
            '②同時多発
            If n = time_douzitahatu2 Then
                HighFireProcessTime(id_douzitahatu2) = time_douzitahatu2
                For i = 0 To tate - 1
                    For j = 0 To yoko - 1
                        If ArrayID(i, j) = id_douzitahatu2 Then
                            ArrayTime_fire1(i, j) = n
                            ArrayState(i, j) = 2
                        End If

                    Next
                Next
                DiclineTime(id_douzitahatu2) = maxTime + decline_mokuzou
            End If

            'エピソード処理----------------------------------------------------------------------------



            For i = 0 To 2
                time_right(i) = FireSpreadTime_Right(n \ 5, i)
                time_left(i) = FireSpreadTime_Left(n \ 5, i)
                time_up(i) = FireSpreadTime_Up(n \ 5, i)
                time_down(i) = FireSpreadTime_Down(n \ 5, i)
            Next




            '壁の計算
            For p = 0 To count_wall
                If n > 0 And record_wall(p, 0) + record_wall(p, 3) = n Then

                    Console.WriteLine("バリア設置時刻；" & record_wall(p, 0))
                    Console.WriteLine("バリアタイムラグ；" & record_wall(p, 3))

                    i_wall_cal = record_wall(p, 1)
                    j_wall_cal = record_wall(p, 2)
                    Console.WriteLine("壁の処理開始")
                    '縦の壁
                    If record_wall(p, 4) = 1 Then
                        Console.WriteLine("縦壁")
                        flag_wall_judgement = False
                        '壁作成の判定
                        For nanndemo = 0 To record_wall(p, 6) - 1

                            Console.WriteLine("ららら")
                            If ArrayState(i_wall_cal + nanndemo, j_wall_cal) <> 0 Then
                                flag_wall_judgement = True
                            End If
                            If ArrayState(i_wall_cal + nanndemo, j_wall_cal + 1) <> 0 Then
                                flag_wall_judgement = True
                            End If
                        Next

                        If flag_wall_judgement = False Then

                            '左に建物
                            If record_wall(p, 5) = 1 Then
                                mitibunn_cal = 3
                                mitibunn_cal2 = 0
                                Console.WriteLine("左に建物")
                            Else
                                mitibunn_cal = 1
                                mitibunn_cal2 = -2
                                Console.WriteLine("右に建物")
                            End If

                            For nanndemo = 0 To record_wall(p, 6) - 1
                                ArrayStateLeft(i_wall_cal + nanndemo, j_wall_cal + mitibunn_cal2) = 2
                                ArrayStateRight(i_wall_cal + nanndemo, j_wall_cal + mitibunn_cal) = 2
                                Console.WriteLine("ららら")
                            Next
                            Console.WriteLine("成功")
                            record_wall(p, 7) = 1
                        Else
                            Console.WriteLine("失敗")

                            record_wall(p, 7) = 2
                        End If
                        '横の壁
                    Else
                        Console.WriteLine("横壁")

                        flag_wall_judgement = False
                        '壁作成の判定
                        For nanndemo = 0 To record_wall(p, 6) - 1

                            If ArrayState(i_wall_cal, j_wall_cal + nanndemo) <> 0 Then
                                flag_wall_judgement = True
                            End If
                            If ArrayState(i_wall_cal + 1, j_wall_cal + nanndemo) <> 0 Then
                                flag_wall_judgement = True
                            End If
                        Next

                        If flag_wall_judgement = False Then

                            '左に建物
                            If record_wall(p, 5) = 1 Then
                                mitibunn_cal = 3
                                mitibunn_cal2 = 0
                                Console.WriteLine("上に建物")
                            Else
                                mitibunn_cal = 1
                                mitibunn_cal2 = -2
                                Console.WriteLine("下に建物")
                            End If

                            For nanndemo = 0 To record_wall(p, 6) - 1
                                ArrayStateUp(i_wall_cal + mitibunn_cal2, j_wall_cal + nanndemo) = 2
                                ArrayStateDown(i_wall_cal + mitibunn_cal, j_wall_cal + nanndemo) = 2
                                Console.WriteLine("ららら")
                            Next

                            Console.WriteLine("成功")
                            record_wall(p, 7) = 1
                        Else

                            Console.WriteLine("失敗")
                            record_wall(p, 7) = 2

                        End If


                    End If

                End If
            Next






            For p = 0 To count_car
                If record_car(p, 6) = n Then
                    id_car = record_car(p, 0)
                    i_syouka = record_car(p, 4)
                    j_syouka = record_car(p, 5)
                    time_syoukastart = n
                    ArrayStatesyouka(i_syouka, j_syouka) = 1
                    ArrayTime_syoukastart(i_syouka, j_syouka) = n
                    hennkou_ij(i_syouka, j_syouka) = 1
                End If
            Next



            If count_break > 0 Then
                For p = 0 To count_break - 1
                    If record_break(p, 3) <> 1 Then
                        Console.WriteLine("壊し中")
                        arraytime_break2(record_break(p, 1)) = record_break(p, 0) + record_break(p, 2)
                        hennkou_id(record_break(p, 1)) = 1
                        For i = 0 To tate - 1
                            For j = 0 To yoko - 1
                                If ArrayID(i, j) = record_break(p, 1) Then
                                    '壊し中
                                    arraystate2(i, j) = 7
                                    hennkou_ij(i, j) = 1
                                End If
                            Next
                        Next
                        Result(record_break(p, 1)) = 7
                        record_break(p, 3) = 1
                    End If
                Next
            End If

            For id4 = 1 To maxID
                If arraytime_break2(id4) = n Then
                    count_break_check = 0

                    If Result(id4) = 7 Then
                        Console.WriteLine("破壊完了")

                        For p = 0 To count_break
                            If record_break(p, 1) = id4 Then
                                record_break(p, 4) = 1
                            End If
                        Next

                        For i = 0 To tate - 1
                            For j = 0 To yoko - 1
                                If ArrayID(i, j) = id4 Then
                                    ArrayState(i, j) = 5
                                    '壊した
                                    arraystate2(i, j) = 5
                                    ArrayStateRight(i, j) = 5
                                    ArrayStateLeft(i, j) = 5
                                    ArrayStateUp(i, j) = 5
                                    ArrayStateDown(i, j) = 5
                                    hennkou_ij(i, j) = 1
                                End If
                            Next
                        Next
                        Result(id4) = 5
                        hennkou_id(id4) = 1
                    End If
                End If
            Next

            For i = 2 To tate - 3
                For j = 2 To yoko - 3

                    If ArrayID(i, j) > 0 Then

                        If ArrayTime_syoukastart(i, j) = n Then
                            Console.WriteLine("放水中")
                            '消火中
                            If Result(ArrayID(i, j)) = 0 Or Result(ArrayID(i, j)) = 1 Or Result(ArrayID(i, j)) = 2 Then
                                Result(ArrayID(i, j)) = 8
                                hennkou_id(ArrayID(i, j)) = 1
                            End If

                            If arraystate2(i, j) = 0 Then
                                ArrayState(i, j) = 3
                                arraystate2(i, j) = 3
                            Else
                                ArrayState(i, j) = 4
                                arraystate2(i, j) = 4

                            End If

                            ArrayStateRight(i, j) = 3
                            ArrayStateLeft(i, j) = 3
                            ArrayStateUp(i, j) = 3
                            ArrayStateDown(i, j) = 3
                            hennkou_ij(i, j) = 1
                            id_syouka = ArrayID(i, j)

                            '右
                            If ArrayTime_syoukastart(i, j + 1) > n And ArrayID(i, j + 1) = id_syouka Then
                                ArrayTime_syoukastart(i, j + 1) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i, j + 1) = 1
                                hennkou_ij(i, j + 1) = 1
                            End If
                            '左
                            If ArrayTime_syoukastart(i, j - 1) > n And ArrayID(i, j - 1) = id_syouka Then
                                ArrayTime_syoukastart(i, j - 1) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i, j - 1) = 1
                                hennkou_ij(i, j - 1) = 1
                            End If
                            '上
                            If ArrayTime_syoukastart(i - 1, j) > n And ArrayID(i - 1, j) = id_syouka Then
                                ArrayTime_syoukastart(i - 1, j) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i - 1, j) = 1
                                hennkou_ij(i - 1, j) = 1
                            End If
                            '下
                            If ArrayTime_syoukastart(i + 1, j) > n And ArrayID(i + 1, j) = id_syouka Then
                                ArrayTime_syoukastart(i + 1, j) = ArrayTime_syoukastart(i, j) + time_putout
                                ArrayStatesyouka(i + 1, j) = 1
                                hennkou_ij(i + 1, j) = 1
                            End If
                        End If


                        'フラシュオーバーまたは盛期火災ならば
                        'If arraystate3(i, j) <> ArrayState(i, j) Then
                        'If ArrayState(i, j) = 1 Or ArrayState(i, j) = 2 Then
                        If ArrayTime_fire(i, j) = n Or HighFireProcessTime(ArrayID(i, j)) = n Then


                            '右側
                            k1 = 1
                            Do While ArrayID(i, j + k1) = 0 AndAlso j + k1 < yoko - 1 AndAlso k1 < 4
                                k1 += 1
                            Loop
                            If ArrayID(i, j + k1) > 0 Then

                                'もし右隣が「計算前」なら
                                If ArrayStateRight(i, j + k1) = 0 Then

                                    id = ArrayID(i, j)
                                    pp = ArrayID(i, j + k1)
                                    idd = Buildingstructure(pp)

                                    'idが隣と一致するなら延焼する
                                    If ArrayID(i, j) = ArrayID(i, j + k1) Then

                                        '建物内の延焼 
                                        'もし「探索した建物の状態がフラッシュオーバー」かつ「その時間」ならば
                                        If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i, j + k1) <> 2 Then
                                            arraystate3(i, j) = ArrayState(i, j)
                                            time_right_inside = time_right(idd)
                                            r1 = ArrayTime_fire1(i, j) + time_right_inside
                                            If r1 < ArrayTime_fire1(i, j + k1) Then
                                                '燃焼時間を計算
                                                ArrayTime_fire1(i, j + k1) = ArrayTime_fire1(i, j) + time_right_inside
                                                '計算済みに更新
                                                ArrayState(i, j + k1) = 1
                                                ArrayStateRight(i, j + k1) = 1
                                                hennkou_ij(i, j + k1) = 1
                                            End If
                                        End If
                                    End If
                                    '建物間の延焼
                                    'もし「探索した建物の状態が盛期火災」
                                    If ArrayState(i, j) = 2 Then
                                        'もし盛期火災となる時間ならば
                                        If HighFireProcessTime(id) = n Then
                                            arraystate3(i, j) = ArrayState(i, j)
                                            r1 = HighFireProcessTime(id) + time_right(idd)
                                            If r1 < ArrayTime_fire1(i, j + k1) Then
                                                '燃焼時間を計算
                                                ArrayTime_fire1(i, j + k1) = HighFireProcessTime(id) + time_right(idd)
                                                '計算済みに更新
                                                ArrayState(i, j + k1) = 1
                                                ArrayStateRight(i, j + k1) = 1
                                                hennkou_ij(i, j + k1) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If



                            '左側

                            k2 = 1
                            Do While ArrayID(i, j - k2) = 0 AndAlso j - k2 > 0 AndAlso k2 < 4
                                k2 += 1
                            Loop

                            If ArrayID(i, j - k2) > 0 Then
                                'もし左の建物の状態が通常ならば
                                If ArrayStateLeft(i, j - k2) = 0 Then
                                    id2 = ArrayID(i, j)
                                    pp2 = ArrayID(i, j - k2)
                                    idd2 = Buildingstructure(pp2)
                                    '建物内
                                    'もし「探索した建物の状態がフラッシュオーバー」かつ「その時間」ならば
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i, j - k2) <> 2 Then
                                        arraystate3(i, j) = ArrayState(i, j)
                                        'idが隣と一致するなら延焼するならば
                                        If ArrayID(i, j) = ArrayID(i, j - k2) Then

                                            time_left_inside = time_left(idd2)
                                            r2 = ArrayTime_fire1(i, j) + time_left_inside
                                            If r2 < ArrayTime_fire1(i, j - k2) Then

                                                ArrayTime_fire1(i, j - k2) = ArrayTime_fire1(i, j) + time_left_inside
                                                ArrayState(i, j - k2) = 1
                                                ArrayStateLeft(i, j - k2) = 1
                                                hennkou_ij(i, j - k2) = 1
                                            End If
                                        End If
                                    End If

                                    '建物間
                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id2) = n Then
                                            arraystate3(i, j) = ArrayState(i, j)
                                            r2 = HighFireProcessTime(id2) + time_left(idd2)
                                            If r2 < ArrayTime_fire1(i, j - k2) Then
                                                ArrayTime_fire1(i, j - k2) = HighFireProcessTime(id2) + time_left(idd2)
                                                ArrayState(i, j - k2) = 1
                                                ArrayStateLeft(i, j - k2) = 1
                                                hennkou_ij(i, j - k2) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If


                            '上側

                            k3 = 1
                            Do While ArrayID(i - k3, j) = 0 AndAlso i - k3 > 0 AndAlso k3 < 4
                                k3 += 1
                            Loop
                            If ArrayID(i - k3, j) > 0 Then

                                If ArrayStateUp(i - k3, j) = 0 Then

                                    id3 = ArrayID(i, j)
                                    pp3 = ArrayID(i - k3, j)
                                    idd3 = Buildingstructure(pp3)
                                    '建物内
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i - k3, j) <> 2 Then
                                        arraystate3(i, j) = ArrayState(i, j)
                                        'idが隣と一致するなら延焼する
                                        If ArrayID(i, j) = ArrayID(i - k3, j) Then
                                            time_up_inside = time_up(idd3)
                                            r3 = ArrayTime_fire1(i, j) + time_up_inside
                                            If r3 < ArrayTime_fire1(i - k3, j) Then
                                                ArrayTime_fire1(i - k3, j) = ArrayTime_fire1(i, j) + time_up_inside
                                                ArrayState(i - k3, j) = 1
                                                ArrayStateUp(i - k3, j) = 1
                                                hennkou_ij(i - k3, j) = 1
                                            End If
                                        End If
                                    End If


                                    '建物間
                                    '建物が盛期火災過程ならば延焼する
                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id3) = n Then
                                            arraystate3(i, j) = ArrayState(i, j)
                                            r3 = HighFireProcessTime(id3) + time_up(idd3)
                                            If r3 < ArrayTime_fire1(i - k3, j) Then

                                                ArrayTime_fire1(i - k3, j) = HighFireProcessTime(id3) + time_up(idd3)
                                                ArrayState(i - k3, j) = 1
                                                ArrayStateUp(i - k3, j) = 1
                                                hennkou_ij(i - k3, j) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If



                            '下側

                            k4 = 1
                            Do While ArrayID(i + k4, j) = 0 AndAlso i + k4 < tate - 1 AndAlso k4 < 4
                                k4 += 1
                            Loop

                            If ArrayID(i + k4, j) > 0 Then

                                If ArrayStateDown(i + k4, j) = 0 Then
                                    id4 = ArrayID(i, j)
                                    pp4 = ArrayID(i + k4, j)
                                    idd4 = Buildingstructure(pp4)

                                    '建物内
                                    If ArrayState(i, j) = 1 And ArrayTime_fire1(i, j) = n And ArrayState(i + k4, j) <> 2 Then
                                        arraystate3(i, j) = ArrayState(i, j)
                                        'idが隣と一致するなら延焼する
                                        If ArrayID(i, j) = ArrayID(i + k4, j) Then

                                            time_down_inside = time_down(idd4)
                                            r4 = ArrayTime_fire1(i, j) + time_down_inside
                                            If r4 < ArrayTime_fire1(i + k4, j) Then
                                                ArrayTime_fire1(i + k4, j) = ArrayTime_fire1(i, j) + time_down_inside
                                                ArrayState(i + k4, j) = 1
                                                ArrayStateDown(i + k4, j) = 1
                                                hennkou_ij(i + k4, j) = 1
                                            End If

                                        End If
                                    End If

                                    '建物間
                                    '建物が盛期火災過程ならば延焼する

                                    If ArrayState(i, j) = 2 Then
                                        If HighFireProcessTime(id4) = n Then
                                            arraystate3(i, j) = ArrayState(i, j)
                                            r4 = HighFireProcessTime(id4) + time_down(idd4)
                                            If r4 < ArrayTime_fire1(i + k4, j) Then
                                                ArrayTime_fire1(i + k4, j) = HighFireProcessTime(id4) + time_down(idd4)
                                                ArrayState(i + k4, j) = 1
                                                ArrayStateDown(i + k4, j) = 1
                                                hennkou_ij(i + k4, j) = 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                    'End If
                    'End Sub)
                Next j
            Next i

            'フラッシュオーバー過程
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If ArrayTime_fire1(i, j) = n And arraystate2(i, j) = 0 Then
                        arraystate2(i, j) = 1
                        hennkou_ij(i, j) = 1
                        If Result(ArrayID(i, j)) = 0 Then
                            Result(ArrayID(i, j)) = 1
                            hennkou_id(ArrayID(i, j)) = 1
                        End If
                    End If
                Next
            Next

            '盛期火災過程

            For id9 = 1 To maxID
                If HighFireProcessTime(id9) = n And Result(id9) = 1 Then
                    Result(id9) = 2
                    hennkou_id(id9) = 1
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id9 Then
                                arraystate2(i, j) = 2
                                hennkou_ij(i, j) = 1
                            End If
                        Next
                    Next

                End If
            Next




            '衰退期
            For id8 = 1 To maxID
                If DiclineTime(id8) = n And Result(id8) = 2 Then
                    Result(id8) = 6
                    hennkou_id(id8) = 1
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id8 Then
                                arraystate2(i, j) = 6
                                hennkou_ij(i, j) = 1
                            End If
                        Next
                    Next

                End If
            Next

            For id7 = 1 To maxID
                count_syoukatyuu = 0
                If Result(id7) = 8 Then

                    For i3 = 0 To tate - 1
                        For j3 = 0 To yoko - 1
                            If ArrayID(i3, j3) = id7 And (arraystate2(i3, j3) = 3 Or arraystate2(i3, j3) = 4) Then
                                count_syoukatyuu += 1
                            End If
                        Next j3
                    Next i3



                    If count_syoukatyuu = MaxCell(id) Then
                        '消火完了
                        Result(id) = 9
                        hennkou_id(id) = 1
                    End If

                End If
            Next

            '破壊中⇒破壊できなかった
            For id5 = 1 To maxID
                If Result(id5) = 7 Then
                    For i = 0 To tate - 1
                        For j = 0 To yoko - 1
                            If ArrayID(i, j) = id5 And ArrayTime_fire1(i, j) = n - 1 Then
                                Result(id5) = 0
                                hennkou_id(id5) = 1
                            End If
                        Next
                    Next
                    If Result(id5) = 0 Then
                        For i = 0 To tate - 1
                            For j = 0 To yoko - 1
                                If ArrayID(i, j) = id5 Then
                                    arraystate2(i, j) = 0
                                    hennkou_ij(i, j) = 1
                                End If
                                If ArrayID(i, j) = id5 And ArrayTime_fire1(i, j) <= n Then
                                    arraystate2(i, j) = 1
                                    hennkou_ij(i, j) = 1
                                End If
                            Next
                        Next
                    End If
                End If

            Next

            '状況を記録
            For i2 = 0 To tate - 1
                For j2 = 0 To yoko - 1
                    arraystate_a(n Mod 2, i2, j2) = arraystate2(i2, j2)
                    If ArrayState(i2, j2) <> 0 Then
                        ennsyou += 1
                    End If
                Next
            Next
            For id6 = 1 To maxID
                result_a(n Mod 2, id6) = Result(id6)
            Next


            record_ennsyou(n) = ennsyou

        Next n



        gameovertime = 999
        sw2.Stop()
        Console.WriteLine("計算時間aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa：" & sw2.ElapsedMilliseconds)

        'Catch ex As Exception
        '    'Console.WriteLine(ex.Message)
        '    Console.WriteLine("キャンセル＜通常計算＞")
        'End Try
        'End SyncLock
    End Sub


    'Stopwatchオブジェクトを作成する 
    Dim sw3 As New System.Diagnostics.Stopwatch()
    Dim sw4 As New System.Diagnostics.Stopwatch()

    Dim hennkou_ij(tate - 1, yoko - 1)
    Dim hennkou_id(maxID)

    'Public Sub Record(n)
    Public Sub Record_inner(cancellationToken2 As CancellationToken)
        Try
            sw3.Reset()
            sw3.Start()

            'summaryに保存

            'If n Mod 2 = 0 Then
            For aaa = 0 To maxID
                If hennkou_id(aaa) = 1 Then
                    Count_seikiID_summary(aaa) = count_seikiID(aaa)
                    Dicline_Time_summary(aaa) = DiclineTime(aaa)
                    HighFireProcessTime_summary(aaa) = HighFireProcessTime(aaa)
                    arraytime_break2_summary(aaa) = arraytime_break2(aaa)
                    Result_summary(aaa) = Result(aaa)
                End If
            Next
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    If hennkou_ij(i, j) = 1 Then
                        ArrayTime_fire1_summary(i, j) = ArrayTime_fire1(i, j)
                        Arraystate_summary(i, j) = ArrayState(i, j)
                        arraystate2_summary(i, j) = arraystate2(i, j)
                        ArrayStateRight_summary(i, j) = ArrayStateRight(i, j)
                        ArrayStateLeft_summary(i, j) = ArrayStateLeft(i, j)
                        ArrayStateUp_summary(i, j) = ArrayStateUp(i, j)
                        ArrayStateDown_summary(i, j) = ArrayStateDown(i, j)
                    End If
                Next
            Next

            sw3.Stop()
            Console.WriteLine("レコードにかかった時間:" & sw3.ElapsedMilliseconds)
        Catch ex As Exception
            Console.WriteLine(ex.Message)

        End Try
    End Sub


    Dim Count_seikiID_summary(maxID)
    Dim Dicline_Time_summary(maxID)
    Dim HighFireProcessTime_summary(maxID)
    Dim ArrayTime_fire1_summary(tate - 1, yoko - 1)
    Dim Arraystate_summary(tate - 1, yoko - 1)
    Dim ArrayStateRight_summary(tate - 1, yoko - 1)
    Dim ArrayStateLeft_summary(tate - 1, yoko - 1)
    Dim ArrayStateUp_summary(tate - 1, yoko - 1)
    Dim ArrayStateDown_summary(tate - 1, yoko - 1)
    Dim arraytime_break2_summary(maxID)
    Dim arraystate2_summary(tate - 1, yoko - 1)
    Dim Result_summary(maxID)



    Dim count_burn As Short
    Dim flag As Integer = 0
    Dim count_car_a As Integer

    Dim result_a(1, maxID) As Integer
    Dim array(220000, 5) As Integer
    Dim Coordinate(tate - 1, yoko - 1, 1) As Integer
    Dim count_seikiID(maxID)
    Dim id_seiki As Integer
    Dim array_test() = {1, 2, 3, 4}
    Dim i_min
    Dim j_min
    Dim count_i
    Dim count_j
    Dim maxid_sikaku = 268
    Dim sikaku_tuika() = {412, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 408, 409, 410, 411}
    Dim sikaku_total2() = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 412, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 824, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 814, 815, 818, 820, 821, 822, 823}

    Dim sikaku_total(number_sikaku * 16 - 1)


    Dim i_p
    Dim j_p

    Dim id_timer As Integer

    Dim nibai = 412
    Dim count_start As Integer = 0


    '６角形
    Dim points = New Point(5) {}
    '８角形
    Dim points2 = New Point(7) {}
    Dim points4 = New Point(9) {}


    '６角形
    Dim points_2 = New Point(5) {}
    '８角形
    Dim points2_2 = New Point(7) {}


    Dim mokuzou = Color.Brown
    Dim bouka = Color.Green
    Dim taika = Color.Yellow


    Dim ii
    Dim ii2



    Private Sub byousya6()
        If result_a(count Mod 2, ii) = 6 Then
            g.FillPolygon(brush_black, points, FillMode.Alternate)
            g.DrawPolygon(mypen, points)
        ElseIf result_a(count Mod 2, ii) = 0 Then
            g.FillPolygon(brush_white, points, FillMode.Alternate)
            g.DrawPolygon(mypen, points)
        Else
            g.DrawPolygon(mypen, points)
        End If
    End Sub


    Private Sub byousya8()
        If result_a(count Mod 2, ii) = 6 Then
            g.FillPolygon(brush_black, points2, FillMode.Alternate)
            g.DrawPolygon(mypen, points2)
        ElseIf result_a(count Mod 2, ii) = 0 Then
            g.FillPolygon(brush_white, points2, FillMode.Alternate)
            g.DrawPolygon(mypen, points2)
        Else
            g.DrawPolygon(mypen, points2)
        End If
    End Sub


    Private Sub select_color()
        If Buildingstructure(ii) = 0 Then
            mypen.Color = mokuzou
        ElseIf Buildingstructure(ii) = 1 Then
            mypen.Color = bouka
        ElseIf Buildingstructure(ii) = 2 Then
            mypen.Color = taika
        End If
    End Sub

    Private Sub egaku_1(k, xx1, yy1)
        '269
        ii = 269 + k
        select_color()
        points(0) = New Point((0 + xx1) * q, (0 + yy1) * q)
        points(1) = New Point((2 + xx1) * q, (0 + yy1) * q)
        points(2) = New Point((2 + xx1) * q, (8 + yy1) * q)
        points(3) = New Point((8 + xx1) * q, (8 + yy1) * q)
        points(4) = New Point((8 + xx1) * q, (10 + yy1) * q)
        points(5) = New Point((0 + xx1) * q, (10 + yy1) * q)
        byousya6()

        '270
        ii = 270 + k
        select_color()
        points2(0) = New Point((10 + xx1) * q, (0 + yy1) * q)
        points2(1) = New Point((13 + xx1) * q, (0 + yy1) * q)
        points2(2) = New Point((13 + xx1) * q, (7 + yy1) * q)
        points2(3) = New Point((15 + xx1) * q, (7 + yy1) * q)
        points2(4) = New Point((15 + xx1) * q, (0 + yy1) * q)
        points2(5) = New Point((18 + xx1) * q, (0 + yy1) * q)
        points2(6) = New Point((18 + xx1) * q, (10 + yy1) * q)
        points2(7) = New Point((10 + xx1) * q, (10 + yy1) * q)
        byousya8()

        '271
        ii = 271 + k
        select_color()
        points(0) = New Point((20 + xx1) * q, (12 + yy1) * q)
        points(1) = New Point((26 + xx1) * q, (12 + yy1) * q)
        points(2) = New Point((26 + xx1) * q, (18 + yy1) * q)
        points(3) = New Point((34 + xx1) * q, (18 + yy1) * q)
        points(4) = New Point((34 + xx1) * q, (24 + yy1) * q)
        points(5) = New Point((20 + xx1) * q, (24 + yy1) * q)
        byousya6()
    End Sub
    Private Sub egaku_2(k, xx2, yy2)
        '272
        ii = 272 + k
        select_color()
        points(0) = New Point((0 + xx2) * q, (0 + yy2) * q)
        points(1) = New Point((24 + xx2) * q, (0 + yy2) * q)
        points(2) = New Point((24 + xx2) * q, (4 + yy2) * q)
        points(3) = New Point((18 + xx2) * q, (4 + yy2) * q)
        points(4) = New Point((18 + xx2) * q, (2 + yy2) * q)
        points(5) = New Point((0 + xx2) * q, (2 + yy2) * q)
        byousya6()

        '273
        ii = 273 + k
        select_color()
        points2(0) = New Point((8 + xx2) * q, (4 + yy2) * q)
        points2(1) = New Point((16 + xx2) * q, (4 + yy2) * q)
        points2(2) = New Point((16 + xx2) * q, (14 + yy2) * q)
        points2(3) = New Point((8 + xx2) * q, (14 + yy2) * q)
        points2(4) = New Point((8 + xx2) * q, (10 + yy2) * q)
        points2(5) = New Point((12 + xx2) * q, (10 + yy2) * q)
        points2(6) = New Point((12 + xx2) * q, (8 + yy2) * q)
        points2(7) = New Point((8 + xx2) * q, (8 + yy2) * q)
        byousya8()

        '274
        ii = 274 + k
        select_color()
        points(0) = New Point((18 + xx2) * q, (6 + yy2) * q)
        points(1) = New Point((24 + xx2) * q, (6 + yy2) * q)
        points(2) = New Point((24 + xx2) * q, (12 + yy2) * q)
        points(3) = New Point((34 + xx2) * q, (12 + yy2) * q)
        points(4) = New Point((34 + xx2) * q, (14 + yy2) * q)
        points(5) = New Point((18 + xx2) * q, (14 + yy2) * q)
        byousya6()
    End Sub
    Private Sub egaku_3(k, xx3, yy3)

        '275
        ii = 275 + k
        select_color()
        points(0) = New Point((24 + xx3) * q, (4 + yy3) * q)
        points(1) = New Point((28 + xx3) * q, (4 + yy3) * q)
        points(2) = New Point((28 + xx3) * q, (10 + yy3) * q)
        points(3) = New Point((34 + xx3) * q, (10 + yy3) * q)
        points(4) = New Point((34 + xx3) * q, (12 + yy3) * q)
        points(5) = New Point((24 + xx3) * q, (12 + yy3) * q)
        byousya6()

        '276
        ii = 276 + k
        select_color()
        points2(0) = New Point((22 + xx3) * q, (14 + yy3) * q)
        points2(1) = New Point((34 + xx3) * q, (14 + yy3) * q)
        points2(2) = New Point((34 + xx3) * q, (24 + yy3) * q)
        points2(3) = New Point((22 + xx3) * q, (24 + yy3) * q)
        points2(4) = New Point((22 + xx3) * q, (20 + yy3) * q)
        points2(5) = New Point((30 + xx3) * q, (20 + yy3) * q)
        points2(6) = New Point((30 + xx3) * q, (18 + yy3) * q)
        points2(7) = New Point((22 + xx3) * q, (18 + yy3) * q)
        byousya8()
    End Sub
    Private Sub egaku_4(k, xx4, yy4)

        '277
        ii = 277 + k
        select_color()
        points2(0) = New Point((0 + xx4) * q, (0 + yy4) * q)
        points2(1) = New Point((4 + xx4) * q, (0 + yy4) * q)
        points2(2) = New Point((4 + xx4) * q, (3 + yy4) * q)
        points2(3) = New Point((2 + xx4) * q, (3 + yy4) * q)
        points2(4) = New Point((2 + xx4) * q, (5 + yy4) * q)
        points2(5) = New Point((4 + xx4) * q, (5 + yy4) * q)
        points2(6) = New Point((4 + xx4) * q, (8 + yy4) * q)
        points2(7) = New Point((0 + xx4) * q, (8 + yy4) * q)
        byousya8()

        '278
        ii = 278 + k
        select_color()
        points(0) = New Point((12 + xx4) * q, (0 + yy4) * q)
        points(1) = New Point((14 + xx4) * q, (0 + yy4) * q)
        points(2) = New Point((14 + xx4) * q, (8 + yy4) * q)
        points(3) = New Point((20 + xx4) * q, (8 + yy4) * q)
        points(4) = New Point((20 + xx4) * q, (14 + yy4) * q)
        points(5) = New Point((12 + xx4) * q, (14 + yy4) * q)
        byousya6()

        '279
        ii = 279 + k
        select_color()
        points2(0) = New Point((22 + xx4) * q, (8 + yy4) * q)
        points2(1) = New Point((27 + xx4) * q, (8 + yy4) * q)
        points2(2) = New Point((27 + xx4) * q, (12 + yy4) * q)
        points2(3) = New Point((29 + xx4) * q, (12 + yy4) * q)
        points2(4) = New Point((29 + xx4) * q, (8 + yy4) * q)
        points2(5) = New Point((34 + xx4) * q, (8 + yy4) * q)
        points2(6) = New Point((34 + xx4) * q, (14 + yy4) * q)
        points2(7) = New Point((22 + xx4) * q, (14 + yy4) * q)
        byousya8()
    End Sub
    Private Sub egaku_5(k, xx5, yy5)

        '280
        ii = 280 + k
        select_color()
        points(0) = New Point((0 + xx5) * q, (0 + yy5) * q)
        points(1) = New Point((6 + xx5) * q, (0 + yy5) * q)
        points(2) = New Point((6 + xx5) * q, (8 + yy5) * q)
        points(3) = New Point((14 + xx5) * q, (8 + yy5) * q)
        points(4) = New Point((14 + xx5) * q, (12 + yy5) * q)
        points(5) = New Point((0 + xx5) * q, (12 + yy5) * q)
        byousya6()
        '281
        ii = 281 + k
        select_color()
        points(0) = New Point((0 + xx5) * q, (14 + yy5) * q)
        points(1) = New Point((4 + xx5) * q, (14 + yy5) * q)
        points(2) = New Point((4 + xx5) * q, (20 + yy5) * q)
        points(3) = New Point((10 + xx5) * q, (20 + yy5) * q)
        points(4) = New Point((10 + xx5) * q, (24 + yy5) * q)
        points(5) = New Point((0 + xx5) * q, (24 + yy5) * q)
        byousya6()

        '282
        ii = 282 + k
        select_color()
        points2(0) = New Point((26 + xx5) * q, (14 + yy5) * q)
        points2(1) = New Point((34 + xx5) * q, (14 + yy5) * q)
        points2(2) = New Point((34 + xx5) * q, (24 + yy5) * q)
        points2(3) = New Point((26 + xx5) * q, (24 + yy5) * q)
        points2(4) = New Point((26 + xx5) * q, (20 + yy5) * q)
        points2(5) = New Point((30 + xx5) * q, (20 + yy5) * q)
        points2(6) = New Point((30 + xx5) * q, (18 + yy5) * q)
        points2(7) = New Point((26 + xx5) * q, (18 + yy5) * q)
        byousya8()
    End Sub
    Private Sub egaku_6(k, xx6, yy6)
        '283
        ii = 283 + k
        select_color()
        points2(0) = New Point((0 + xx6) * q, (0 + yy6) * q)
        points2(1) = New Point((4 + xx6) * q, (0 + yy6) * q)
        points2(2) = New Point((4 + xx6) * q, (6 + yy6) * q)
        points2(3) = New Point((16 + xx6) * q, (6 + yy6) * q)
        points2(4) = New Point((16 + xx6) * q, (0 + yy6) * q)
        points2(5) = New Point((20 + xx6) * q, (0 + yy6) * q)
        points2(6) = New Point((20 + xx6) * q, (10 + yy6) * q)
        points2(7) = New Point((0 + xx6) * q, (10 + yy6) * q)
        byousya8()

        '284
        ii = 284 + k
        select_color()
        points(0) = New Point((0 + xx6) * q, (12 + yy6) * q)
        points(1) = New Point((20 + xx6) * q, (12 + yy6) * q)
        points(2) = New Point((20 + xx6) * q, (24 + yy6) * q)
        points(3) = New Point((18 + xx6) * q, (24 + yy6) * q)
        points(4) = New Point((18 + xx6) * q, (14 + yy6) * q)
        points(5) = New Point((0 + xx6) * q, (14 + yy6) * q)
        byousya6()
    End Sub
    Private Sub egaku_7(k, xx7, yy7)
        '285
        ii = 285 + k
        select_color()
        points(0) = New Point((0 + xx7) * q, (0 + yy7) * q)
        points(1) = New Point((2 + xx7) * q, (0 + yy7) * q)
        points(2) = New Point((2 + xx7) * q, (6 + yy7) * q)
        points(3) = New Point((8 + xx7) * q, (6 + yy7) * q)
        points(4) = New Point((8 + xx7) * q, (8 + yy7) * q)
        points(5) = New Point((0 + xx7) * q, (8 + yy7) * q)
        byousya6()

        '286
        ii = 286 + k
        select_color()
        points(0) = New Point((20 + xx7) * q, (0 + yy7) * q)
        points(1) = New Point((34 + xx7) * q, (0 + yy7) * q)
        points(2) = New Point((34 + xx7) * q, (4 + yy7) * q)
        points(3) = New Point((26 + xx7) * q, (4 + yy7) * q)
        points(4) = New Point((26 + xx7) * q, (8 + yy7) * q)
        points(5) = New Point((20 + xx7) * q, (8 + yy7) * q)
        byousya6()

    End Sub
    Private Sub egaku_8(k, xx8, yy8)
        '287
        ii = 287 + k
        select_color()

        points(0) = New Point((5 + xx8) * q, (5 + yy8) * q)
        points(1) = New Point((8 + xx8) * q, (5 + yy8) * q)
        points(2) = New Point((8 + xx8) * q, (8 + yy8) * q)
        points(3) = New Point((34 + xx8) * q, (8 + yy8) * q)
        points(4) = New Point((34 + xx8) * q, (12 + yy8) * q)
        points(5) = New Point((5 + xx8) * q, (12 + yy8) * q)
        byousya6()

        '288
        ii = 288 + k
        select_color()
        points(0) = New Point((22 + xx8) * q, (22 + yy8) * q)
        points(1) = New Point((28 + xx8) * q, (22 + yy8) * q)
        points(2) = New Point((28 + xx8) * q, (14 + yy8) * q)
        points(3) = New Point((34 + xx8) * q, (14 + yy8) * q)
        points(4) = New Point((34 + xx8) * q, (24 + yy8) * q)
        points(5) = New Point((22 + xx8) * q, (24 + yy8) * q)
        byousya6()
    End Sub
    Private Sub egaku_9(k, xx9, yy9)
        '289
        ii = 289 + k
        select_color()
        points(0) = New Point((6 + xx9) * q, (6 + yy9) * q)
        points(1) = New Point((12 + xx9) * q, (6 + yy9) * q)
        points(2) = New Point((12 + xx9) * q, (0 + yy9) * q)
        points(3) = New Point((16 + xx9) * q, (0 + yy9) * q)
        points(4) = New Point((16 + xx9) * q, (12 + yy9) * q)
        points(5) = New Point((6 + xx9) * q, (12 + yy9) * q)
        byousya6()

        '290
        ii = 290 + k
        select_color()

        points(0) = New Point((12 + xx9) * q, (14 + yy9) * q)
        points(1) = New Point((18 + xx9) * q, (14 + yy9) * q)
        points(2) = New Point((18 + xx9) * q, (10 + yy9) * q)
        points(3) = New Point((24 + xx9) * q, (10 + yy9) * q)
        points(4) = New Point((24 + xx9) * q, (18 + yy9) * q)
        points(5) = New Point((12 + xx9) * q, (18 + yy9) * q)
        byousya6()

        '291
        ii = 291 + k
        select_color()
        points(0) = New Point((26 + xx9) * q, (14 + yy9) * q)
        points(1) = New Point((34 + xx9) * q, (14 + yy9) * q)
        points(2) = New Point((34 + xx9) * q, (24 + yy9) * q)
        points(3) = New Point((19 + xx9) * q, (24 + yy9) * q)
        points(4) = New Point((19 + xx9) * q, (20 + yy9) * q)
        points(5) = New Point((26 + xx9) * q, (20 + yy9) * q)
        byousya6()
    End Sub
    Private Sub egaku_10(k, xx10, yy10)
        '292
        ii = 292 + k
        select_color()
        points(0) = New Point((14 + xx10) * q, (16 + yy10) * q)
        points(1) = New Point((22 + xx10) * q, (16 + yy10) * q)
        points(2) = New Point((22 + xx10) * q, (24 + yy10) * q)
        points(3) = New Point((8 + xx10) * q, (24 + yy10) * q)
        points(4) = New Point((8 + xx10) * q, (20 + yy10) * q)
        points(5) = New Point((14 + xx10) * q, (20 + yy10) * q)
        byousya6()

    End Sub
    Private Sub egaku_11(k, xx11, yy11)
        '293
        ii = 293 + k
        select_color()
        points(0) = New Point((14 + xx11) * q, (0 + yy11) * q)
        points(1) = New Point((18 + xx11) * q, (0 + yy11) * q)
        points(2) = New Point((18 + xx11) * q, (10 + yy11) * q)
        points(3) = New Point((6 + xx11) * q, (10 + yy11) * q)
        points(4) = New Point((6 + xx11) * q, (6 + yy11) * q)
        points(5) = New Point((14 + xx11) * q, (6 + yy11) * q)
        byousya6()

        '294
        ii = 294 + k
        select_color()
        points(0) = New Point((20 + xx11) * q, (8 + yy11) * q)
        points(1) = New Point((28 + xx11) * q, (8 + yy11) * q)
        points(2) = New Point((28 + xx11) * q, (16 + yy11) * q)
        points(3) = New Point((14 + xx11) * q, (16 + yy11) * q)
        points(4) = New Point((14 + xx11) * q, (12 + yy11) * q)
        points(5) = New Point((20 + xx11) * q, (12 + yy11) * q)
        byousya6()

    End Sub
    Private Sub egaku_12(k, xx12, yy12)
        '295
        ii = 295 + k
        select_color()
        points(0) = New Point((0 + xx12) * q, (0 + yy12) * q)
        points(1) = New Point((20 + xx12) * q, (0 + yy12) * q)
        points(2) = New Point((20 + xx12) * q, (14 + yy12) * q)
        points(3) = New Point((16 + xx12) * q, (14 + yy12) * q)
        points(4) = New Point((16 + xx12) * q, (4 + yy12) * q)
        points(5) = New Point((0 + xx12) * q, (4 + yy12) * q)
        byousya6()

        '296
        ii = 296 + k
        select_color()
        points(0) = New Point((0 + xx12) * q, (16 + yy12) * q)
        points(1) = New Point((8 + xx12) * q, (16 + yy12) * q)
        points(2) = New Point((8 + xx12) * q, (22 + yy12) * q)
        points(3) = New Point((18 + xx12) * q, (22 + yy12) * q)
        points(4) = New Point((18 + xx12) * q, (24 + yy12) * q)
        points(5) = New Point((0 + xx12) * q, (24 + yy12) * q)
        byousya6()
    End Sub
    Private Sub egaku_13(k, xx13, yy13)
        '297
        ii = 297 + k
        select_color()
        points(0) = New Point((20 + xx13) * q, (0 + yy13) * q)
        points(1) = New Point((24 + xx13) * q, (0 + yy13) * q)
        points(2) = New Point((24 + xx13) * q, (18 + yy13) * q)
        points(3) = New Point((0 + xx13) * q, (18 + yy13) * q)
        points(4) = New Point((0 + xx13) * q, (14 + yy13) * q)
        points(5) = New Point((20 + xx13) * q, (14 + yy13) * q)
        byousya6()


        '298
        ii = 298 + k
        select_color()
        points2(0) = New Point((26 + xx13) * q, (0 + yy13) * q)
        points2(1) = New Point((34 + xx13) * q, (0 + yy13) * q)
        points2(2) = New Point((34 + xx13) * q, (6 + yy13) * q)
        points2(3) = New Point((30 + xx13) * q, (6 + yy13) * q)
        points2(4) = New Point((30 + xx13) * q, (8 + yy13) * q)
        points2(5) = New Point((34 + xx13) * q, (8 + yy13) * q)
        points2(6) = New Point((34 + xx13) * q, (13 + yy13) * q)
        points2(7) = New Point((26 + xx13) * q, (13 + yy13) * q)
        byousya8()
    End Sub
    Private Sub egaku_14(k, xx14, yy14)
        '299
        ii = 299 + k
        select_color()
        points2(0) = New Point((26 + xx14) * q, (8 + yy14) * q)
        points2(1) = New Point((29 + xx14) * q, (8 + yy14) * q)
        points2(2) = New Point((29 + xx14) * q, (14 + yy14) * q)
        points2(3) = New Point((31 + xx14) * q, (14 + yy14) * q)
        points2(4) = New Point((31 + xx14) * q, (8 + yy14) * q)
        points2(5) = New Point((34 + xx14) * q, (8 + yy14) * q)
        points2(6) = New Point((34 + xx14) * q, (18 + yy14) * q)
        points2(7) = New Point((26 + xx14) * q, (18 + yy14) * q)
        byousya8()

    End Sub
    Private Sub egaku_15(k, xx15, yy15)

        '300
        ii = 300 + k
        select_color()
        points2(0) = New Point((10 + xx15) * q, (0 + yy15) * q)
        points2(1) = New Point((12 + xx15) * q, (0 + yy15) * q)
        points2(2) = New Point((12 + xx15) * q, (12 + yy15) * q)
        points2(3) = New Point((0 + xx15) * q, (12 + yy15) * q)
        points2(4) = New Point((0 + xx15) * q, (10 + yy15) * q)
        points2(5) = New Point((8 + xx15) * q, (10 + yy15) * q)
        points2(6) = New Point((8 + xx15) * q, (8 + yy15) * q)
        points2(7) = New Point((10 + xx15) * q, (8 + yy15) * q)
        byousya8()

        '301
        ii = 301 + k
        select_color()
        points(0) = New Point((0 + xx15) * q, (14 + yy15) * q)
        points(1) = New Point((4 + xx15) * q, (14 + yy15) * q)
        points(2) = New Point((4 + xx15) * q, (20 + yy15) * q)
        points(3) = New Point((12 + xx15) * q, (20 + yy15) * q)
        points(4) = New Point((12 + xx15) * q, (24 + yy15) * q)
        points(5) = New Point((0 + xx15) * q, (24 + yy15) * q)
        byousya6()
    End Sub


    Private Sub byousya6_2()
        If result_a(count Mod 2, ii2) = 6 Then
            g7.FillPolygon(brush_black5, points_2, FillMode.Alternate)
            g7.DrawPolygon(mypen7, points_2)
        ElseIf result_a(count Mod 2, ii2) = 0 Then
            g7.FillPolygon(brush_white5, points_2, FillMode.Alternate)
            g7.DrawPolygon(mypen7, points_2)
        Else
            g7.DrawPolygon(mypen7, points_2)
        End If
    End Sub


    Private Sub byousya8_2()
        If result_a(count Mod 2, ii2) = 6 Then
            g7.FillPolygon(brush_black5, points2_2, FillMode.Alternate)
            g7.DrawPolygon(mypen7, points2_2)
        ElseIf result_a(count Mod 2, ii2) = 0 Then
            g7.FillPolygon(brush_white5, points2_2, FillMode.Alternate)
            g7.DrawPolygon(mypen7, points2_2)
        Else
            g7.DrawPolygon(mypen7, points2_2)
        End If
    End Sub


    Private Sub select_color_2()
        If Buildingstructure(ii2) = 0 Then
            mypen7.Color = mokuzou
        ElseIf Buildingstructure(ii2) = 1 Then
            mypen7.Color = bouka
        ElseIf Buildingstructure(ii2) = 2 Then
            mypen7.Color = taika
        End If
    End Sub



    Private Sub egaku_16(k, xx16, yy16)
        '302
        ii2 = 302 + k
        select_color_2()
        points_2(0) = New Point((12 + xx16) * q, (10 + yy16) * q)
        points_2(1) = New Point((20 + xx16) * q, (10 + yy16) * q)
        points_2(2) = New Point((20 + xx16) * q, (20 + yy16) * q)
        points_2(3) = New Point((24 + xx16) * q, (20 + yy16) * q)
        points_2(4) = New Point((24 + xx16) * q, (24 + yy16) * q)
        points_2(5) = New Point((12 + xx16) * q, (24 + yy16) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_17(k, xx17, yy17)
        '303
        ii2 = 303 + k
        select_color_2()
        points2_2(0) = New Point((10 + xx17) * q, (6 + yy17) * q)
        points2_2(1) = New Point((14 + xx17) * q, (6 + yy17) * q)
        points2_2(2) = New Point((14 + xx17) * q, (10 + yy17) * q)
        points2_2(3) = New Point((16 + xx17) * q, (10 + yy17) * q)
        points2_2(4) = New Point((16 + xx17) * q, (6 + yy17) * q)
        points2_2(5) = New Point((20 + xx17) * q, (6 + yy17) * q)
        points2_2(6) = New Point((20 + xx17) * q, (12 + yy17) * q)
        points2_2(7) = New Point((10 + xx17) * q, (12 + yy17) * q)
        byousya8_2()

        '304
        ii2 = 304 + k
        select_color_2()
        points_2(0) = New Point((16 + xx17) * q, (14 + yy17) * q)
        points_2(1) = New Point((34 + xx17) * q, (14 + yy17) * q)
        points_2(2) = New Point((34 + xx17) * q, (24 + yy17) * q)
        points_2(3) = New Point((30 + xx17) * q, (24 + yy17) * q)
        points_2(4) = New Point((30 + xx17) * q, (18 + yy17) * q)
        points_2(5) = New Point((16 + xx17) * q, (18 + yy17) * q)
        byousya6_2()

    End Sub
    Private Sub egaku_18(k, xx18, yy18)
        '305
        ii2 = 305 + k
        select_color_2()
        points_2(0) = New Point((8 + xx18) * q, (10 + yy18) * q)
        points_2(1) = New Point((11 + xx18) * q, (10 + yy18) * q)
        points_2(2) = New Point((11 + xx18) * q, (15 + yy18) * q)
        points_2(3) = New Point((18 + xx18) * q, (15 + yy18) * q)
        points_2(4) = New Point((18 + xx18) * q, (18 + yy18) * q)
        points_2(5) = New Point((8 + xx18) * q, (18 + yy18) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_19(k, xx19, yy19)
        '306
        ii2 = 306 + k
        select_color_2()
        points_2(0) = New Point((0 + xx19) * q, (0 + yy19) * q)
        points_2(1) = New Point((14 + xx19) * q, (0 + yy19) * q)
        points_2(2) = New Point((14 + xx19) * q, (4 + yy19) * q)
        points_2(3) = New Point((4 + xx19) * q, (4 + yy19) * q)
        points_2(4) = New Point((4 + xx19) * q, (18 + yy19) * q)
        points_2(5) = New Point((0 + xx19) * q, (18 + yy19) * q)
        byousya6_2()


        '307
        ii2 = 307 + k
        select_color_2()
        points_2(0) = New Point((30 + xx19) * q, (0 + yy19) * q)
        points_2(1) = New Point((34 + xx19) * q, (0 + yy19) * q)
        points_2(2) = New Point((34 + xx19) * q, (10 + yy19) * q)
        points_2(3) = New Point((26 + xx19) * q, (10 + yy19) * q)
        points_2(4) = New Point((26 + xx19) * q, (6 + yy19) * q)
        points_2(5) = New Point((30 + xx19) * q, (6 + yy19) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_20(k, xx20, yy20)
        '308
        ii2 = 308 + k
        select_color_2()
        points_2(0) = New Point((10 + xx20) * q, (12 + yy20) * q)
        points_2(1) = New Point((14 + xx20) * q, (12 + yy20) * q)
        points_2(2) = New Point((14 + xx20) * q, (24 + yy20) * q)
        points_2(3) = New Point((7 + xx20) * q, (24 + yy20) * q)
        points_2(4) = New Point((7 + xx20) * q, (18 + yy20) * q)
        points_2(5) = New Point((10 + xx20) * q, (18 + yy20) * q)
        byousya6_2()

        '309
        ii2 = 309 + k
        select_color_2()
        points_2(0) = New Point((24 + xx20) * q, (0 + yy20) * q)
        points_2(1) = New Point((26 + xx20) * q, (0 + yy20) * q)
        points_2(2) = New Point((26 + xx20) * q, (10 + yy20) * q)
        points_2(3) = New Point((16 + xx20) * q, (10 + yy20) * q)
        points_2(4) = New Point((16 + xx20) * q, (6 + yy20) * q)
        points_2(5) = New Point((24 + xx20) * q, (6 + yy20) * q)
        byousya6_2()

        '310
        ii2 = 310 + k
        select_color_2()
        points_2(0) = New Point((16 + xx20) * q, (12 + yy20) * q)
        points_2(1) = New Point((20 + xx20) * q, (12 + yy20) * q)
        points_2(2) = New Point((20 + xx20) * q, (18 + yy20) * q)
        points_2(3) = New Point((28 + xx20) * q, (18 + yy20) * q)
        points_2(4) = New Point((28 + xx20) * q, (24 + yy20) * q)
        points_2(5) = New Point((16 + xx20) * q, (24 + yy20) * q)
        byousya6_2()

        '311
        ii2 = 311 + k
        select_color_2()
        points_2(0) = New Point((22 + xx20) * q, (12 + yy20) * q)
        points_2(1) = New Point((34 + xx20) * q, (12 + yy20) * q)
        points_2(2) = New Point((34 + xx20) * q, (24 + yy20) * q)
        points_2(3) = New Point((30 + xx20) * q, (24 + yy20) * q)
        points_2(4) = New Point((30 + xx20) * q, (16 + yy20) * q)
        points_2(5) = New Point((22 + xx20) * q, (16 + yy20) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_21(k, xx21, yy21)

        '312
        ii2 = 312 + k
        select_color_2()
        points_2(0) = New Point((8 + xx21) * q, (16 + yy21) * q)
        points_2(1) = New Point((11 + xx21) * q, (16 + yy21) * q)
        points_2(2) = New Point((11 + xx21) * q, (21 + yy21) * q)
        points_2(3) = New Point((16 + xx21) * q, (21 + yy21) * q)
        points_2(4) = New Point((16 + xx21) * q, (24 + yy21) * q)
        points_2(5) = New Point((8 + xx21) * q, (24 + yy21) * q)
        byousya6_2()

        '313
        ii2 = 313 + k
        select_color_2()
        points_2(0) = New Point((24 + xx21) * q, (16 + yy21) * q)
        points_2(1) = New Point((30 + xx21) * q, (16 + yy21) * q)
        points_2(2) = New Point((30 + xx21) * q, (10 + yy21) * q)
        points_2(3) = New Point((34 + xx21) * q, (10 + yy21) * q)
        points_2(4) = New Point((34 + xx21) * q, (24 + yy21) * q)
        points_2(5) = New Point((24 + xx21) * q, (24 + yy21) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_22(k, xx22, yy22)
        '314
        ii2 = 314 + k
        select_color_2()

        points_2(0) = New Point((0 + xx22) * q, (6 + yy22) * q)
        points_2(1) = New Point((2 + xx22) * q, (6 + yy22) * q)
        points_2(2) = New Point((2 + xx22) * q, (14 + yy22) * q)
        points_2(3) = New Point((8 + xx22) * q, (14 + yy22) * q)
        points_2(4) = New Point((8 + xx22) * q, (16 + yy22) * q)
        points_2(5) = New Point((0 + xx22) * q, (16 + yy22) * q)
        byousya6_2()

        '315
        ii2 = 315 + k
        select_color()
        points2_2(0) = New Point((10 + xx22) * q, (6 + yy22) * q)
        points2_2(1) = New Point((13 + xx22) * q, (6 + yy22) * q)
        points2_2(2) = New Point((13 + xx22) * q, (12 + yy22) * q)
        points2_2(3) = New Point((15 + xx22) * q, (12 + yy22) * q)
        points2_2(4) = New Point((15 + xx22) * q, (6 + yy22) * q)
        points2_2(5) = New Point((18 + xx22) * q, (6 + yy22) * q)
        points2_2(6) = New Point((18 + xx22) * q, (16 + yy22) * q)
        points2_2(7) = New Point((10 + xx22) * q, (16 + yy22) * q)
        byousya8_2()
    End Sub
    Private Sub egaku_23(k, xx23, yy23)

        '316
        ii2 = 316 + k
        select_color_2()
        points_2(0) = New Point((0 + xx23) * q, (0 + yy23) * q)
        points_2(1) = New Point((14 + xx23) * q, (0 + yy23) * q)
        points_2(2) = New Point((14 + xx23) * q, (10 + yy23) * q)
        points_2(3) = New Point((12 + xx23) * q, (10 + yy23) * q)
        points_2(4) = New Point((12 + xx23) * q, (2 + yy23) * q)
        points_2(5) = New Point((0 + xx23) * q, (2 + yy23) * q)
        byousya6_2()

        '317
        ii2 = 317 + k
        select_color()
        points_2(0) = New Point((16 + xx23) * q, (0 + yy23) * q)
        points_2(1) = New Point((18 + xx23) * q, (0 + yy23) * q)
        points_2(2) = New Point((18 + xx23) * q, (8 + yy23) * q)
        points_2(3) = New Point((24 + xx23) * q, (8 + yy23) * q)
        points_2(4) = New Point((24 + xx23) * q, (10 + yy23) * q)
        points_2(5) = New Point((16 + xx23) * q, (10 + yy23) * q)
        byousya6_2()

        '318
        ii2 = 318 + k
        select_color_2()
        points_2(0) = New Point((26 + xx23) * q, (10 + yy23) * q)
        points_2(1) = New Point((34 + xx23) * q, (10 + yy23) * q)
        points_2(2) = New Point((34 + xx23) * q, (18 + yy23) * q)
        points_2(3) = New Point((32 + xx23) * q, (18 + yy23) * q)
        points_2(4) = New Point((32 + xx23) * q, (12 + yy23) * q)
        points_2(5) = New Point((26 + xx23) * q, (12 + yy23) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_24(k, xx24, yy24)

        '319
        ii2 = 319 + k
        select_color_2()
        points_2(0) = New Point((0 + xx24) * q, (0 + yy24) * q)
        points_2(1) = New Point((2 + xx24) * q, (0 + yy24) * q)
        points_2(2) = New Point((2 + xx24) * q, (6 + yy24) * q)
        points_2(3) = New Point((8 + xx24) * q, (6 + yy24) * q)
        points_2(4) = New Point((8 + xx24) * q, (8 + yy24) * q)
        points_2(5) = New Point((0 + xx24) * q, (8 + yy24) * q)
        byousya6_2()


        '320
        ii2 = 320 + k
        select_color_2()
        points_2(0) = New Point((20 + xx24) * q, (0 + yy24) * q)
        points_2(1) = New Point((34 + xx24) * q, (0 + yy24) * q)
        points_2(2) = New Point((34 + xx24) * q, (2 + yy24) * q)
        points_2(3) = New Point((26 + xx24) * q, (2 + yy24) * q)
        points_2(4) = New Point((26 + xx24) * q, (8 + yy24) * q)
        points_2(5) = New Point((20 + xx24) * q, (8 + yy24) * q)
        byousya6_2()


        '321
        ii2 = 321 + k
        select_color_2()
        points_2(0) = New Point((18 + xx24) * q, (21 + yy24) * q)
        points_2(1) = New Point((23 + xx24) * q, (21 + yy24) * q)
        points_2(2) = New Point((23 + xx24) * q, (16 + yy24) * q)
        points_2(3) = New Point((26 + xx24) * q, (16 + yy24) * q)
        points_2(4) = New Point((26 + xx24) * q, (24 + yy24) * q)
        points_2(5) = New Point((18 + xx24) * q, (24 + yy24) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_25(k, xx25, yy25)
        '322
        ii2 = 322 + k
        select_color_2()
        points_2(0) = New Point((4 + xx25) * q, (6 + yy25) * q)
        points_2(1) = New Point((8 + xx25) * q, (6 + yy25) * q)
        points_2(2) = New Point((8 + xx25) * q, (20 + yy25) * q)
        points_2(3) = New Point((0 + xx25) * q, (20 + yy25) * q)
        points_2(4) = New Point((0 + xx25) * q, (16 + yy25) * q)
        points_2(5) = New Point((4 + xx25) * q, (16 + yy25) * q)
        byousya6_2()

        '323
        ii2 = 323 + k
        select_color_2()
        points_2(0) = New Point((16 + xx25) * q, (6 + yy25) * q)
        points_2(1) = New Point((22 + xx25) * q, (6 + yy25) * q)
        points_2(2) = New Point((22 + xx25) * q, (0 + yy25) * q)
        points_2(3) = New Point((26 + xx25) * q, (0 + yy25) * q)
        points_2(4) = New Point((26 + xx25) * q, (12 + yy25) * q)
        points_2(5) = New Point((16 + xx25) * q, (12 + yy25) * q)
        byousya6_2()

        '324
        ii2 = 324 + k
        select_color_2()
        points_2(0) = New Point((22 + xx25) * q, (14 + yy25) * q)
        points_2(1) = New Point((28 + xx25) * q, (14 + yy25) * q)
        points_2(2) = New Point((28 + xx25) * q, (8 + yy25) * q)
        points_2(3) = New Point((34 + xx25) * q, (8 + yy25) * q)
        points_2(4) = New Point((34 + xx25) * q, (20 + yy25) * q)
        points_2(5) = New Point((22 + xx25) * q, (20 + yy25) * q)
        byousya6_2()
    End Sub
    'Private Sub egaku_26(k, xx26, yy26)
    'End Sub

    Private Sub egaku_27(k, xx27, yy27)
        '343
        ii2 = 343 + k
        select_color_2()
        points_2(0) = New Point((8 + xx27) * q, (8 + yy27) * q)
        points_2(1) = New Point((12 + xx27) * q, (8 + yy27) * q)
        points_2(2) = New Point((12 + xx27) * q, (24 + yy27) * q)
        points_2(3) = New Point((6 + xx27) * q, (24 + yy27) * q)
        points_2(4) = New Point((6 + xx27) * q, (16 + yy27) * q)
        points_2(5) = New Point((8 + xx27) * q, (16 + yy27) * q)
        byousya6_2()



        '339
        ii2 = 339 + k
        select_color_2()
        points_2(0) = New Point((16 + xx27) * q, (0 + yy27) * q)
        points_2(1) = New Point((26 + xx27) * q, (0 + yy27) * q)
        points_2(2) = New Point((26 + xx27) * q, (14 + yy27) * q)
        points_2(3) = New Point((22 + xx27) * q, (14 + yy27) * q)
        points_2(4) = New Point((22 + xx27) * q, (6 + yy27) * q)
        points_2(5) = New Point((16 + xx27) * q, (6 + yy27) * q)
        byousya6_2()

    End Sub
    Private Sub egaku_28(k, xx28, yy28)
        '348
        ii2 = 348 + k
        select_color_2()
        points_2(0) = New Point((0 + xx28) * q, (0 + yy28) * q)
        points_2(1) = New Point((4 + xx28) * q, (0 + yy28) * q)
        points_2(2) = New Point((4 + xx28) * q, (6 + yy28) * q)
        points_2(3) = New Point((6 + xx28) * q, (6 + yy28) * q)
        points_2(4) = New Point((6 + xx28) * q, (10 + yy28) * q)
        points_2(5) = New Point((0 + xx28) * q, (10 + yy28) * q)
        byousya6_2()



        '352
        ii2 = 352 + k
        select_color_2()
        points_2(0) = New Point((8 + xx28) * q, (6 + yy28) * q)
        points_2(1) = New Point((14 + xx28) * q, (6 + yy28) * q)
        points_2(2) = New Point((14 + xx28) * q, (10 + yy28) * q)
        points_2(3) = New Point((12 + xx28) * q, (10 + yy28) * q)
        points_2(4) = New Point((12 + xx28) * q, (16 + yy28) * q)
        points_2(5) = New Point((8 + xx28) * q, (16 + yy28) * q)
        byousya6_2()



        '354
        ii2 = 354 + k
        select_color_2()
        points_2(0) = New Point((12 + xx28) * q, (0 + yy28) * q)
        points_2(1) = New Point((20 + xx28) * q, (0 + yy28) * q)
        points_2(2) = New Point((20 + xx28) * q, (10 + yy28) * q)
        points_2(3) = New Point((16 + xx28) * q, (10 + yy28) * q)
        points_2(4) = New Point((16 + xx28) * q, (4 + yy28) * q)
        points_2(5) = New Point((12 + xx28) * q, (4 + yy28) * q)
        byousya6_2()



    End Sub
    Private Sub egaku_29(k, xx29, yy29)
        '368
        ii2 = 368 + k
        select_color_2()
        points_2(0) = New Point((14 + xx29) * q, (0 + yy29) * q)
        points_2(1) = New Point((16 + xx29) * q, (0 + yy29) * q)
        points_2(2) = New Point((16 + xx29) * q, (24 + yy29) * q)
        points_2(3) = New Point((12 + xx29) * q, (24 + yy29) * q)
        points_2(4) = New Point((12 + xx29) * q, (16 + yy29) * q)
        points_2(5) = New Point((14 + xx29) * q, (16 + yy29) * q)
        byousya6_2()


        '369
        ii2 = 369 + k
        select_color_2()
        points_2(0) = New Point((18 + xx29) * q, (0 + yy29) * q)
        points_2(1) = New Point((30 + xx29) * q, (0 + yy29) * q)
        points_2(2) = New Point((30 + xx29) * q, (8 + yy29) * q)
        points_2(3) = New Point((26 + xx29) * q, (8 + yy29) * q)
        points_2(4) = New Point((26 + xx29) * q, (4 + yy29) * q)
        points_2(5) = New Point((18 + xx29) * q, (4 + yy29) * q)
        byousya6_2()

    End Sub
    Private Sub egaku_30(k, xx30, yy30)
        '377
        ii2 = 377 + k
        select_color_2()
        points_2(0) = New Point((8 + xx30) * q, (0 + yy30) * q)
        points_2(1) = New Point((14 + xx30) * q, (0 + yy30) * q)
        points_2(2) = New Point((14 + xx30) * q, (14 + yy30) * q)
        points_2(3) = New Point((0 + xx30) * q, (14 + yy30) * q)
        points_2(4) = New Point((0 + xx30) * q, (8 + yy30) * q)
        points_2(5) = New Point((8 + xx30) * q, (8 + yy30) * q)
        byousya6_2()

        '380
        ii2 = 380 + k
        select_color_2()
        points_2(0) = New Point((16 + xx30) * q, (0 + yy30) * q)
        points_2(1) = New Point((26 + xx30) * q, (0 + yy30) * q)
        points_2(2) = New Point((26 + xx30) * q, (14 + yy30) * q)
        points_2(3) = New Point((22 + xx30) * q, (14 + yy30) * q)
        points_2(4) = New Point((22 + xx30) * q, (4 + yy30) * q)
        points_2(5) = New Point((16 + xx30) * q, (4 + yy30) * q)
        byousya6_2()

    End Sub
    Private Sub egaku_31(k, xx31, yy31)
        '393
        ii2 = 393 + k
        select_color_2()
        points_2(0) = New Point((16 + xx31) * q, (8 + yy31) * q)
        points_2(1) = New Point((20 + xx31) * q, (8 + yy31) * q)
        points_2(2) = New Point((20 + xx31) * q, (20 + yy31) * q)
        points_2(3) = New Point((8 + xx31) * q, (20 + yy31) * q)
        points_2(4) = New Point((8 + xx31) * q, (16 + yy31) * q)
        points_2(5) = New Point((16 + xx31) * q, (16 + yy31) * q)
        byousya6_2()
    End Sub
    Private Sub egaku_32(k, xx32, yy32)

        '401
        ii2 = 401 + k
        select_color_2()
        points_2(0) = New Point((0 + xx32) * q, (0 + yy32) * q)
        points_2(1) = New Point((10 + xx32) * q, (0 + yy32) * q)
        points_2(2) = New Point((10 + xx32) * q, (4 + yy32) * q)
        points_2(3) = New Point((4 + xx32) * q, (4 + yy32) * q)
        points_2(4) = New Point((4 + xx32) * q, (8 + yy32) * q)
        points_2(5) = New Point((0 + xx32) * q, (8 + yy32) * q)
        byousya6_2()

        '404
        ii2 = 404 + k
        select_color_2()
        points2_2(0) = New Point((6 + xx32) * q, (14 + yy32) * q)
        points2_2(1) = New Point((10 + xx32) * q, (14 + yy32) * q)
        points2_2(2) = New Point((10 + xx32) * q, (18 + yy32) * q)
        points2_2(3) = New Point((12 + xx32) * q, (18 + yy32) * q)
        points2_2(4) = New Point((12 + xx32) * q, (14 + yy32) * q)
        points2_2(5) = New Point((16 + xx32) * q, (14 + yy32) * q)
        points2_2(6) = New Point((16 + xx32) * q, (24 + yy32) * q)
        points2_2(7) = New Point((6 + xx32) * q, (24 + yy32) * q)
        byousya8_2()



        '405
        ii2 = 405 + k
        select_color_2()
        points_2(0) = New Point((12 + xx32) * q, (0 + yy32) * q)
        points_2(1) = New Point((18 + xx32) * q, (0 + yy32) * q)
        points_2(2) = New Point((18 + xx32) * q, (12 + yy32) * q)
        points_2(3) = New Point((14 + xx32) * q, (12 + yy32) * q)
        points_2(4) = New Point((14 + xx32) * q, (4 + yy32) * q)
        points_2(5) = New Point((12 + xx32) * q, (4 + yy32) * q)
        byousya6_2()



        '407
        ii2 = 407 + k
        select_color_2()
        points_2(0) = New Point((20 + xx32) * q, (8 + yy32) * q)
        points_2(1) = New Point((26 + xx32) * q, (8 + yy32) * q)
        points_2(2) = New Point((26 + xx32) * q, (18 + yy32) * q)
        points_2(3) = New Point((18 + xx32) * q, (18 + yy32) * q)
        points_2(4) = New Point((18 + xx32) * q, (14 + yy32) * q)
        points_2(5) = New Point((20 + xx32) * q, (14 + yy32) * q)
        byousya6_2()
    End Sub


    Dim brush_white As New SolidBrush(Color.White)
    Dim brush_black As New SolidBrush(Color.Black)
    Dim brush_white2 As New SolidBrush(Color.White)
    Dim brush_black2 As New SolidBrush(Color.Black)
    Dim brush_red As New SolidBrush(Color.LightPink)
    Dim brush_white3 As New SolidBrush(Color.White)
    Dim brush_black3 As New SolidBrush(Color.Black)
    Dim brush_white4 As New SolidBrush(Color.White)
    Dim brush_black4 As New SolidBrush(Color.Black)
    Dim brush_white5 As New SolidBrush(Color.White)
    Dim brush_black5 As New SolidBrush(Color.Black)
    Dim brush_black6 As New SolidBrush(Color.Black)



    Dim canvas2 As New Bitmap(210, 156)
    Dim g4 As Graphics = Graphics.FromImage(canvas2)
    Dim mypen4 As New Pen(Color.Black, 2)


    Dim picturesize_x = 8080
    Dim picturesize_y = 5840
    '1154*q
    '834*q


    '描画先とするImageオブジェクトを作成する
    'Dim canvas As New Bitmap(PictureBox1.Width, PictureBox1.Height)
    Dim canvas As New Bitmap(8080, 5840)

    'ImageオブジェクトのGraphicsオブジェクトを作成する
    Dim g As Graphics = Graphics.FromImage(canvas)
    Dim g2 As Graphics = Graphics.FromImage(canvas)
    Dim g3 As Graphics = Graphics.FromImage(canvas)
    Dim g5 As Graphics = Graphics.FromImage(canvas)
    Dim g6 As Graphics = Graphics.FromImage(canvas)
    Dim g7 As Graphics = Graphics.FromImage(canvas)
    Dim g8 As Graphics = Graphics.FromImage(canvas)
    Dim g10 As Graphics = Graphics.FromImage(canvas)
    Dim g11 As Graphics = Graphics.FromImage(canvas)
    Dim g12 As Graphics = Graphics.FromImage(canvas)
    Dim g13 As Graphics = Graphics.FromImage(canvas)
    Dim mypen As New Pen(Color.Black, 2)
    Dim mypen2 As New Pen(Color.Black, 2)
    Dim mypen3 As New Pen(Color.Black, 2)
    Dim mypen5 As New Pen(Color.Black, 2)
    Dim mypen6 As New Pen(Color.Black, 2)
    Dim mypen7 As New Pen(Color.Black, 2)
    Dim mypen8 As New Pen(Color.Black, 4)
    Dim mypen9 As New Pen(Color.Black, 4)
    Dim w_mypen As Integer = 0

    Dim car_position() As Integer = {0, 0}
    Dim wall_position() As Integer = {0, 0, 0}

    'CSVファイルに書き込むときに使うEncoding
    Dim enc As System.Text.Encoding =
        System.Text.Encoding.GetEncoding("Shift_JIS")


    'For n = 0 To UBound(MaxCell)

    '    sr.Write(MaxCell(n))
    '    sr.Write(",")
    'Next
    'sr.Close()
    Dim Flag_firsttime As Boolean = False


    Dim record_ennsyou(limit_time + 1) As Integer
    Dim ennsyou As Integer

    Dim flag_sousa As Boolean

    Dim name_zibun As String
    Dim zyunnbann As String

    Public Sub sdf()

        name_zibun = スタート.name_zibun
        zyunnbann = スタート.zyunnbann

        If 親 = True Then
            mtimer3.Change(Timeout.Infinite, Timeout.Infinite)
        End If

        mtimer2.Change(Timeout.Infinite, Timeout.Infinite)
        Grade()


        Dim sr As New System.IO.StreamWriter(Output_path & "\ログ(集団)" & name_zibun & zyunnbann & ".csv", False, enc)

        '最終的な結果
        sr.Write("街全体の面積")
        sr.Write(",")
        sr.Write("焼損面積")
        sr.Write(",")
        sr.Write("施設A")
        sr.Write(",")
        sr.Write("施設B")
        sr.Write(",")
        sr.Write("施設C")
        sr.Write(",")
        sr.Write("施設D")
        sr.Write(",")
        sr.Write("施設E")
        sr.Write(",")
        sr.Write("施設F")
        sr.Write(",")
        sr.WriteLine()

        Dim aaa = 0
        Dim bbb = 0
        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                If ArrayID(i, j) <> 0 Then
                    bbb += 1

                    If ArrayState(i, j) <> 0 Then
                        aaa += 1
                    End If
                End If
            Next
        Next
        sr.Write(bbb)
        sr.Write(",")
        sr.Write(aaa)
        sr.Write(",")
        If Result(施設A_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If

        If Result(施設B_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If
        If Result(施設C_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If

        If Result(施設D_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If

        If Result(施設E_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If

        If Result(施設F_id) = 0 Then
            sr.Write("守れた")
            sr.Write(",")
        Else
            sr.Write("守れなかった")
            sr.Write(",")
        End If


        sr.WriteLine()
        sr.WriteLine()

        '結果(時系列)
        sr.Write("経過時間")
        sr.Write(",")
        sr.Write("焼損面積")
        sr.Write(",")
        sr.Write("風速")
        sr.Write(",")
        sr.Write("風向")
        sr.Write(",")
        sr.Write("消防車")
        sr.Write(",")
        sr.Write("機材")
        sr.Write(",")
        sr.Write("バリア")
        sr.Write(",")
        sr.Write("イベント")
        sr.Write(",")
        sr.Write("A")
        sr.Write("(" & スタート.name_pcA & ")")
        sr.Write(",")
        sr.Write("B")
        sr.Write("(" & スタート.name_pcB & ")")
        sr.Write(",")
        sr.Write("C")
        sr.Write("(" & スタート.name_pcC & ")")
        sr.Write(",")
        sr.WriteLine()


        For n = 0 To count

            sr.Write(n)
            sr.Write(",")

            sr.Write(record_ennsyou(n))
            sr.Write(",")

            sr.Write(WindSpeed(n \ 5))
            sr.Write(",")
            sr.Write(WindDirection(n \ 5))
            sr.Write(",")
            sr.Write(resorce_a(n, 0))
            sr.Write(",")
            sr.Write(resorce_a(n, 1))
            sr.Write(",")
            sr.Write(resorce_a(n, 2))
            sr.Write(",")
            If time_douzitahatu = n Then
                sr.Write("同時多発火災発生")
                sr.Write(",")
            ElseIf time_douzitahatu2 = n Then
                sr.Write("同時多発火災発生")
                sr.Write(",")
            ElseIf time_sinario = n Then
                sr.Write("シナリオ発生")
                sr.Write(",")
            ElseIf end_sinario = n Then
                sr.Write("シナリオ終了")
                sr.Write(",")

            ElseIf time_sinario2 = n Then
                sr.Write("シナリオ発生")
                sr.Write(",")

            Else
                sr.Write("")
                sr.Write(",")
            End If

            'Aの操作
            If n > 0 Then

                flag_sousa = False

                For p = 0 To count_car
                    If record_car(p, 6) - 2 = n And record_car(p, 7) = IP_parent Then
                        sr.Write("消防車")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_break
                    If record_break(p, 0) = n And record_break(p, 5) = IP_parent Then
                        sr.Write("破壊")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_wall
                    If record_wall(p, 0) = n And record_wall(p, 9) = IP_parent Then
                        sr.Write("バリア")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
            End If
            If flag_sousa = False Then
                sr.Write(",")
            End If


            'Bの操作
            If n > 0 Then

                flag_sousa = False

                For p = 0 To count_car
                    If record_car(p, 6) - 2 = n And record_car(p, 7) = IP_child1 Then
                        sr.Write("消防車")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_break
                    If record_break(p, 0) = n And record_break(p, 5) = IP_child1 Then
                        sr.Write("破壊")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_wall
                    If record_wall(p, 0) = n And record_wall(p, 9) = IP_child1 Then
                        sr.Write("バリア")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
            End If
            If flag_sousa = False Then
                sr.Write(",")
            End If

            'Cの操作
            If n > 0 Then

                flag_sousa = False

                For p = 0 To count_car
                    If record_car(p, 6) - 2 = n And record_car(p, 7) = ip_child2 Then
                        sr.Write("消防車")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_break
                    If record_break(p, 0) = n And record_break(p, 5) = ip_child2 Then
                        sr.Write("破壊")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
                For p = 0 To count_wall
                    If record_wall(p, 0) = n And record_wall(p, 9) = ip_child2 Then
                        sr.Write("バリア")
                        sr.Write(",")
                        flag_sousa = True
                    End If
                Next
            End If
            If flag_sousa = False Then
                sr.Write(",")
            End If


            sr.WriteLine()

        Next



        sr.Close()
        sr.Dispose()


        ''ログの出力
        ''バリア
        'Dim srwall As New System.IO.StreamWriter(Output_path & "\record_wall.csv", False, enc)
        'srwall.Write("count")
        'srwall.Write(",")
        'srwall.Write("i")
        'srwall.Write(",")
        'srwall.Write("j")
        'srwall.Write(",")
        'srwall.Write("lug")
        'srwall.Write(",")
        'srwall.Write("縦or横")
        'srwall.Write(",")
        'srwall.Write("建物の位置")
        'srwall.Write(",")
        'srwall.Write("長さ")
        'srwall.Write(",")
        'srwall.Write("結果")
        'srwall.Write(",")
        'srwall.Write("フラグ")
        'srwall.Write(",")
        'srwall.Write("IP")
        'srwall.Write(",")
        'srwall.WriteLine()
        'For kk = 0 To count_wall - 1
        '    For tt = 0 To 9
        '        srwall.Write(record_wall(kk, tt))
        '        srwall.Write(",")
        '    Next
        '    srwall.WriteLine()
        'Next
        'srwall.Close()
        'srwall.Dispose()

        ''破壊
        'Dim srbreak As New System.IO.StreamWriter(Output_path & "\record_break.csv", False, enc)
        'srbreak.Write("count")
        'srbreak.Write(",")
        'srbreak.Write("建物ID")
        'srbreak.Write(",")
        'srbreak.Write("Lug")
        'srbreak.Write(",")
        'srbreak.Write("フラグ")
        'srbreak.Write(",")
        'srbreak.Write("結果")
        'srbreak.Write(",")
        'srbreak.Write("IP")
        'srbreak.Write(",")
        'srbreak.WriteLine()
        'For kk = 0 To count_break - 1
        '    For tt = 0 To 5
        '        srbreak.Write(record_break(kk, tt))
        '        srbreak.Write(",")
        '    Next
        '    srbreak.WriteLine()
        'Next
        'srbreak.Close()
        'srbreak.Dispose()

        ''消防車
        'Dim srcar As New System.IO.StreamWriter(Output_path & "\record_car.csv", False, enc)
        'srcar.Write("建物ID")
        'srcar.Write(",")
        'srcar.Write("i座標")
        'srcar.Write(",")
        'srcar.Write("j座標")
        'srcar.Write(",")
        'srcar.Write("放水の方向")
        'srcar.Write(",")
        'srcar.Write("i")
        'srcar.Write(",")
        'srcar.Write("j")
        'srcar.Write(",")
        'srcar.Write("count")
        'srcar.Write(",")
        'srcar.Write("IP")
        'srcar.Write(",")
        'srcar.WriteLine()
        'For kk = 0 To count_car - 1
        '    For tt = 0 To 7
        '        srcar.Write(record_car(kk, tt))
        '        srcar.Write(",")
        '    Next
        '    srcar.WriteLine()
        'Next
        'srcar.Close()
        'srcar.Dispose()

        ''リソース数
        'Dim srresorce As New System.IO.StreamWriter(Output_path & "\record_resorce.csv", False, enc)
        'srresorce.Write("消防車")
        'srresorce.Write(",")
        'For kk = 0 To count
        '    srresorce.Write(resorce_a(kk, 0))
        '    srresorce.Write(",")
        'Next
        'srresorce.WriteLine()
        'srresorce.Write("バリア")
        'srresorce.Write(",")
        'For kk = 0 To count
        '    srresorce.Write(resorce_a(kk, 1))
        '    srresorce.Write(",")
        'Next
        'srresorce.WriteLine()
        'srresorce.Write("破壊")
        'srresorce.Write(",")
        'For kk = 0 To count
        '    srresorce.Write(resorce_a(kk, 2))
        '    srresorce.Write(",")
        'Next
        'srresorce.WriteLine()
        'srresorce.Close()
        'srresorce.Dispose()


    End Sub



    Dim id_break As Integer
    Dim i_break
    Dim j_break
    Dim gg = 0

    Public Property ArrayTime_fire1 As Integer(,)
        Get
            Return ArrayTime_fire
        End Get
        Set(value As Integer(,))
            ArrayTime_fire = value
        End Set
    End Property

    Private Sub Timer()

        permit_recieve_break()
        permit_recieve_car()
        permit_recieve_wall()

        recieve_cursol_1()
        recieve_cursol_2()

        '子PC
        If スタート.親PC.Checked = False Then
            Recieve_count()
            '許可待ち
            recieve_finish()
        End If

        System.Threading.Thread.Sleep(3000)

        '親PC
        If スタート.親PC.Checked = True Then
            'count更新用タイマー
            mtimer3.Change(0, 1000)
            '許可要請待ち
            request_operation_recieve_break()
            request_operation_recieve_car()
            request_operation_recieve_wall()
        End If
        '操作用タイマー
        mtimer2.Change(0, 70)
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs)
        Timer()
    End Sub




    'カウントダウン
    Private Sub Timer_2()

        Timer2.Enabled = True
    End Sub
    Private Sub Timer2_Tick(sender As Object, e As EventArgs) Handles Timer2.Tick


        'If count_start >= 1 Then にすると最初のカウントがなくなるよ！！
        If count_start >= 10 Then
            Timer2.Enabled = False
            Label44.Visible = False

            Timer()
        End If

        PictureBox1.Image = canvas
        Label44.Text = (10 - count_start).ToString
        count_start += 1
    End Sub


    Private Sub Button3_Click(sender As Object, e As EventArgs)
        Timer1.Stop()
    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs)
        check_click = 0
    End Sub

    Private Sub Format()


        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                ArrayState(i, j) = 0
                arraystate2(i, j) = 0
                ArrayTime_fire1(i, j) = 9999
                ArrayStateDown(i, j) = 0
                ArrayStateLeft(i, j) = 0
                ArrayStateRight(i, j) = 0
                ArrayStateUp(i, j) = 0

            Next
        Next
        For i = 1 To maxID
            HighFireProcessTime(i) = 9999
        Next

        For k = 0 To UBound(arraystate_a, 1)
            For i = 0 To tate - 1
                For j = 0 To yoko - 1
                    arraystate_a(k, i, j) = 0
                Next
            Next
        Next
        For k = 0 To UBound(result_a, 1)
            For id = 0 To maxID
                result_a(k, id) = 0
            Next
        Next
        For id = 0 To maxID
            Result(id) = 0
        Next
    End Sub

    Private Sub Button4_Click_1(sender As Object, e As EventArgs)
        For i = 0 To UBound(ArrayState, 1)
            For j = 0 To UBound(ArrayState, 2)
                If j = UBound(ArrayState, 2) Then
                    成績.Label1.Text += "," + ArrayState(i, j).ToString & vbCrLf
                Else
                    成績.Label1.Text += "," + ArrayState(i, j).ToString
                End If
            Next
        Next
        成績.Label1.Text += vbCrLf
    End Sub



    Dim count_zennsyou0 = 0
    Dim count_hannsyou50 = 0
    Dim count_bubunnsyou70 = 0
    Dim count_normal100 = 0
    Dim count_water80 = 0
    Dim count_break0 = 0

    Dim score = 0

    Private Sub Grade()

        Timer1.Stop()
        Timer2.Stop()
        Timer3.Stop()
        Timer4.Stop()

        スタート.byouinn = 0
        スタート.rouzinnhome = 0


        Dim count_bunnsi As Integer = 0
        Dim count_bunnbo As Integer = 0
        For i = 0 To tate - 1
            For j = 0 To yoko - 1
                If ArrayState(i, j) <> 0 And ArrayID(i, j) > 0 Then
                    count_bunnsi += 1
                End If
                If ArrayID(i, j) > 0 Then
                    count_bunnbo += 1
                End If
            Next
        Next
        スタート.bunnbo = count_bunnbo
        スタート.bunnsi = count_bunnsi

        If Result(施設A_id) > 0 Then
            スタート.rouzinnhome = 1
        End If
        If Result(施設B_id) > 0 Then
            スタート.byouinn = 1
        End If
        If Result(施設C_id) > 0 Then
            スタート.sisetuC = 1
        End If
        If Result(施設D_id) > 0 Then
            スタート.sisetuD = 1
        End If
        If Result(施設E_id) > 0 Then
            スタート.sisetuE = 1
        End If
        If Result(施設F_id) > 0 Then
            スタート.sisetuF = 1
        End If



        成績.Show()




        Console.WriteLine(スタート.FolderBrowserDialog1.SelectedPath)

    End Sub










    Dim record_zituzikan(1100) As Integer

    Dim result_final_1(1100, 29) As Integer
    Dim count_result0 As Integer = 0
    Dim count_result1 As Integer = 0
    Dim count_result2 As Integer = 0
    Dim count_result3 As Integer = 0
    Dim count_result4 As Integer = 0
    Dim count_result5 As Integer = 0
    Dim count_result6 As Integer = 0

    Dim result_final_2(1100, 29) As Integer
    Dim count_result_2 As Integer = 0

    Dim result_final_3(1100, 29) As Integer
    Dim count_result_3 As Integer = 0

    Dim result_final_4(1100, 29) As Integer
    Dim count_result_4 As Integer = 0

    Dim result_final_5(1100, 29) As Integer
    Dim count_result_5 As Integer = 0

    Dim resorce_a(1501, 2) As Integer

    Dim flag_rouzinhome As Integer = 0
    Dim flag_byouin As Integer = 0



    Private Sub Button2_Click_1(sender As Object, e As EventArgs)
        Timer1.Start()
    End Sub


    <System.Security.Permissions.UIPermission(
       System.Security.Permissions.SecurityAction.Demand,
       Window:=System.Security.Permissions.UIPermissionWindow.AllWindows)>
    Protected Overrides Function ProcessDialogKey(
           ByVal keyData As Keys) As Boolean
        If (keyData And Keys.KeyCode) = Keys.S Then
            スタート.loading()
            Return True
        ElseIf (keyData And Keys.KeyCode) = Keys.X Then
            スタート.finish()
            Return True
        End If

        Return MyBase.ProcessDialogKey(keyData)
    End Function

    Private Sub 実験開始_Click(sender As Object, e As EventArgs) Handles 実験開始.Click


        Timer2.Enabled = True


        実験開始.Visible = False

    End Sub


    Dim count_keep = -1



    'Stopwatchオブジェクトを作成する 
    Dim sw5 As New System.Diagnostics.Stopwatch()
    Dim sw6 As New System.Diagnostics.Stopwatch()
    Dim sw7 As New System.Diagnostics.Stopwatch()


    '描写＜１秒ごとの更新＞
    Public Sub byousya_takakkei_inner(cancellationToken4 As CancellationToken)
        SyncLock Me
            'Panel1.HorizontalScroll.Value = (sql_x / 210) * 5832
            'Panel1.VerticalScroll.Value = (sql_y / 156) * 4232
            Try
                For kp = 0 To 31
                    'If xx(0 + kp * 32) * q > (sql_x / 210) * 5832 And xx(31 + kp * 32) * q < (sql_x / 210) * 5832 + 500 Then
                    '    If yy(0 + kp * 32) * q > (sql_y / 156) * 4232 And yy(31 + kp * 32) * q < (sql_y / 156) * 4232 + 500 Then
                    egaku_1(kp * nibai, xx(0 + kp * 32), yy(0 + kp * 32))
                    egaku_2(kp * nibai, xx(1 + kp * 32), yy(1 + kp * 32))
                    egaku_3(kp * nibai, xx(2 + kp * 32), yy(2 + kp * 32))
                    egaku_4(kp * nibai, xx(3 + kp * 32), yy(3 + kp * 32))
                    egaku_5(kp * nibai, xx(4 + kp * 32), yy(4 + kp * 32))
                    egaku_6(kp * nibai, xx(5 + kp * 32), yy(5 + kp * 32))
                    egaku_7(kp * nibai, xx(6 + kp * 32), yy(6 + kp * 32))
                    egaku_8(kp * nibai, xx(7 + kp * 32), yy(7 + kp * 32))
                    egaku_9(kp * nibai, xx(8 + kp * 32), yy(8 + kp * 32))
                    egaku_10(kp * nibai, xx(9 + kp * 32), yy(9 + kp * 32))
                    egaku_11(kp * nibai, xx(10 + kp * 32), yy(10 + kp * 32))
                    egaku_12(kp * nibai, xx(11 + kp * 32), yy(11 + kp * 32))
                    egaku_13(kp * nibai, xx(12 + kp * 32), yy(12 + kp * 32))
                    egaku_14(kp * nibai, xx(13 + kp * 32), yy(13 + kp * 32))
                    egaku_15(kp * nibai, xx(14 + kp * 32), yy(14 + kp * 32))

                    'egaku_16(kp * nibai, xx(15 + kp * 32), yy(15 + kp * 32))
                    'egaku_17(kp * nibai, xx(16 + kp * 32), yy(16 + kp * 32))
                    'egaku_18(kp * nibai, xx(17 + kp * 32), yy(17 + kp * 32))
                    'egaku_19(kp * nibai, xx(18 + kp * 32), yy(18 + kp * 32))
                    'egaku_20(kp * nibai, xx(19 + kp * 32), yy(19 + kp * 32))
                    'egaku_21(kp * nibai, xx(20 + kp * 32), yy(20 + kp * 32))
                    'egaku_22(kp * nibai, xx(21 + kp * 32), yy(21 + kp * 32))
                    'egaku_23(kp * nibai, xx(22 + kp * 32), yy(22 + kp * 32))
                    'egaku_24(kp * nibai, xx(23 + kp * 32), yy(23 + kp * 32))
                    'egaku_25(kp * nibai, xx(24 + kp * 32), yy(24 + kp * 32))

                    'egaku_27(kp * nibai, xx(26 + kp * 32), yy(26 + kp * 32))
                    'egaku_28(kp * nibai, xx(27 + kp * 32), yy(27 + kp * 32))
                    'egaku_29(kp * nibai, xx(28 + kp * 32), yy(28 + kp * 32))
                    'egaku_30(kp * nibai, xx(29 + kp * 32), yy(29 + kp * 32))
                    'egaku_31(kp * nibai, xx(30 + kp * 32), yy(30 + kp * 32))
                    'egaku_32(kp * nibai, xx(31 + kp * 32), yy(31 + kp * 32))
                    '    End If
                    'End If
                Next
            Catch ex As Exception
                Console.WriteLine("キャンセル＜多角＞")
            End Try
        End SyncLock
    End Sub



    Public Sub byousya_takakkei_af_inner(cancellationToken4 As CancellationToken)
        SyncLock Me
            'Panel1.HorizontalScroll.Value = (sql_x / 210) * 5832
            'Panel1.VerticalScroll.Value = (sql_y / 156) * 4232
            Try
                For kp2 = 0 To 31
                    '            'If xx(0 + kp * 32) * q > (sql_x / 210) * 5832 And xx(31 + kp * 32) * q < (sql_x / 210) * 5832 + 500 Then
                    '            '    If yy(0 + kp * 32) * q > (sql_y / 156) * 4232 And yy(31 + kp * 32) * q < (sql_y / 156) * 4232 + 500 Then
                    'egaku_1(kp2 * nibai, xx(0 + kp2 * 32), yy(0 + kp2 * 32))
                    'egaku_2(kp2 * nibai, xx(1 + kp2 * 32), yy(1 + kp2 * 32))
                    'egaku_3(kp2 * nibai, xx(2 + kp2 * 32), yy(2 + kp2 * 32))
                    'egaku_4(kp2 * nibai, xx(3 + kp2 * 32), yy(3 + kp2 * 32))
                    'egaku_5(kp2 * nibai, xx(4 + kp2 * 32), yy(4 + kp2 * 32))
                    'egaku_6(kp2 * nibai, xx(5 + kp2 * 32), yy(5 + kp2 * 32))
                    'egaku_7(kp2 * nibai, xx(6 + kp2 * 32), yy(6 + kp2 * 32))
                    'egaku_8(kp2 * nibai, xx(7 + kp2 * 32), yy(7 + kp2 * 32))
                    'egaku_9(kp2 * nibai, xx(8 + kp2 * 32), yy(8 + kp2 * 32))
                    'egaku_10(kp2 * nibai, xx(9 + kp2 * 32), yy(9 + kp2 * 32))
                    'egaku_11(kp2 * nibai, xx(10 + kp2 * 32), yy(10 + kp2 * 32))
                    'egaku_12(kp2 * nibai, xx(11 + kp2 * 32), yy(11 + kp2 * 32))
                    'egaku_13(kp2 * nibai, xx(12 + kp2 * 32), yy(12 + kp2 * 32))
                    'egaku_14(kp2 * nibai, xx(13 + kp2 * 32), yy(13 + kp2 * 32))
                    'egaku_15(kp2 * nibai, xx(14 + kp2 * 32), yy(14 + kp2 * 32))

                    egaku_16(kp2 * nibai, xx(15 + kp2 * 32), yy(15 + kp2 * 32))
                    egaku_17(kp2 * nibai, xx(16 + kp2 * 32), yy(16 + kp2 * 32))
                    egaku_18(kp2 * nibai, xx(17 + kp2 * 32), yy(17 + kp2 * 32))
                    egaku_19(kp2 * nibai, xx(18 + kp2 * 32), yy(18 + kp2 * 32))
                    egaku_20(kp2 * nibai, xx(19 + kp2 * 32), yy(19 + kp2 * 32))
                    egaku_21(kp2 * nibai, xx(20 + kp2 * 32), yy(20 + kp2 * 32))
                    egaku_22(kp2 * nibai, xx(21 + kp2 * 32), yy(21 + kp2 * 32))
                    egaku_23(kp2 * nibai, xx(22 + kp2 * 32), yy(22 + kp2 * 32))
                    egaku_24(kp2 * nibai, xx(23 + kp2 * 32), yy(23 + kp2 * 32))
                    egaku_25(kp2 * nibai, xx(24 + kp2 * 32), yy(24 + kp2 * 32))

                    egaku_27(kp2 * nibai, xx(26 + kp2 * 32), yy(26 + kp2 * 32))
                    egaku_28(kp2 * nibai, xx(27 + kp2 * 32), yy(27 + kp2 * 32))
                    egaku_29(kp2 * nibai, xx(28 + kp2 * 32), yy(28 + kp2 * 32))
                    egaku_30(kp2 * nibai, xx(29 + kp2 * 32), yy(29 + kp2 * 32))
                    egaku_31(kp2 * nibai, xx(30 + kp2 * 32), yy(30 + kp2 * 32))
                    egaku_32(kp2 * nibai, xx(31 + kp2 * 32), yy(31 + kp2 * 32))
                    '            '    End If
                    '            'End If
                Next
            Catch ex As Exception
                Console.WriteLine("キャンセル＜多角222222＞")
            End Try
        End SyncLock
    End Sub









    Public Sub byousya_sikaku_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For i = 0 To UBound(sikaku_total, 1) \ 6
                    'For i = 0 To UBound(sikaku_total, 1)
                    If Buildingstructure(sikaku_total(i)) = 0 Then
                        mypen2.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(i)) = 1 Then
                        mypen2.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(i)) = 2 Then
                        mypen2.Color = taika
                    End If
                    xxxxx = Array_position(i, 0) * q + w_mypen \ 2
                    yyyyy = Array_position(i, 1) * q + w_mypen \ 2
                    w = Array_position(i, 2) * q - w_mypen
                    h = Array_position(i, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(i)) = 6 Then
                        g3.FillRectangle(brush_black3, xxxxx, yyyyy, w, h)
                        g3.DrawRectangle(mypen2, xxxxx, yyyyy, w, h)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(i)) = 0 Then
                        g3.FillRectangle(brush_white3, xxxxx, yyyyy, w, h)
                        g3.DrawRectangle(mypen2, xxxxx, yyyyy, w, h)
                        'それ以外は、全て枠だけ
                    Else
                        g3.DrawRectangle(mypen2, xxxxx, yyyyy, w, h)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub


    Public Sub byousya_sikaku2_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For j = UBound(sikaku_total, 1) \ 6 + 1 To (UBound(sikaku_total, 1) \ 6) * 2
                    If Buildingstructure(sikaku_total(j)) = 0 Then
                        mypen6.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(j)) = 1 Then
                        mypen6.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(j)) = 2 Then
                        mypen6.Color = taika
                    End If
                    xxxxx2 = Array_position(j, 0) * q + w_mypen \ 2
                    yyyyy2 = Array_position(j, 1) * q + w_mypen \ 2
                    w2 = Array_position(j, 2) * q - w_mypen
                    h2 = Array_position(j, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(j)) = 6 Then
                        g6.FillRectangle(brush_black4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(j)) = 0 Then
                        g6.FillRectangle(brush_white4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'それ以外は、全て枠だけ
                    Else
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub

    Public Sub byousya_sikaku3_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For j = (UBound(sikaku_total, 1) \ 6) * 2 + 1 To (UBound(sikaku_total, 1) \ 6) * 3
                    If Buildingstructure(sikaku_total(j)) = 0 Then
                        mypen6.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(j)) = 1 Then
                        mypen6.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(j)) = 2 Then
                        mypen6.Color = taika
                    End If
                    xxxxx2 = Array_position(j, 0) * q + w_mypen \ 2
                    yyyyy2 = Array_position(j, 1) * q + w_mypen \ 2
                    w2 = Array_position(j, 2) * q - w_mypen
                    h2 = Array_position(j, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(j)) = 6 Then
                        g6.FillRectangle(brush_black4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(j)) = 0 Then
                        g6.FillRectangle(brush_white4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'それ以外は、全て枠だけ
                    Else
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub

    Public Sub byousya_sikaku4_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For j = (UBound(sikaku_total, 1) \ 6) * 3 + 1 To (UBound(sikaku_total, 1) \ 6) * 4
                    If Buildingstructure(sikaku_total(j)) = 0 Then
                        mypen6.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(j)) = 1 Then
                        mypen6.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(j)) = 2 Then
                        mypen6.Color = taika
                    End If
                    xxxxx2 = Array_position(j, 0) * q + w_mypen \ 2
                    yyyyy2 = Array_position(j, 1) * q + w_mypen \ 2
                    w2 = Array_position(j, 2) * q - w_mypen
                    h2 = Array_position(j, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(j)) = 6 Then
                        g6.FillRectangle(brush_black4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(j)) = 0 Then
                        g6.FillRectangle(brush_white4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'それ以外は、全て枠だけ
                    Else
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub

    Public Sub byousya_sikaku5_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For j = (UBound(sikaku_total, 1) \ 6) * 4 + 1 To (UBound(sikaku_total, 1) \ 6) * 5
                    If Buildingstructure(sikaku_total(j)) = 0 Then
                        mypen6.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(j)) = 1 Then
                        mypen6.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(j)) = 2 Then
                        mypen6.Color = taika
                    End If
                    xxxxx2 = Array_position(j, 0) * q + w_mypen \ 2
                    yyyyy2 = Array_position(j, 1) * q + w_mypen \ 2
                    w2 = Array_position(j, 2) * q - w_mypen
                    h2 = Array_position(j, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(j)) = 6 Then
                        g6.FillRectangle(brush_black4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(j)) = 0 Then
                        g6.FillRectangle(brush_white4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'それ以外は、全て枠だけ
                    Else
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub

    Public Sub byousya_sikaku6_inner(cancellationToken5 As CancellationToken)
        SyncLock Me

            Try
                For j = (UBound(sikaku_total, 1) \ 6) * 5 + 1 To UBound(sikaku_total, 1)
                    If Buildingstructure(sikaku_total(j)) = 0 Then
                        mypen6.Color = mokuzou
                    ElseIf Buildingstructure(sikaku_total(j)) = 1 Then
                        mypen6.Color = bouka
                    ElseIf Buildingstructure(sikaku_total(j)) = 2 Then
                        mypen6.Color = taika
                    End If
                    xxxxx2 = Array_position(j, 0) * q + w_mypen \ 2
                    yyyyy2 = Array_position(j, 1) * q + w_mypen \ 2
                    w2 = Array_position(j, 2) * q - w_mypen
                    h2 = Array_position(j, 3) * q - w_mypen

                    'If xxxxx > (sql_x / 210) * 5832 And xxxxx < (sql_x / 210) * 5832 + 1500 Then
                    '    If yyyyy > (sql_y / 156) * 4232 And yyyyy < (sql_y / 156) * 4232 + 1500 Then
                    '燃え尽きてしまった場合
                    If result_a(count Mod 2, sikaku_total(j)) = 6 Then
                        g6.FillRectangle(brush_black4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'ノーマル状態の場合
                    ElseIf result_a(count Mod 2, sikaku_total(j)) = 0 Then
                        g6.FillRectangle(brush_white4, xxxxx2, yyyyy2, w2, h2)
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                        'それ以外は、全て枠だけ
                    Else
                        g6.DrawRectangle(mypen6, xxxxx2, yyyyy2, w2, h2)
                    End If
                    '    End If
                    'End If

                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub


    Public Sub byousya_fire_inner(cancellationToken6 As CancellationToken)
        SyncLock Me

            Try

                '延焼の状態の色
                For i = 0 To tate - 1
                    For j = 0 To yoko - 1
                        If ArrayID(i, j) > 0 Then
                            If result_a(count Mod 2, ArrayID(i, j)) <> 0 And result_a(count Mod 2, ArrayID(i, j)) <> 6 Then
                                If arraystate_a(count Mod 2, i, j) = 0 Then
                                    g2.FillRectangle(Brushes.White, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 1 Then
                                    g2.FillRectangle(Brushes.LightPink, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 2 Then
                                    g2.FillRectangle(Brushes.Red, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 3 Then
                                    g2.FillRectangle(Brushes.LightBlue, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 4 Then
                                    g2.FillRectangle(Brushes.PaleVioletRed, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 5 Then
                                    g2.FillRectangle(Brushes.DarkGoldenrod, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 6 Then
                                    g2.FillRectangle(Brushes.Black, j * q, i * q, q, q)
                                ElseIf arraystate_a(count Mod 2, i, j) = 7 Then
                                    g2.FillRectangle(Brushes.PaleGoldenrod, j * q, i * q, q, q)
                                End If
                            End If
                            If result_a(count Mod 2, ArrayID(i, j)) = 6 And result_black_check(i, j) <> 1 Then
                                g2.FillRectangle(Brushes.Black, j * q, i * q, q, q)
                                result_black_check(i, j) = 1
                            End If
                        End If
                    Next
                Next

            Catch ex As Exception
                Console.WriteLine("キャンセル＜四角＞")
            End Try
        End SyncLock
    End Sub





    Public Sub number_resource_inner(cancellationToken7 As CancellationToken)


        If count = 0 Then
            number_car_f = resorce(0, 1)
            number_wall_f = resorce(0, 2)
            number_break_f = resorce(0, 3)
        End If
        If resorce(count_resorce, 0) = count Then
            number_car += resorce(count_resorce, 1)
            number_wall += resorce(count_resorce, 2)
            number_break += resorce(count_resorce, 3)
            If count_resorce < UBound(resorce, 1) Then
                number_car_f = resorce(count_resorce + 1, 1)
                number_wall_f = resorce(count_resorce + 1, 2)
                number_break_f = resorce(count_resorce + 1, 3)
            Else
                number_car_f = 0
                number_wall_f = 0
                number_break_f = 0
            End If
            If count_resorce + 1 <= UBound(resorce, 1) Then
                count_resorce += 1
            End If
        End If

    End Sub



    Public Sub operation_break_inner(cancellationToken8 As CancellationToken)
        SyncLock Me
            '破壊-----------------------------------------------------------------------------------------------------------------

            'If select_break = True Then
            If select_break = True And number_break > 0 Then
                'Invoke(New SetLabelTextDelegate10(AddressOf SetLabelText10))
                If Cpos2.Y - c_y > 0 And Cpos2.X - c_x > 0 Then
                    If Cpos2.Y < 1380 And Cpos2.X < 2260 Then
                        i_break = (Cpos2.Y - c_y + scrol_y) \ q
                        j_break = (Cpos2.X - c_x + scrol_x) \ q
                        'If i_break > 0 And j_break > 0 Then
                        '    If i_break < tate - 1 And j_break < yoko - 1 Then
                        id_break = ArrayID(i_break, j_break)

                        'Invoke(New SetLabelTextDelegate9(AddressOf SetLabelText22))

                        If result_a(count Mod 2, id_break) = 0 AndAlso id_break > 0 AndAlso id_break <> 施設B_id AndAlso id_break <> 施設A_id AndAlso id_break <> 施設C_id AndAlso id_break <> 施設D_id AndAlso id_break <> 施設E_id AndAlso id_break <> 施設F_id Then
                            Invoke(New SetLabelTextDelegate11(AddressOf SetLabelText11))
                            If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left And Cpos2.X > c_x - scrol_x Then

                                request_break(count, ArrayID(i_break, j_break), localEP2)


                                'Invoke(New SetLabelTextDelegate9(AddressOf SetLabelText9))
                                select_break = False

                            End If
                        End If
                    End If
                End If
            End If




        End SyncLock
    End Sub

    Dim location_komado_x = 2319
    Dim location_komado_y = 874

    Public Sub operation_komado_inner(cancellationToken9 As CancellationToken)
        SyncLock Me
            'Try
            Invoke(New SetLabelTextDelegate(AddressOf SetLabelText))

            g4.FillRectangle(brush_white2, 0, 0, 210, 156)
            g4.FillRectangle(brush_red, sql_x, sql_y, 50, 40)
            If Cpos.X - location_komado_x - 25 > 0 And Cpos.Y - location_komado_y - 20 > 0 Then
                If Cpos.X - location_komado_x < 210 And Cpos.Y - location_komado_y < 156 Then


                    g4.DrawRectangle(mypen4, Cpos.X - location_komado_x - 25, Cpos.Y - location_komado_y - 20, 50, 40)

                    If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then

                        sql_x = Cpos.X - location_komado_x - 25
                        sql_y = Cpos.Y - location_komado_y - 20
                        Invoke(New SetLabelTextDelegate5(AddressOf SetLabelText5))


                    End If
                End If
            End If
            Invoke(New SetLabelTextDelegate4(AddressOf SetLabelText4))

            'Catch ex As Exception
            '    Console.WriteLine("キャンセル＜小窓＞")
            'End Try
        End SyncLock
    End Sub

    Dim flag_car_select As Boolean

    Dim switch_car As Boolean = False
    Dim switch_wall As Boolean = False
    Dim switch_break As Boolean = False


    Public Sub operation_syouka_inner(cancellationToken10 As CancellationToken)
        SyncLock Me

            Try


                '    '消火------------------------------------------------------------------------------------------------
                'ラジオボタンが押されていれば

                g.FillRectangle(Brushes.LightGray, j_car + q \ 2, i_car + q \ 2, q, q)


                If select_car = True And flag_car_select = False And number_car > 0 Then
                    'Invoke(New SetLabelTextDelegate10(AddressOf SetLabelText10))
                    If Cpos2.Y - c_y > 0 And Cpos2.X - c_x > 0 Then
                        If Cpos2.Y < 1380 And Cpos2.X < 2260 Then



                            i_car2 = (Cpos2.Y - c_y + scrol_y - 2) \ q
                            j_car2 = (Cpos2.X - c_x + scrol_x - 1) \ q

                            i_car = info_car(i_car2, j_car2, 0) * q
                            j_car = info_car(i_car2, j_car2, 1) * q

                            'カーソルに近い位置に消防車を描く
                            g.FillRectangle(Brushes.Orange, j_car + q \ 2, i_car + q \ 2, q, q)

                            If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then

                                flag_car_select = True

                            End If
                        End If
                    End If
                End If

                If select_car = True And flag_car_select = True And number_car > 0 Then

                    'カーソルに近い位置に消防車を描く
                    g.FillRectangle(Brushes.OrangeRed, j_car + q \ 2, i_car + q \ 2, q, q)

                    '右
                    If info_car(i_car2, j_car2, 3) = 1 Then
                        If (Cpos2.Y - c_y + scrol_y) - (i_car + q) < (Cpos2.X - c_x + scrol_x) - (j_car + q) And (Cpos2.Y - c_y + scrol_y) - (i_car + q) > -(Cpos2.X - c_x + scrol_x) + (j_car + q) Then
                            Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText17))
                            If (Control.MouseButtons And MouseButtons.Right) = MouseButtons.Right And select_car = True Then
                                select_car = False
                                Console.WriteLine(sw.ElapsedMilliseconds)
                                If sw.ElapsedMilliseconds < 800 Then
                                    'UDP通信
                                    request_car(ArrayID(i_car / q, j_car / q + 2), i_car, j_car, 1, i_car / q, j_car / q + 2, count + 2, localEP2)
                                Else
                                    request_car(ArrayID(i_car / q, j_car / q + 2), i_car, j_car, 1, i_car / q, j_car / q + 2, count + 3, localEP2)
                                End If



                                'Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText21))

                                i_car = 0
                                j_car = 0
                                Console.WriteLine("消防車(右方向)")
                            End If
                        End If
                    End If


                    '左
                    If info_car(i_car2, j_car2, 2) = 1 Then
                        If (Cpos2.Y - c_y + scrol_y) - (i_car + q) > (Cpos2.X - c_x + scrol_x) - (j_car + q) And (Cpos2.Y - c_y + scrol_y) - (i_car + q) < -(Cpos2.X - c_x + scrol_x) + (j_car + q) Then
                            Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText18))
                            If (Control.MouseButtons And MouseButtons.Right) = MouseButtons.Right And select_car = True Then
                                select_car = False
                                If sw.ElapsedMilliseconds < 800 Then
                                    'UDP通信
                                    request_car(ArrayID(i_car / q, j_car / q - 1), i_car, j_car, 2, i_car / q, j_car / q - 1, count + 2, localEP2)
                                Else
                                    request_car(ArrayID(i_car / q, j_car / q - 1), i_car, j_car, 2, i_car / q, j_car / q - 1, count + 3, localEP2)
                                End If


                                i_car = 0
                                j_car = 0

                                'Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText21))


                            End If
                        End If
                    End If

                    '上
                    If info_car(i_car2, j_car2, 4) = 1 Then
                        If (Cpos2.Y - c_y + scrol_y) - (i_car + q) < (Cpos2.X - c_x + scrol_x) - (j_car + q) And (Cpos2.Y - c_y + scrol_y) - (i_car + q) < -(Cpos2.X - c_x + scrol_x) + (j_car + q) Then
                            Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText19))
                            If (Control.MouseButtons And MouseButtons.Right) = MouseButtons.Right And select_car = True Then
                                select_car = False
                                If sw.ElapsedMilliseconds < 800 Then
                                    'UDP通信
                                    request_car(ArrayID(i_car / q - 1, j_car / q), i_car, j_car, 4, i_car / q - 1, j_car / q, count + 2, localEP2)
                                Else
                                    request_car(ArrayID(i_car / q - 1, j_car / q), i_car, j_car, 4, i_car / q - 1, j_car / q, count + 3, localEP2)
                                End If


                                i_car = 0
                                j_car = 0
                                'Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText21))


                            End If
                        End If

                    End If

                    '下
                    If info_car(i_car2, j_car2, 5) = 1 Then
                        If (Cpos2.Y - c_y + scrol_y) - (i_car + q) > (Cpos2.X - c_x + scrol_x) - (j_car + q) And (Cpos2.Y - c_y + scrol_y) - (i_car + q) > -(Cpos2.X - c_x + scrol_x) + (j_car + q) Then
                            Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText20))
                            If (Control.MouseButtons And MouseButtons.Right) = MouseButtons.Right And select_car = True Then
                                select_car = False
                                If sw.ElapsedMilliseconds < 800 Then
                                    'UDP通信
                                    request_car(ArrayID(i_car / q + 2, j_car / q), i_car, j_car, 3, i_car / q + 2, j_car / q, count + 2, localEP2)
                                Else
                                    request_car(ArrayID(i_car / q + 2, j_car / q), i_car, j_car, 3, i_car / q + 2, j_car / q, count + 3, localEP2)
                                End If


                                i_car = 0
                                j_car = 0

                                'Invoke(New SetLabelTextDelegate17(AddressOf SetLabelText21))

                            End If
                        End If
                    End If
                End If


                If select_car = False Then
                    flag_car_select = False
                End If

                '消火活動中の消防車を表示する
                If count_car > 0 Then
                    For oppaipai = 0 To count_car - 1
                        i_car_byousya = record_car(oppaipai, 1)
                        j_car_byousya = record_car(oppaipai, 2)

                        If record_car(oppaipai, 3) = 1 Then
                            g13.FillRectangle(Brushes.Orange, j_car_byousya + q \ 2, i_car_byousya + q \ 2, q, q)
                            g13.FillRectangle(Brushes.Blue, j_car_byousya + q \ 2 + q, i_car_byousya + q \ 2, 2, q)
                        ElseIf record_car(oppaipai, 3) = 2 Then
                            g13.FillRectangle(Brushes.Orange, j_car_byousya + q \ 2, i_car_byousya + q \ 2, q, q)
                            g13.FillRectangle(Brushes.Blue, j_car_byousya + q \ 2 - 2, i_car_byousya + q \ 2, 2, q)
                        ElseIf record_car(oppaipai, 3) = 3 Then
                            g13.FillRectangle(Brushes.Orange, j_car_byousya + q \ 2, i_car_byousya + q \ 2, q, q)
                            g13.FillRectangle(Brushes.Blue, j_car_byousya + q \ 2, i_car_byousya + q \ 2 + q, q, 2)
                        ElseIf record_car(oppaipai, 3) = 4 Then
                            g13.FillRectangle(Brushes.Orange, j_car_byousya + q \ 2, i_car_byousya + q \ 2, q, q)
                            g13.FillRectangle(Brushes.Blue, j_car_byousya + q \ 2, i_car_byousya + q \ 2 - 2, q, 2)
                        End If

                    Next
                End If


                '他者のリソースも表示するようにする

            Catch ex As Exception
                Console.WriteLine("やっぱりかよ")
            End Try


        End SyncLock
    End Sub


    Dim i_car_byousya
    Dim j_car_byousya
    Dim zurasi
    Dim zurasi2
    Dim nagasa
    Dim i_wall2
    Dim j_wall2
    Dim tatekabe As Boolean = True
    Dim mitibunn_cal
    Dim mitibunn_cal2

    '本当
    Public Sub operation_wall_inner(cancellationToken11 As CancellationToken)
        SyncLock Me


            mypen8.Color = Color.LightGray
            If tatekabe = True Then
                g8.DrawLine(mypen8, (j_wall2 + 1) * q + zurasi, i_wall2 * q, (j_wall2 + 1) * q + zurasi, (i_wall2 + nagasa) * q)
            Else
                g8.DrawLine(mypen8, (j_wall2) * q, (i_wall2 + 1) * q + zurasi, (j_wall2 + nagasa) * q, (i_wall2 + 1) * q + zurasi)
            End If


            If select_wall = True And number_wall > 0 Then
                'Invoke(New SetLabelTextDelegate10(AddressOf SetLabelText10))
                If Cpos2.Y - c_y > 0 And Cpos2.X - c_x > 0 Then
                    If Cpos2.Y < 1380 And Cpos2.X < 2260 Then

                        '壁を消す
                        mypen8.Color = Color.LightGray
                        If tatekabe = True Then
                            g8.DrawLine(mypen8, (j_wall2 + 1) * q + zurasi, i_wall2 * q, (j_wall2 + 1) * q + zurasi, (i_wall2 + nagasa) * q)
                        Else
                            g8.DrawLine(mypen8, (j_wall2) * q, (i_wall2 + 1) * q + zurasi, (j_wall2 + nagasa) * q, (i_wall2 + 1) * q + zurasi)
                        End If
                        i_wall = (Cpos2.Y - c_y + scrol_y - 2) \ q
                        j_wall = (Cpos2.X - c_x + scrol_x - 1) \ q


                        mypen8.Color = Color.Black
                        If Math.Abs(info_wall2(i_wall, j_wall, 0) - i_wall) + Math.Abs(info_wall2(i_wall, j_wall, 1) - j_wall) >= Math.Abs(info_wall_yoko2(i_wall, j_wall, 0) - i_wall) + Math.Abs(info_wall_yoko2(i_wall, j_wall, 1) - j_wall) Then
                            tatekabe = False
                            i_wall2 = info_wall_yoko2(i_wall, j_wall, 0)
                            j_wall2 = info_wall_yoko2(i_wall, j_wall, 1)
                            If info_wall_yoko2(i_wall, j_wall, 2) = 1 Then
                                zurasi = -4
                            Else
                                zurasi = 4
                            End If
                            nagasa = info_wall_yoko2(i_wall, j_wall, 3)
                            mypen8.Color = Color.Black
                            g8.DrawLine(mypen8, (j_wall2) * q, (i_wall2 + 1) * q + zurasi, (j_wall2 + nagasa) * q, (i_wall2 + 1) * q + zurasi)
                        Else
                            tatekabe = True
                            i_wall2 = info_wall2(i_wall, j_wall, 0)
                            j_wall2 = info_wall2(i_wall, j_wall, 1)
                            If info_wall2(i_wall, j_wall, 2) = 1 Then
                                zurasi = -4
                            Else
                                zurasi = 4
                            End If
                            nagasa = info_wall2(i_wall, j_wall, 3)
                            mypen8.Color = Color.Black
                            g8.DrawLine(mypen8, (j_wall2 + 1) * q + zurasi, i_wall2 * q, (j_wall2 + 1) * q + zurasi, (i_wall2 + nagasa) * q)
                        End If


                        If (Control.MouseButtons And MouseButtons.Left) = MouseButtons.Left Then

                            'UDP通信
                            request_wall(count, i_wall2, j_wall2, TimeLug_wall2, tatekabe, zurasi, nagasa, localEP2)


                            '壁を消す
                            mypen8.Color = Color.LightGray
                            If tatekabe = True Then
                                g8.DrawLine(mypen8, (j_wall2 + 1) * q + zurasi, i_wall2 * q, (j_wall2 + 1) * q + zurasi, (i_wall2 + nagasa) * q)
                            Else
                                g8.DrawLine(mypen8, (j_wall2) * q, (i_wall2 + 1) * q + zurasi, (j_wall2 + nagasa) * q, (i_wall2 + 1) * q + zurasi)
                            End If





                            select_wall = False
                            'Invoke(New SetLabelTextDelegate16(AddressOf SetLabelText16))

                        End If

                    End If
                End If
            End If

            If count_wall > 0 Then
                For showkabe = 0 To count_wall - 1

                    If record_wall(showkabe, 8) <> 1 Then

                        If record_wall(showkabe, 5) = 1 Then
                            zurasi2 = 4
                        Else
                            zurasi2 = -4
                        End If
                        '作成完了ならば
                        If record_wall(showkabe, 7) = 1 And record_wall(showkabe, 0) + record_wall(showkabe, 3) <= count Then



                            mypen8.Color = Color.Black
                            If record_wall(showkabe, 4) = 1 Then
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2) + 1) * q + zurasi2, record_wall(showkabe, 1) * q, (record_wall(showkabe, 2) + 1) * q + zurasi2, (record_wall(showkabe, 1) + record_wall(showkabe, 6)) * q)
                            Else
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2, (record_wall(showkabe, 2) + record_wall(showkabe, 6)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2)
                            End If

                            '壁失敗ならば
                        ElseIf record_wall(showkabe, 7) = 2 And record_wall(showkabe, 0) + record_wall(showkabe, 3) = count Then

                            record_wall(showkabe, 8) = 1
                            mypen8.Color = Color.LightGray
                            If record_wall(showkabe, 4) = 1 Then
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2) + 1) * q + zurasi2, record_wall(showkabe, 1) * q, (record_wall(showkabe, 2) + 1) * q + zurasi2, (record_wall(showkabe, 1) + record_wall(showkabe, 6)) * q)
                            Else
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2, (record_wall(showkabe, 2) + record_wall(showkabe, 6)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2)
                            End If



                            '作成途中ならば
                        ElseIf record_wall(showkabe, 0) + TimeLug_wall > count Then


                            mypen8.Color = Color.Gray
                            If record_wall(showkabe, 4) = 1 Then
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2) + 1) * q + zurasi2, record_wall(showkabe, 1) * q, (record_wall(showkabe, 2) + 1) * q + zurasi2, (record_wall(showkabe, 1) + record_wall(showkabe, 6)) * q)
                            Else
                                g8.DrawLine(mypen8, (record_wall(showkabe, 2)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2, (record_wall(showkabe, 2) + record_wall(showkabe, 6)) * q, (record_wall(showkabe, 1) + 1) * q + zurasi2)
                            End If
                        End If
                    End If

                Next

            End If



        End SyncLock
    End Sub




    Private mtimer2 As System.Threading.Timer

    'スレッドタイマーの読み込み
    Private Sub frmTimer3_Load(sender As Object, e As EventArgs) Handles Me.Load
        'タイマコールバック関数
        Dim timerDelegate2 As TimerCallback = New TimerCallback(AddressOf TimerEvent2)
        '1000msecタイマ生成（コールバック関数の設定）
        mtimer2 = New Timer(timerDelegate2, Nothing, Timeout.Infinite, 70)
    End Sub



    Private mtimer3 As System.Threading.Timer

    'スレッドタイマーの読み込み
    Private Sub frmTimer4_Load(sender As Object, e As EventArgs) Handles Me.Load
        'タイマコールバック関数
        Dim timerDelegate3 As TimerCallback = New TimerCallback(AddressOf TimerEvent3)
        '1000msecタイマ生成（コールバック関数の設定）
        mtimer3 = New Timer(timerDelegate3, Nothing, Timeout.Infinite, 1000)
    End Sub



    Dim result_black_check(tate - 1, yoko - 1)


    Private Sub TimerEvent3(ByVal state As Object)
        SyncLock Me
            If count <= limit_time Then


                'UDP通信＜カウント更新＞

                Send_time(count)

                Byousya_fire()

                'カウント更新
                If Flag_firsttime = True Then
                    count += 1
                End If
                'レコードの現状を保存
                'log_record_break()
                'log_record_car()
                'log_record_wall()

                'ストップウォッチ
                sw.Reset()
                sw.Start()

                ReDim hennkou_ij(tate - 1, yoko - 1)
                ReDim hennkou_id(maxID)

                '通常計算
                calculation_normal()
                Console.WriteLine("Timer(count):" & count)

                If count = 0 Then
                    Flag_firsttime = True
                End If
                Invoke(New SetLabelTextDelegate8(AddressOf SetLabelText8))
                '追加リソース(非同期処理)
                number_resource()

                'カウント、リソースの表示
                Invoke(New SetLabelTextDelegate7(AddressOf SetLabelText7))


                'log_record_array()
                'log_record_result()






                resorce_a(count, 0) = number_car
                resorce_a(count, 1) = number_wall
                resorce_a(count, 2) = number_break

                'イベント
                'イベント①
                If count = time_sinario Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText27))
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
                End If
                If count = time_sinario + 1 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
                End If
                If count = end_sinario Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText31))
                End If


                '同時多発①
                If count = time_douzitahatu + 30 Then

                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText30))
                End If
                If count = time_douzitahatu + 31 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
                End If

                If count = time_douzitahatu + 60 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText32))
                End If

                '同時多発②
                If count = time_douzitahatu2 + 30 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText30))
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
                End If

                If count = time_douzitahatu2 + 31 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
                End If

                If count = time_douzitahatu2 + 60 Then
                    Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText32))
                End If


                If count >= limit_time Then

                    If スタート.親PC.Checked = True Then
                        mtimer3.Change(Timeout.Infinite, Timeout.Infinite)
                    End If


                    Send_finish()
                    sdf()

                End If




                Console.WriteLine("タイマーにかかった時間：" & sw.ElapsedMilliseconds)
                Console.WriteLine()

            End If
        End SyncLock
    End Sub

    Private Sub count_renew()
        If count <= limit_time Then

            Byousya_fire()
            'レコードの現状を保存
            'log_record_break()
            'If 子1 = True Then
            '    log_record_car()
            'Else
            '    log_record_wall()
            'End If
            'カウント更新
            If Flag_firsttime = True Then
                count += 1
            End If

            sw.Reset()
            sw.Start()


            ReDim hennkou_ij(tate - 1, yoko - 1)
            ReDim hennkou_id(maxID)

            '通常計算
            calculation_normal()
            Console.WriteLine("Timer(count):" & count)


            If count = 0 Then
                Flag_firsttime = True
            End If
            Invoke(New SetLabelTextDelegate8(AddressOf SetLabelText8))
            '追加リソース(非同期処理)
            number_resource()

            'カウント、リソースの表示
            Invoke(New SetLabelTextDelegate7(AddressOf SetLabelText7))


            'log_record_array()
            'log_record_result()








            resorce_a(count, 0) = number_car
            resorce_a(count, 1) = number_wall
            resorce_a(count, 2) = number_break

            'イベント
            'イベント①
            If count = time_sinario Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText27))
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
            End If
            If count = time_sinario + 1 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
            End If
            If count = end_sinario Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText31))
            End If


            '同時多発①
            If count = time_douzitahatu + 30 Then

                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText30))
            End If
            If count = time_douzitahatu + 31 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
            End If

            If count = time_douzitahatu + 60 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText32))
            End If

            '同時多発②
            If count = time_douzitahatu2 + 30 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText30))
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText28))
            End If

            If count = time_douzitahatu2 + 31 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText29))
            End If

            If count = time_douzitahatu2 + 60 Then
                Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText32))
            End If

            'If count >= limit_time Then


            '    sdf()

            'End If

            Console.WriteLine("タイマーにかかった時間：" & sw.ElapsedMilliseconds)
            Console.WriteLine()
        End If
    End Sub



    Dim sql_x = 0
    Dim sql_y = 0

    Public syuuryou As Boolean = False

    Private Sub TimerEvent2(ByVal state As Object)


        SyncLock Me
            Invoke(New SetLabelTextDelegate10(AddressOf SetLabelText10))
            Invoke(New SetLabelTextDelegate6(AddressOf SetLabelText6))
            '小窓の操作
            operation_komado()

            Invoke(New SetLabelTextDelegate3(AddressOf SetLabelText3))
            '消防車
            operation_syouka()

            '破壊
            operation_break()

            '壁
            operation_wall()
            Invoke(New SetLabelTextDelegate2(AddressOf SetLabelText2))

            show_button()




            If ccc = 3 Then
                Send_cl()
                ccc = 0
            End If
            ccc += 1
        End SyncLock
    End Sub

    Dim ccc = 0

    'イベントの中身


    ' ラベル表示デリゲート宣言
    Private Delegate Sub SetLabelTextDelegate()
    Private Delegate Sub SetLabelTextDelegate2()
    Private Delegate Sub SetLabelTextDelegate3()
    Private Delegate Sub SetLabelTextDelegate4()
    Private Delegate Sub SetLabelTextDelegate5()
    Private Delegate Sub SetLabelTextDelegate6()
    Private Delegate Sub SetLabelTextDelegate7()
    Private Delegate Sub SetLabelTextDelegate8()
    Private Delegate Sub SetLabelTextDelegate9()
    Private Delegate Sub SetLabelTextDelegate10()
    Private Delegate Sub SetLabelTextDelegate11()
    Private Delegate Sub SetLabelTextDelegate12()
    Private Delegate Sub SetLabelTextDelegate13()
    Private Delegate Sub SetLabelTextDelegate14()
    Private Delegate Sub SetLabelTextDelegate15()
    Private Delegate Sub SetLabelTextDelegate16()
    Private Delegate Sub SetLabelTextDelegate17()
    Private Delegate Sub SetLabelTextDelegate18()
    Private Delegate Sub SetLabelTextDelegate23()
    Private Delegate Sub SetLabelTextDelegate24()

    Private Sub SetLabelText()
        Cpos = PointToClient(Cursor.Position)
        'Console.WriteLine(Cpos.X.ToString + "," + Cpos.Y.ToString)
    End Sub
    Private Sub SetLabelText2()
        'PictureBox1に表示する
        PictureBox1.Image = canvas
    End Sub

    Private Sub SetLabelText3()
        'Try
        Cpos2 = PointToClient(Cursor.Position)
        'Label18.Text = (Cpos2.X + Panel1.HorizontalScroll.Value - 230).ToString + "," + (Cpos2.Y + Panel1.VerticalScroll.Value - 8).ToString
        'Catch ex As Exception
        '    Console.WriteLine("キャンセル＜別＞")
        'End Try


    End Sub

    Private Sub SetLabelText4()
        'PictureBox1に表示する
        PictureBox6.Image = canvas2
    End Sub

    Private Sub SetLabelText5()
        Panel1.HorizontalScroll.Value = (sql_x / 210) * picturesize_x
        Panel1.VerticalScroll.Value = (sql_y / 156) * picturesize_y
    End Sub
    Private Sub SetLabelText6()
        sql_x = Panel1.HorizontalScroll.Value * 210 \ picturesize_x
        sql_y = Panel1.VerticalScroll.Value * 156 \ picturesize_y
    End Sub
    Private Sub SetLabelText7()
        '時間表示
        Label3.Text = count Mod 60
        Label6.Text = count \ 60
        Label19.Text = number_car
        Label20.Text = number_break
        Label21.Text = number_wall

        Label41.Text = number_car_f
        Label42.Text = number_break_f
        Label43.Text = number_wall_f
    End Sub



    Private Sub SetLabelText8()
        If count_keep <> count Then
            If count Mod 5 = 0 Then
                If WindDirection(count \ 5) = 0 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図3
                ElseIf WindDirection(count \ 5) = 1 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図7
                ElseIf WindDirection(count \ 5) = 2 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図4
                ElseIf WindDirection(count \ 5) = 3 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図8
                ElseIf WindDirection(count \ 5) = 4 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図5
                ElseIf WindDirection(count \ 5) = 5 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図9
                ElseIf WindDirection(count \ 5) = 6 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図6
                ElseIf WindDirection(count \ 5) = 7 Then
                    PictureBox2.Image = WindowsApp3.My.Resources.Resources.図10
                End If
                Label7.Text = WindSpeed(count \ 5)
            End If

            count_keep = count
        End If
        'リソースの表示
        If number_car = 0 Then
            Label2.ForeColor = Color.Red
            Label19.ForeColor = Color.Red
            'Label16.ForeColor = Color.Red
        Else
            Label2.ForeColor = Color.Black
            Label19.ForeColor = Color.Black
            'Label16.ForeColor = Color.Black
        End If
        If number_break = 0 Then
            Label12.ForeColor = Color.Red
            Label20.ForeColor = Color.Red
            'Label17.ForeColor = Color.Red
        Else
            Label12.ForeColor = Color.Black
            Label20.ForeColor = Color.Black
            'Label17.ForeColor = Color.Black
        End If
        If number_wall = 0 Then
            Label4.ForeColor = Color.Red
            Label21.ForeColor = Color.Red
            'Label18.ForeColor = Color.Red
        Else
            Label4.ForeColor = Color.Black
            Label21.ForeColor = Color.Black
            'Label18.ForeColor = Color.Black
        End If

        If count < resorce(count_resorce, 0) Then
            Label27.Text = (resorce(count_resorce, 0) - count).ToString
        End If

    End Sub

    'Private Sub SetLabelText9()
    '    RadioButton2.Checked = False
    'End Sub


    Private Sub SetLabelText10()
        scrol_x = Panel1.HorizontalScroll.Value
        scrol_y = Panel1.VerticalScroll.Value
    End Sub

    Private Sub SetLabelText11()
        Cursor.Current = Cursors.Cross
    End Sub


    Private Sub SetLabelText12()
        Cursor.Current = Cursors.WaitCursor
    End Sub



    Private Sub SetLabelText17()
        Cursor.Current = Cursors.PanEast
    End Sub
    Private Sub SetLabelText18()
        Cursor.Current = Cursors.PanWest
    End Sub

    Private Sub SetLabelText19()
        Cursor.Current = Cursors.PanNorth
    End Sub

    Private Sub SetLabelText20()
        Cursor.Current = Cursors.PanSouth
    End Sub
    Private Sub SetLabelText22()
        Label23.Text = id_break
    End Sub



    Private Sub SetLabelText23()
        Button6.Visible = True
        Button6.PerformClick()
    End Sub

    Private Sub SetLabelText24()
        'カーソルがピクチャーボックス上ならば
        If x1_cl - c_x > 0 And x1_cl - c_x < 2068 And y1_cl - c_y > 0 And y1_cl - c_y < 1409 Then
            '映せるならば
            If x1_cl + x1_cl_sq > scrol_x + c_x And x1_cl + x1_cl_sq < scrol_x + c_x + 2068 Then
                Label47.Left = x1_cl + x1_cl_sq - scrol_x
                Label47.Top = y1_cl + y1_cl_sq - scrol_y
            Else

            End If
        Else
            Label47.Left = x1_cl
            Label47.Top = y1_cl
        End If

    End Sub
    Private Sub SetLabelText25()
        PictureBox7.Image = canvas3
    End Sub

    Private Sub SetLabelText26()
        'カーソルがピクチャーボックス上ならば
        If x1_c2 - c_x > 0 And x1_c2 - c_x < 2068 And y1_c2 - c_y > 0 And y1_c2 - c_y < 1409 Then
            '映せるならば
            If x1_c2 + x1_c2_sq > scrol_x + c_x And x1_c2 + x1_c2_sq < scrol_x + c_x + 2068 Then
                Label50.Left = x1_c2 + x1_c2_sq - scrol_x
                Label50.Top = y1_c2 + y1_c2_sq - scrol_y
            Else

            End If
        Else
            Label50.Left = x1_c2
            Label50.Top = y1_c2
        End If

    End Sub
    Private Sub SetLabelText27()
        Label28.Text = "渋滞により消防車の到着が遅れています。そのため、使える放水のリソースが通常より少なくなります。"
    End Sub
    Private Sub SetLabelText28()
        Me.BackColor = Color.Red

    End Sub
    Private Sub SetLabelText29()
        Me.BackColor = Color.White
    End Sub
    Private Sub SetLabelText30()
        Label17.Text = "同時多発火災が発生しました。"
    End Sub

    Private Sub SetLabelText31()
        Label28.Text = ""
    End Sub
    Private Sub SetLabelText32()
        Label17.Text = ""
    End Sub


    Dim iiiii
    Dim jjjjj

    Dim xxxxx
    Dim yyyyy
    Dim h
    Dim w
    Dim xxxxx2
    Dim yyyyy2
    Dim h2
    Dim w2


    Dim Cpos As Point
    Dim Cpos2 As Point

    Dim scrol_x = 0
    Dim scrol_y = 0

    Private Sub Button3_Click_1(sender As Object, e As EventArgs) Handles Button3.Click
        'メッセージボックスを表示する 
        Dim result As DialogResult = MessageBox.Show("タスクを終了しますか？",
                                                     "確認",
                                                     MessageBoxButtons.YesNoCancel,
                                                     MessageBoxIcon.Exclamation,
                                                     MessageBoxDefaultButton.Button2)

        '何が選択されたか調べる 
        If result = DialogResult.Yes Then
            '「はい」が選択された時 
            Console.WriteLine("「はい」が選択されました")
            'UDP（終了の送信）
            send_finish()
            sdf()
            Button3.Visible = False
        ElseIf result = DialogResult.No Then
            '「いいえ」が選択された時 
            Console.WriteLine("「いいえ」が選択されました")
        ElseIf result = DialogResult.Cancel Then
            '「キャンセル」が選択された時 
            Console.WriteLine("「キャンセル」が選択されました")
        End If

    End Sub

    Private Sub Button6_Click(sender As Object, e As EventArgs) Handles Button6.Click
        sdf()
        Button6.Visible = False
    End Sub


End Class
